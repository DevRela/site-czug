---
created: 2010-06-26 12:20
creator: 潘俊勇
description: 大型系统内部如何架构，组件架构是利器
title: zope组件架构
---
====================================
zope组件架构
====================================

zope3的出现，最具创新的是zope的组件架构体系了。

.. Contents::
.. sectnum::

对象继承的问题
================
在zope2里面，为了对象重用，对象之间的继承关系特别复杂。如果你想dir某个对象，看看接口，你肯定会崩溃。那个复杂... 当然随之而来的问题是，文档的问题，超级复杂的api介绍。

继承是重度耦合来的，对于一个具体的应用，代码全部自己控制，继承其实没有什么问题。但是对于一个框架，甚至应用服务器来说，由于需要其他的人调整系统功能，如果用继承，框架就显得特别死。

更要命的一个问题是，在zope2里面，所有对象都存放在zodb里面，如果要为某个对象增加新的功能，那么需要继承一个子类。这样，各种功能涌现，zodb里面存放了各种不同的对象。哪一天，代码一重构，说不定zodb里面老的对象就读不出来了。除非你对zodb的数据进行升级。

无敌适配
====================
zope3为了解决这些问题，想出了一个聪明的方法，那就是无敌的“适配器”模式。

简单的说，世界上最基本的对象，就是那些model对象，这些model非常“瘦”，可能瘦的只有基本的属性。好就这么瘦，刚好装到zodb里面。那怎么操作这些model呢？用适配器来扩展功能！

易度Paas应用引擎里面的api就可以说明，比如::

   ICommentManager(context).addComment(body)

就是将当前的context对象，转换(适配)为ICommentManager接口，利用这个接口，来添加一个评注。

ICommentManager是一个不包含实现的抽象接口。我们可以实现一个zodb的版本，也可以实现一个rdbms的版本，甚至机遇互联网上的某个开放评注服务api来写。具体使用哪个，是根据实际一个xml文件配置来决定 的。

类似的，我们还有IGrantmanager进行授权管理，ISubscriptionManager进行订阅管理，IDublinCore进行元数据管理，IFieldStorage进行自定义字段的数据存取....

易度的功能非常庞大，而且在不断在扩展，我们可以定义不同的适配器，不断进行扩展，而且相互不干扰，不必担心方法重名之类。

有了zope3的这个适配器，易度的api也非常清晰了。

事实上，万众归一，整个zope组件架构的核心，就是这个适配器。zope3里面，什么都是适配器。或者，我们现实世界里面，一切也都是适配器。适配器核心就是输入输出接口转换的概念，这个是普适的。用这个来解释世界万事万物，我觉得是有哲学高度的。zope3的那帮人，牛！

Utility
==================
除了适配器(adapter)类型的组件，还有一个叫做utility的组件。utility，就是我们常说的单子模式。这个就不说了。 utility也可以被理解为一种特殊的适配器：适配一个空对象。

说来说去，整个zope组件架构，就这2个东东。没了。

简单吧。

组件架构
====================
实际上zope的这个组件架构，完全是和zope没关系的，和zope没有任何依赖。我知道twisted就用了。

zope的组件架构，实际上是设计模式的再一次在底层给与支持。是一个非常pythonic化的设计模式方法论。

有了这些东西，一方面使用设计模式就非常方便；另外一份方面，读懂别人下了设计模式的代码，也会觉得比较直白一些，不会觉得似天书。

一个复杂的系统如何去架构？你有自己的架构哲学吗？看看zope组件架构吧。用区区基本的2种组件，便可构建你的摩天大楼，这就是zope组件架构的魅力所在。

易度闷着头开发了这么长时间。一些接口适配器一直只是内部自己在用。最近易度PaaS上线，一些接口随之曝光。这才发现清晰的适配器模式，对脚本开发者也是大大的方便。很容易理解，也很好实用。几个实习生，很快就知道如何去用了。

局限性
============
当然，我还是不能太偏颇，我得说说zope组件架构的不好。

其实不管怎么说，zope组件架构，还是把事情弄复杂了。这对事情本身就很复杂的时候，zope组件架构让系统清晰化，是好的。但是如果事情没那么复杂，还属于组件架构就没那么多必要了。

这样，我们在热衷于组件架构的同时，必须深入想想：世界真的这么复杂吗？我们有简化世界的方法吗？

wsgi就提供了这样的方法。wsgi将复杂的世界分隔为多个中间件，串联相接。每个都很简单。如果每个都很简单，那每个都不需要zope组件架构了。repoze社区就在做这个事情，把zope用wsgi中间件来分割，动手术。每个部分，比如认证、事务管理之类，都很简单，因此也都没有用 zope组件架构了。

当然，zope3最近也在引入repoze的管道技术来简化某些模块。

总结
=========
写了这么多，我总结几点：

1. 不要被名字吓住，zope组件架构是一个纯python的，不和zope依赖的。

2. 适合复杂的、可扩展的应用。比如limodou的那个ulipad，我觉得就可以尝试用zope组件架构来重新构建下。

3. zope组件架构，实际上是让设计模式爱好者们，有更加标准的实践方法学。

最后，播报下zope组件架构的文档地址：

http://czug.org/zope/ca

接口编程
==================
zope组件架构实现了面向接口进行编程，这个也就是j2ee所推崇的。这是一种松耦合，会让系统的架构变得非常灵活。

具体对于易度，有一些例子：

1. 我们发送短信、发送邮件的接口实现就有好多种，比如用于debug的，用于异步发送的，但是使用通知接口的时候，完全不需要关注这些细节，只需要从全局的注册表里面找一个对象来用就行了。

2. 或者几乎所有的对象都需要评注、都需要支持订阅，通过接口来完成就很方便。每个对象完全不必知晓，自己未来可能会实现那些接口。

当然，可能有其他的方法，也能实现类似的功能，但是zope组件架构定义一个更加漂亮的方法。

最后，有兴趣的人，可具体看看易度的api:

- 订阅：http://everydo.com/paas/applet/subscription.rst
- 标签组管理： http://everydo.com/paas/applet/tags.rst
- 评注服务： http://everydo.com/paas/applet/comment.rst
- 通知发送(utility): http://everydo.com/paas/applet/notification.rst
- 状态机(utility)： http://everydo.com/paas/applet/state.rst

再次理解适配器
===========================
适配器其实很好理解，我们都见过：

我们常见的电源适配器，就是将200v交流接口，转换为9v直流接口。

开发方面，其实我们也见过，比如::

   int('12')

int是一个类型转换函数，转换就是适配。int将字符串‘12’，适配为整数。int就是一个非常典型的适配器。

从某种意义上，适配器就是扩展了python的类型转换的概念：

- 接口就是 类型 的一个延伸而已，python标准大的类型太少了

- 适配器就是转换函数的一个延伸，事实上适配器就可以用函数的方法来定义的。只是所有适配器应该注册到一个注册表中，方便之后查找使用。


