---
created: 2006-05-22 01:59:25
creator: panjy
description: 考虑最近将czug的文档和代码的版本管理转型为 bzr_ , 下面说明原因.
title: 为什么选择bzr
---
<p>考虑最近将czug的文档和代码的版本管理转型为 <a class="reference" href="http://bazaar-vcs.org/FrontPage">bzr</a> , 下面说明原因.</p>
<p>目前采用的subversion, subversion的是典型的集中式版本管理系统。
也就是说它有一个中心的服务器，如果要提交、比较版本差异，必须连接到中心服务器。</p>
<p>subversion作为取代cvs的一个版本管理系统，目前已经非常流行。
Plone、zope均采用subversion来进行代码的版本管理。</p>
<p>在参与社区的协同开发过程中，我发现subversion/cvs存在如下问题，同时也说一下bzr的改进：</p>
<ol class="arabic">
<li><p class="first">服务器软件配置复杂，涉及apache等好多东东，要自己建立一个妥善的subversion版本库，绝非以易事。</p>
<p>bzr不需要单独服务器软件，直接利用现有的ftp、http服务器就可以了。</p>
</li>
<li><p class="first">为简化管理，所有无关的代码，都在一个库中，版本号一起升，分离出一个，似乎不大容易。</p>
<p>bzr由于无集中服务器，可很方便的为每个产品建立独立的存储空间，互相不关联</p>
</li>
<li><p class="first">通知邮件中，有大量的噪声提交。每次小的提交动作，都必须直接提交的服务器，这导致提交邮件列表有非常多的噪声通知邮件，比如:</p>
<ul class="simple">
<li>不小心漏提交、错误操作</li>
<li>仅仅是修改修改某个错字什么的小问题</li>
</ul>
<p>期望的邮件通知形式是阶段性的。</p>
<p>bzr可离线开发，小的提交不必直接放到集中服务器中，完成阶段性的开发，才提交上去。</p>
</li>
<li><p class="first">需要申请库的写权限，在服务器上开辟分支，才能和现有的开发库衔接起来。</p>
<p>这导致库的提交权限管理异常复杂，需要申请权限，还需要一个令人生畏的授权人员。
这样也限制了其他人员参与热情。</p>
<p>使用bzr，根本不需要申请服务器的写权限. 可最大限度的鼓励参与。</p>
</li>
<li><p class="first">代码难审核。一旦申请到权限，谁都可能根据自己的想法，直接修改神圣的版本库。bug很容易就此滋生。
开源社区也是龙鱼混杂，觉悟有不同。这么大的一个社区，完全革命靠自觉是很难保证质量的。</p>
<p>bzr可使用PQM管理提交的补丁。任何人都可发送邮件补丁代码到PQM管理器，专人审核后发布到正式的版本库中。</p>
</li>
<li><p class="first">脱离了服务器，就得不到版本管理的服务器了。虽然次数不多，但是plone的svn库也有罢工的时候。</p>
<p>还有，在你出差旅游的时候，也会没发访问服务器。</p>
<p>bzr不需要服务器，所有版本历史都在你本地保留。</p>
</li>
<li><p class="first">速度。比较版本差异、提交都要经过服务器，每次提交的时候，都是小心慢行 :-(</p>
<p>bzr是在本地操作的，没有网络代沟。</p>
</li>
<li><p class="first">svn是一个庞然大物，一个大黑箱，难以撬动。</p>
<p>bzr是python编写，很容易编写插件，很容易修改bug和改进。拿到bzr，一切都是你的了！</p>
</li>
</ol>
<p>总之，bzr是开源集市开发模式最适合的版本管理工具, 看看 <a class="reference" href="http://news.gmane.org/gmane.comp.version-control.bazaar-ng.general/">bzr的邮件列表</a> ，你就知道什么是集市开发模型了。</p>
<p>bzr目前是0.8.2版本，还处于成长期。如果说目前他最大的问题是什么，那就是网络提交的性能。当然bzr有承诺，未来版本的bzr会有30倍的提升。对于我们一般不太大的软件代码/文档，这个速度也是可以接受的。</p>
