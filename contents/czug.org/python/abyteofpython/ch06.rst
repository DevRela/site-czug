---
created: 
creator: Benky
description: ''
title: 控制流
---
<p>出处： <a href="http://www.woodpecker.org.cn:9081/doc/abyteofpython_cn/chinese/ch06.html">http://www.woodpecker.org.cn:9081/doc/abyteofpython_cn/chinese/ch06.html</a></p>

<h1>第6章 控制流</h1>

<p><strong>目录表</strong></p>
<dl>
<dt><a href="#s01">简介</a></dt>
<dt><a href="#ch06s02.html">if语句</a></dt>
<dd><a href="#ch06s02.html#using">使用if语句</a></dd>
<dd><a href="#ch06s02.html#how">它如何工作</a></dd>
<dt><a href="#ch06s03.html">while语句</a></dt>
<dd><a href="#ch06s03.html#using">使用while语句</a></dd>
<dt><a href="#ch06s04.html">for循环</a></dt>
<dd><a href="#ch06s04.html#using">使用for语句</a></dd>
<dt><a href="#ch06s05.html">break语句</a></dt>
<dd><a href="#ch06s05.html#using">使用break语句</a></dd>
<dt><a href="#ch06s06.html">continue语句</a></dt>
<dd><a href="#ch06s06.html#using">使用continue语句</a></dd>
<dt><a href="#ch06s07.html">概括</a></dt>
</dl>

<h1><a name="s01">简介</a></h1>
<p>在到目前为止我们所见到的程序中，总是有一系列的语句，Python忠实地按照它们的顺序执行它们。如果你想要改变语句流的执行顺序，该怎么办呢？例如，你想要让程序做一些决定，根据不同的情况做不同的事情，例如根据时间打印“早上好”或者“晚上好”。</p>
<p>你可能已经猜到了，这是通过控制流语句实现的。在Python中有三种控制流语句——<code>if</code>、<code>for</code>和<code>while</code>。</p>


<h1><a name="ch06s02.html">if语句</a></h1>
<p><code>if</code>语句用来检验一个条件， <dfn>如果</dfn> 条件为真，我们运行一块语句（称为 <dfn>if-块</dfn> ）， <dfn>否则</dfn> 我们处理另外一块语句（称为 <dfn>else-块</dfn> ）。 <dfn>else</dfn> 从句是可选的。</p>

<h2><a name="using">使用<a name="ch06s02.html">if语句</a></a></h2>
<p class="exampletitle"><a name="e61">例6.1 使用<a name="ch06s02.html">if语句</a></a></p>
<p class="filebox">
<code class="comment">#!/usr/bin/python<br>
# Filename: if.py
</code><br>
<br>
<code>number = </code><code class="cite">23</code><br>
<code>guess = </code><code class="func">int</code><code>(</code><code class="func">raw_input</code><code>(</code><code class="cite">'Enter an integer : '</code><code>))</code><br>
<br>
<code class="key">if </code><code>guess == number:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'Congratulations, you guessed it.' </code><code class="comment"># New block starts here</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">"(but you do not win any prizes!)" </code><code class="comment"># New block ends here</code><br>
<code class="key">elif </code><code>guess < number:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'No, it is a little higher than that' </code><code class="comment"># Another block</code><br>
<code class="comment">&nbsp;&nbsp;&nbsp;&nbsp;# You can do whatever you want in a block ...</code><br>
<code class="key">else</code><code>:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'No, it is a little lower than that' </code><br>
<code class="comment">&nbsp;&nbsp;&nbsp;&nbsp;# you must have guess > number to reach here</code><br>
<br>
<code class="key">print </code><code class="cite">'Done'</code><br>
<code class="comment"># This last statement is always executed, after the if statement is executed
</code>
</p>
<p>（源文件：<a href="code/if.py">code/if.py</a>）</p>

<h2>输出</h2>
<p class="codebox"><code>
$ python if.py<br>
Enter an integer : 50<br>
No, it is a little lower than that<br>
Done<br>
$ python if.py<br>
Enter an integer : 22<br>
No, it is a little higher than that<br>
Done<br>
$ python if.py<br>
Enter an integer : 23<br>
Congratulations, you guessed it.<br>
(but you do not win any prizes!)<br>
Done
</code>
</p>

<h2><a name="how">它如何工作</a></h2>
<p>在这个程序中，我们从用户处得到猜测的数，然后检验这个数是否是我们手中的那个。我们把变量<code>number</code>设置为我们想要的任何整数，在这个例子中是<code>23</code>。然后，我们使用<code>raw_input()</code>函数取得用户猜测的数字。函数只是重用的程序段。我们将在<a href="ch06.html">下一章</a>学习更多关于函数的知识。</p>
<p>我们为内建的<code>raw_input</code>函数提供一个字符串，这个字符串被打印在屏幕上，然后等待用户的输入。一旦我们输入一些东西，然后按<strong>回车</strong>键之后，函数返回输入。对于<code>raw_input</code>函数来说是一个字符串。我们通过<code>int</code>把这个字符串转换为整数，并把它存储在变量<code>guess</code>中。事实上，<code>int</code>是一个类，不过你想在对它所需了解的只是它把一个字符串转换为一个整数（假设这个字符串含有一个有效的整数文本信息）。</p>
<p>接下来，我们将用户的猜测与我们选择的数做比较。如果他们相等，我们打印一个成功的消息。注意我们使用了缩进层次来告诉Python每个语句分别属于哪一个块。这就是为什么缩进在Python如此重要的原因。我希望你能够坚持“每个缩进层一个制表符”的规则。你是这样的吗？</p>
<p>注意<code>if</code>语句在结尾处包含一个冒号——我们通过它告诉Python下面跟着一个语句块。</p>
<p>然后，我们检验猜测是否小于我们的数，如果是这样的，我们告诉用户它的猜测大了一点。我们在这里使用的是<code>elif</code>从句，它事实上把两个相关联的<code>if else-if else</code>语句合并为一个<code>if-elif-else</code>语句。这使得程序更加简单，并且减少了所需的缩进数量。</p>
<p><code>elif</code>和<code>else</code>从句都必须在逻辑行结尾处有一个冒号，下面跟着一个相应的语句块（当然还包括正确的缩进）。</p>
<p>你也可以在一个if块中使用另外一个<code>if</code>语句，等等——这被称为嵌套的<code>if</code>语句。</p>
<p>记住，<code>elif</code>和<code>else</code>部分是可选的。一个最简单的有效<code>if</code>语句是：</p>
<p class="filebox">
<code class="key">if </code><code class="func">True</code><code>:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'Yes, it is true'</code>
</p>
<p>在Python执行完一个完整的<code>if</code>语句以及与它相关联的<code>elif</code>和<code>else</code>从句之后，它移向<code>if</code>语句块的下一个语句。在这个例子中，这个语句块是主块。程序从主块开始执行，而下一个语句是<code>print 'Done'</code>语句。在这之后，Python看到程序的结尾，简单的结束运行。</p>
<p>尽管这是一个非常简单的程序，但是我已经在这个简单的程序中指出了许多你应该注意的地方。所有这些都是十分直接了当的（对于那些拥有C/C++背景的用户来说是尤为简单的）。它们在开始时会引起你的注意，但是以后你会对它们感到熟悉、“自然”。</p>
<p class="notebox">
<span class="boxtitle">给C/C++程序员的注释</span><br>
在Python中没有<code>switch</code>语句。你可以使用<code>if..elif..else</code>语句来完成同样的工作（在某些场合，使用<a href="ch09s04.html">字典</a>会更加快捷。）
</p>


<h1><a name="ch06s03.html">while语句</a></h1>
<p>只要在一个条件为真的情况下，<code>while</code>语句允许你重复执行一块语句。<code>while</code>语句是所谓 <dfn>循环</dfn> 语句的一个例子。<code>while</code>语句有一个可选的<code>else</code>从句。</p>

<h2><a name="using">使用<a name="ch06s03.html">while语句</a></a></h2>
<p class="exampletitle"><a name="e62">例6.2 使用<a name="ch06s03.html">while语句</a></a></p>
<p class="filebox">
<code class="comment">#!/usr/bin/python<br>
# Filename: while.py</code><br>
<br>
<code>number = </code><code class="cite">23</code><br>
<code>running = </code><code class="func">True</code><br>
<br>
<code class="key">while </code><code>running:</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;guess = </code><code class="func">int</code><code>(</code><code class="func">raw_input</code><code>(</code><code class="cite">'Enter an integer : '</code><code>))</code><br>
<br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;if </code><code>guess == number:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'Congratulations, you guessed it.' </code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running = </code><code class="func">False </code><code class="comment"># this causes the while loop to stop</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;elif </code><code>guess < number:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'No, it is a little higher than that' </code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;else</code><code>:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'No, it is a little lower than that' </code><br>
<code class="key">else</code><code>:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'The while loop is over.'
 </code><br>
<code class="comment">&nbsp;&nbsp;&nbsp;&nbsp;# Do anything else you want to do here</code><br>
<br>
<code class="key">print </code><code class="cite">'Done'</code>
</p>
<p>（源文件：<a href="code/while.py">code/while.py</a>）</p>

<h2>输出</h2>
<p class="codebox"><code>
$ python while.py<br>
Enter an integer : 50<br>
No, it is a little lower than that.<br>
Enter an integer : 22<br>
No, it is a little higher than that.<br>
Enter an integer : 23<br>
Congratulations, you guessed it.<br>
The while loop is over.<br>
Done
</code></p>

<h2>它如何工作</h2>
<p>在这个程序中，我们仍然使用了猜数游戏作为例子，但是这个例子的优势在于用户可以不断的猜数，直到他猜对为止——这样就不需要像前面那个例子那样为每次猜测重复执行一遍程序。这个例子恰当地说明了<code>while</code>语句的使用。</p>
<p>我们把<code>raw_input</code>和<code>if</code>语句移到了<code>while</code>循环内，并且在while循环开始前把<code>running</code>变量设置为<code>True</code>。首先，我们检验变量<code>running</code>是否为<code>True</code>，然后执行后面的 <dfn>while-块</dfn> 。在执行了这块程序之后，再次检验条件，在这个例子中，条件是<code>running</code>变量。如果它是真的，我们再次执行while-块，否则，我们继续执行可选的else-块，并接着执行下一个语句。</p>
<p>当<code>while</code>循环条件变为<code>False</code>的时候，<code>else</code>块才被执行——这甚至也可能是在条件第一次被检验的时候。如果<code>while</code>循环有一个<code>else</code>从句，它将始终被执行，除非你的<code>while</code>循环将永远循环下去不会结束！</p>
<p><code>True</code>和<code>False</code>被称为布尔类型。你可以分别把它们等效地理解为值<code>1</code>和<code>0</code>。在检验重要条件的时候，布尔类型十分重要，它们并不是真实的值<code>1</code>。</p>
<p>else块事实上是多余的，因为你可以把其中的语句放在同一块（与<code>while</code>相同）中，跟在<code>while</code>语句之后，这样可以取得相同的效果。</p>

<p class="notebox">
<span class="boxtitle">给C/C++程序员的注释</span><br>
记住，你可以在<code>while</code>循环中使用一个<code>else</code>从句。
</p>


<h1><a name="ch06s04.html">for循环</a></h1>
<p><code>for..in</code>是另外一个循环语句，它在一序列的对象上 <dfn>递归</dfn> 即逐一使用队列中的每个项目。我们会在后面的章节中更加详细地学习<a href="ch09s05.html">序列</a>。</p>

<h2><a name="using">使用for语句</a></h2>
<p class="exampletitle"><a name="e63">例6.3 使用for语句</a></p>
<p class="filebox">
<code class="comment">#!/usr/bin/python<br>
# Filename: for.py</code><br>
<br>
<code class="key">for </code><code>i </code><code class="key">in </code><code class="func">range</code><code>(</code><code class="func">1</code><code>, </code><code class="func">5</code><code>):</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code>i</code><br>
<code class="key">else</code><code>:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'The for loop is over'</code>
</p>

<h2>输出</h2>
<p class="codebox"><code>
$ python for.py<br>
1<br>
2<br>
3<br>
4<br>
The for loop is over
</code></p>

<h2>它如何工作</h2>
<p>在这个程序中，我们打印了一个 <dfn>序列</dfn> 的数。我们使用内建的<code>range</code>函数生成这个数的序列。</p>
<p>我们所做的只是提供两个数，<code>range</code>返回一个序列的数。这个序列从第一个数开始到第二个数为止。例如，<code>range(1,5)</code>给出序列<code>[1, 2, 3, 4]</code>。默认地，<code>range</code>的步长为1。如果我们为<code>range</code>提供第三个数，那么它将成为步长。例如，<code>range(1,5,2)</code>给出<code>[1,3]</code>。记住，range <dfn>向上</dfn> 延伸到第二个数，即它<strong>不</strong>包含第二个数。</p>
<p><code>for</code>循环在这个范围内递归——<code>for i in range(1,5)</code>等价于<code>for i in [1, 2, 3, 4]</code>，这就如同把序列中的每个数（或对象）赋值给i，一次一个，然后以每个<code>i</code>的值执行这个程序块。在这个例子中，我们只是打印i的值。</p>
<p>记住，<code>else</code>部分是可选的。如果包含else，它总是在<code>for</code>循环结束后执行一次，除非遇到<a href="ch06s05.html">break</a>语句。</p>
<p>记住，<code>for..in</code>循环对于任何序列都适用。这里我们使用的是一个由内建<code>range</code>函数生成的数的列表，但是广义说来我们可以使用任何种类的由任何对象组成的序列！我们会在后面的章节中详细探索这个观点。</p>

<p class="notebox">
<span class="boxtitle">给C/C++/Java/C#程序员的注释</span><br>
Python的<code>for</code>循环从根本上不同于C/C++的<code>for</code>循环。C#程序员会注意到Python的<code>for</code>循环与C#中的<code>foreach</code>循环十分类似。Java程序员会注意到它与Java 1.5中的<code>for (int i : IntArray)</code>相似。<br>
在C/C++中，如果你想要写<code>for (int i = 0; i < 5; i++)</code>，那么用Python，你写成<code>for i in range(0,5)</code>。你会注意到，Python的<code>for</code>循环更加简单、明白、不易出错。
</p>


<h1><a name="ch06s05.html">break语句</a></h1>
<p><code>break</code>语句是用来 <dfn>终止</dfn> 循环语句的，即哪怕循环条件没有称为<code>False</code>或序列还没有被完全递归，也停止执行循环语句。</p>
<p>一个重要的注释是，如果你从<code>for</code>或<code>while</code>循环中 <dfn>终止</dfn> ，任何对应的循环<code>else</code>块将<strong>不</strong>执行。</p>

<h2><a name="using">使用<a name="ch06s05.html">break语句</a></a></h2>
<p class="exampletitle"><a name="e64">例6.4 使用<a name="ch06s05.html">break语句</a></a></p>
<p class="filebox">
<code class="comment">#!/usr/bin/python<br>
# Filename: break.py</code><br>
<br>
<code class="key">while </code><code class="func">True</code><code>:</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;s = </code><code class="func">raw_input</code><code>(</code><code class="cite">'Enter something : '</code><code>)</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;if </code><code>s == </code><code class="cite">'quit'</code><code>:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'Length of the string is'</code><code>, </code><code class="func">len</code><code>(s)</code><br>
<code class="key">print </code><code class="cite">'Done'</code>
</p>
<p>（源文件：<a href="code/break.py">code/break.py</a>）</p>

<h2>输出</h2>
<p class="codebox"><code>
$ python break.py<br>
Enter something : Programming is fun<br>
Length of the string is 18<br>
Enter something : When the work is done<br>
Length of the string is 21<br>
Enter something : if you wanna make your work also fun:<br>
Length of the string is 37<br>
Enter something :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use Python!<br>
Length of the string is 12<br>
Enter something : quit<br>
Done
</code></p>

<h2>它如何工作</h2>
<p>在这个程序中，我们反复地取得用户地输入，然后打印每次输入地长度。我们提供了一个特别的条件来停止程序，即检验用户的输入是否是<code>'quit'</code>。通过 <dfn>终止</dfn> 循环到达程序结尾来停止程序。</p>
<p>输入字符串的长度通过内建的<code>len</code>函数取得。</p>
<p>记住，<code>break</code>语句也可以在<code>for</code>循环中使用。</p>

<h2>G2的Python诗</h2>
<p>我在这里输入的是我所写的一段小诗，称为<strong>G2的Python诗</strong>：</p>
<p class="codebox"><code>
Programming is fun<br>
When the work is done<br>
if you wanna make your work also fun:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use Python!
</code></p>


<h1><a name="ch06s06.html">continue语句</a></h1>
<p><code>continue</code>语句被用来告诉Python跳过当前循环块中的剩余语句，然后 <dfn>继续</dfn> 进行下一轮循环。</p>
<h2><a name="using">使用<a name="ch06s06.html">continue语句</a></a></h2>
<p class="exampletitle"><a name="e65">例6.5 使用<a name="ch06s06.html">continue语句</a></a></p>
<p class="filebox">
<code class="comment">#!/usr/bin/python<br>
# Filename: continue.py</code><br>
<br>
<code class="key">while </code><code class="func">True</code><code>:</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;s = </code><code class="func">raw_input</code><code>(</code><code class="cite">'Enter something : '</code><code>)</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;if </code><code>s == </code><code class="cite">'quit'</code><code>:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;if </code><code class="func">len</code><code>(s) &lt; </code><code class="cite">3</code><code>:</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue</code><br>
<code class="key">&nbsp;&nbsp;&nbsp;&nbsp;print </code><code class="cite">'Input is of sufficient length'</code><br>
<code class="comment">&nbsp;&nbsp;&nbsp;&nbsp;# Do other kinds of processing here...</code>
</p>
<p>（源文件：<a href="code/continue.py">code/continue.py</a>）</p>

<h2>输出</h2>
<p class="codebox"><code>
$ python continue.py<br>
Enter something : a<br>
Enter something : 12<br>
Enter something : abc<br>
Input is of sufficient length<br>
Enter something : quit
</code></p>

<h2>它如何工作</h2>
<p>在这个程序中，我们从用户处取得输入，但是我们仅仅当它们有至少3个字符长的时候才处理它们。所以，我们使用内建的<code>len</code>函数来取得长度。如果长度小于3，我们将使用<code>continue</code>语句忽略块中的剩余的语句。否则，这个循环中的剩余语句将被执行，我们可以在这里做我们希望的任何处理。</p>
<p>注意，<code>continue</code>语句对于<code>for</code>循环也有效。</p>


<h1><a name="ch06s07.html">概括</a></h1>
<p>我们已经学习了如何使用三种控制流语句——<code>if</code>、<code>while</code>和<code>for</code>以及与它们相关的<code>break</code>和<code>continue</code>语句。它们是Python中最常用的部分，熟悉这些控制流是应当掌握的基本技能。</p>
<p>接下来，我们将学习如何创建和使用函数。</p>

