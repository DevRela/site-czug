<div lang="en" id="content" dir="ltr"><span id="top" class="anchor"/>
<span id="line-1" class="anchor"/><p class="line867"/><div class="table-of-contents"><p class="table-of-contents-heading">目录</p><ol><li><a href="#head-078de0c4c629685df13f91ade743baa471462247">在事件驱动环境中工作</a><ol><li><a href="#head-2ba9fc110fde7cfeb2efb0d8a33408a9b20fe773">要理解事件，我们需要知道哪些术语？</a></li><li><a href="#head-997731f89c2e6e8ac813bc3366f0f6bbd3951cf4">什么是事件驱动编程?</a><ol><li><a href="#head-9a2fe4c35a7b1f35224cd2b4ce77bfd5a06eefe3">编写事件处理器</a></li><li><a href="#head-fc3d09123b2425cf47df1478aefba879339edc39">设计事件驱动程序</a></li><li><a href="#head-86fb2ec6110c8aa4388e08046e106261ebea0009">事件触发</a></li></ol></li><li><a href="#head-2fb118752de502b97b26a7ba9fabf6b65585836d">如何将事件绑定到处理器?</a><ol><li><a
href="#head-a77a7a94031a80b122b50b68510839567f2845bc">使用wx.EvtHandler的方法工作</a></li></ol></li><li><a href="#head-f26296f61c0be2d29a898b962b74c506a4bc22ce">wxPython是如何处理事件的?</a><ol><li><a href="#head-597d9ef3e7f9e8d5030574f0637f800b9ce95ea4">理解事件处理过程</a></li><li><a href="#head-d34c3722bc0c5d807d43ff9729eef2a1a56db511">使用Skip()方法</a></li></ol></li><li><a href="#head-4d84eaa2c4bc84d5730652c890582d76eddae139">在应用程序对象中还包含哪些其它的属性？</a></li><li><a href="#head-fc92511d8672e37c967ac67fa1e4a9df4a6014bc">如何创建自己的事件？</a><ol><li><a href="#head-cc66fb7269df6909ea842c971d023ddd94fdbd74">为一个定制的窗口部件定义一个定制的事件</a></li></ol></li><li><a href="#head-e0d5baa7d0aad03d94711466b87eea31f1aa9bf9">总结</a></li></ol></li></ol></div>
<span id="line-2" class="anchor"/><span id="line-3" class="anchor"/><p class="line867">
</p><h1 id="head-078de0c4c629685df13f91ade743baa471462247">1. 在事件驱动环境中工作</h1>
<span id="line-4" class="anchor"/><span id="line-5" class="anchor"/><p class="line862">事件处理是<tt>wxPython</tt>程序工作的基本机制。主要执行事件处理的工作称为事件驱动。在这章中我们将讨论什么是事件驱动应用程序，它与传统的应用程序有什么不同。我们将对在<tt>GUI</tt>编程中所使用的概念和术语提供一些介绍，包括与用户交互，工具包和编程逻辑。也将包括典型事件驱动程序的生命周期。 <span id="line-6" class="anchor"/><span id="line-7" class="anchor"/></p><p
class="line862">事件就是发生在你的系统中的事，你的应用程序通过触发相应的功能以响应它。事件可以是低级的用户动作，如鼠标移动或按键按下，也可以是高级的用户动作（定义在<tt>wxPython</tt>的窗口部件中的），如单击按钮或菜单选择。事件可以产生自系统，如关机。你甚至可以创建你自己的对象去产生你自己的事件。<tt>wxPython</tt>应用程序通过将特定类型的事件和特定的一块代码相关联来工作，该代码在响应事件时执行。事件被映射到代码的过程称为事件处理。 <span id="line-8" class="anchor"/><span id="line-9" class="anchor"/></p><p class="line862">本章将说明事件是什么，你如何写响应一个事件的代码，以及<tt>wxPython</tt>在事件发生的时候是如何知道去调用你的代码的。我们也将说明如何将定制的事件增加到<tt>wxPython</tt>库中，该库包含了关于用户和系统行为的标准事件的一个列表。 <span id="line-10"
class="anchor"/><span id="line-11" class="anchor"/><span id="line-12" class="anchor"/></p><p class="line867">
</p><h2 id="head-2ba9fc110fde7cfeb2efb0d8a33408a9b20fe773">1.1. 要理解事件，我们需要知道哪些术语？</h2>
<span id="line-13" class="anchor"/><span id="line-14" class="anchor"/><span id="line-15" class="anchor"/><p class="line862">本章包含了大量的术语，很多都是以<tt>event</tt>开头的。下表3.1是我们将要用到的术语的一个快速参考： <span id="line-16" class="anchor"/><span id="line-17" class="anchor"/></p><p class="line862">事件(<tt>event)</tt>：在你的应用程序期间发生的事情，它要求有一个响应。 <span id="line-18" class="anchor"/><span id="line-19" class="anchor"/></p><p class="line862">事件对象(<tt>event</tt> <tt>object)</tt>：在<tt>wxPython</tt>中，它具体代表一个事件，其中包括了事件的数据等属性。它是类<tt>wx.Event</tt>或其子类的实例，子类如<tt>wx.CommandEvent</tt>和<tt>wx.MouseEvent</tt>。 <span id="line-20" class="anchor"/><span id="line-21" class="anchor"/></p><p
class="line862">事件类型(<tt>event</tt> <tt>type)</tt>：<tt>wxPython</tt>分配给每个事件对象的一个整数<tt>ID</tt>。事件类型给出了关于该事件本身更多的信息。例如，<tt>wx.MouseEvent</tt>的事件类型标识了该事件是一个鼠标单击还是一个鼠标移动。 <span id="line-22" class="anchor"/><span id="line-23" class="anchor"/></p><p class="line862">事件源(<tt>event</tt> <tt>source)</tt>：任何<tt>wxPython</tt>对象都能产生事件。例如按钮、菜单、列表框和任何别的窗口部件。 <span id="line-24" class="anchor"/><span id="line-25" class="anchor"/></p><p class="line862">事件驱动(<tt>event</tt>-<tt>driven)</tt>：一个程序结构，它的大部分时间花在等待或响应事件上。 <span id="line-26" class="anchor"/><span id="line-27" class="anchor"/></p><p class="line862">事件队列(<tt>event</tt>
<tt>queue)</tt>：已发生的但未处理的事件的一个列表。 <span id="line-28" class="anchor"/><span id="line-29" class="anchor"/></p><p class="line862">事件处理器(<tt>event</tt> <tt>handler)</tt>：响应事件时所调用的函数或方法。也称作处理器函数或处理器方法。 <span id="line-30" class="anchor"/><span id="line-31" class="anchor"/></p><p class="line862">事件绑定器(<tt>event</tt> <tt>binder)</tt>：一个封装了特定窗口部件，特定事件类型和一个事件处理器的<tt>wxPython</tt>对象。为了被调用，所有事件处理器必须用一个事件绑定器注册。 <span id="line-32" class="anchor"/><span id="line-33" class="anchor"/></p><p
class="line867"><tt>wx.EvtHandler</tt>：一个<tt>wxPython</tt>类，它允许它的实例在一个特定类型，一个事件源，和一个事件处理器之间创建绑定。注意，这个类与先前定义的事件处理函数或方法不是同一个东西。 <span id="line-34" class="anchor"/><span id="line-35" class="anchor"/><span id="line-36" class="anchor"/></p><p class="line867">
</p><h2 id="head-997731f89c2e6e8ac813bc3366f0f6bbd3951cf4">1.2. 什么是事件驱动编程?</h2>
<span id="line-37" class="anchor"/><span id="line-38" class="anchor"/><span id="line-39" class="anchor"/><p class="line862">事件驱动程序主要是一个控制结构，它接受事件并响应它们。<tt>wxPython</tt>程序（或任何事件驱动程序）的结构与平常的<tt>Python</tt>脚本不同。标准的<tt>Python</tt>脚本有一个特定的开始点和结束点，程序员使用条件、循环、和函数来控制执行顺序。 <span id="line-40" class="anchor"/><span id="line-41" class="anchor"/></p><p class="line862">从用户的角度上来看，<tt>wxPython</tt>程序大部分时间什么也不做，一直闲着直到用户或系统做了些什么来触发这个<tt>wxPython</tt>程序动作。<tt>wxPython</tt>程序的结构就是一个事件驱动程序体系的例子。图3.1是事件处理循环的示意，它展示了主程序的生命、用户事件、和分派到的处理器函数。 <span id="line-42" class="anchor"/><span id="line-43"
class="anchor"/></p><p class="line867"><img title="attachment:w3.1.gif" src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.1.gif" class="attachment"/> <span id="line-44" class="anchor"/><span id="line-45" class="anchor"/><span id="line-46" class="anchor"/></p><p class="line874">事件驱动系统的主循环类似于客户服务呼叫中心的操作者。当没有呼叫的进入的时候，这个操作者处于等待状态。当一个事件发生的时候，如电话铃响了，这个操作者开始一个响应过程，他与客户交谈直到他获得足够的信息以分派该客户给一个合适的回答者。然后操作者等待下一个事件。 <span id="line-47" class="anchor"/><span id="line-48" class="anchor"/></p><p class="line874">尽管每个事件驱动系统之间有一些不同，但它们有很多相似的地方。下面列出了事件驱动程序结构的主要特点： <span id="line-49"
class="anchor"/><span id="line-50" class="anchor"/></p><p class="line862">1、在初始化设置之后，程序的大部分时间花在了一个空闭的循环之中。进入这个循环就标志着程序与用户交互的部分的开始，退出这个循环就标志结束。在<tt>wxPython</tt>中，这个循环的方法是：<tt>wx.App.MainLoop()</tt>，并且在你的脚本中显式地被调用。当所有的顶级窗口关闭时，主循环退出。 <span id="line-51" class="anchor"/><span id="line-52" class="anchor"/></p><p class="line862">2、程序包含了对应于发生在程序环境中的事情的事件。事件通常由用户的行为触发，但是也可以由系统的行为或程序中其他任意的代码。在<tt>wxPython</tt>中，所有的事件都是类<tt>wx.Event</tt>或其子类的一个实例。每个事件都有一个事件类型属性，它使得不同的事件能够被辨别。例如，鼠标释放和鼠示按下事件都被认为是同一个类的实例，但有不同的事件类型。 <span
id="line-53" class="anchor"/><span id="line-54" class="anchor"/></p><p class="line862">3、作为这个空闭的循环部分，程序定期检查是否有任何请求响应事情发生。有两种机制使得事件驱动系统可以得到有关事件的通知。最常被<tt>wxPython</tt>使用的方法是，把事件传送到一个中心队列，由该队列触发相应事件的处理。另一种方法是使用轮询的方法，所有可能引发事件的事件主被主过程定期查询并询问是否有没有处理的事件。 <span id="line-55" class="anchor"/><span id="line-56" class="anchor"/></p><p class="line862">4、当事件发生时，基于事件的系统试着确定相关代码来处理该事件，如果有，相关代码被执行。在<tt>wxPython</tt>中，原系统事件被转换为<tt>wx.Event</tt>实例，然后使用<tt>wx.EvtHandler.ProcessEvent()</tt>方法将事件分派给适当的处理器代码。图3.3呈现了这个过程： <span id="line-57" class="anchor"/><span
id="line-58" class="anchor"/></p><p class="line867"><img title="attachment:w3.3.gif" src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.3.gif" class="attachment"/> <span id="line-59" class="anchor"/><span id="line-60" class="anchor"/></p><p class="line862">事件机制的组成部分是事件绑定器对象和事件处理器。事件绑定器是一个预定义的<tt>wxPython</tt>对象。每个事件都有各自的事件绑定器。事件处理器是一个函数或方法，它要求一个<tt>wxPython</tt>事件实例作为参数。当用户触发了适当的事件时，一个事件处理器被调用。 <span id="line-61" class="anchor"/><span id="line-62" class="anchor"/></p><p class="line862">下面我们将讨论有关<tt>wxPython</tt>更多的细节，我们把事件响应的基本单元“事件处理器”作为开始。 <span id="line-63" class="anchor"/><span id="line-64"
class="anchor"/><span id="line-65" class="anchor"/></p><p class="line867">
</p><h3 id="head-9a2fe4c35a7b1f35224cd2b4ce77bfd5a06eefe3">1.2.1. 编写事件处理器</h3>
<span id="line-66" class="anchor"/><span id="line-67" class="anchor"/><span id="line-68" class="anchor"/><p class="line862">在你的<tt>wxPython</tt>代码中，事件和事件处理器是基于相关的窗口部件的。例如，一个按钮被单击被分派给一个基于该按钮的专用的事件处理器。为了要把一个来自特定窗口部件的事件绑定到一个特定的处理器方法，你要使用一个绑定器对象来管理这个连接。例如： <span id="line-69" class="anchor"/><span id="line-70" class="anchor"/></p><p class="line867"><span id="line-71" class="anchor"/><span id="line-72" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
function isnumbered(obj) {
return obj.childNodes.length && obj.firstChild.childNodes.length && obj.firstChild.firstChild.className == 'LineNumber';
}
function nformat(num,chrs,add) {
var nlen = Math.max(0,chrs-(''+num).length), res = '';
while (nlen>0) { res += ' '; nlen-- }
return res+num+add;
}
function addnumber(did, nstart, nstep) {
var c = document.getElementById(did), l = c.firstChild, n = 1;
if (!isnumbered(c))
if (typeof nstart == 'undefined') nstart = 1;
if (typeof nstep  == 'undefined') nstep = 1;
n = nstart;
while (l != null) {
if (l.tagName == 'SPAN') {
var s = document.createElement('SPAN');
s.className = 'LineNumber'
s.appendChild(document.createTextNode(nformat(n,4,' ')));
n += nstep;
if (l.childNodes.length)
l.insertBefore(s, l.firstChild)
else
l.appendChild(s)
}
l = l.nextSibling;
}
return false;
}
function remnumber(did) {
var c = document.getElementById(did), l = c.firstChild;
if (isnumbered(c))
while (l != null) {
if (l.tagName == 'SPAN' && l.firstChild.className == 'LineNumber') l.removeChild(l.firstChild);
l = l.nextSibling;
}
return false;
}
function togglenumber(did, nstart, nstep) {
var c = document.getElementById(did);
if (isnumbered(c)) {
remnumber(did);
} else {
addnumber(did,nstart,nstep);
}
return false;
}
</script>

<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-c345636fbc20ceadab0abe989918101b2804e84c_000\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-c345636fbc20ceadab0abe989918101b2804e84c_000', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-c345636fbc20ceadab0abe989918101b2804e84c_000" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="ID">self</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_BUTTON</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnClick</span><span class="Operator">,</span> <span class="ID">aButton</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-73" class="anchor"/><p class="line862">上例使用了预定义的事件绑定器对象<tt>wx.EVT_BUTTON</tt>来将<tt>aButton</tt>对象上的按钮单击事件与方法<tt>self.OnClick</tt>相关联起来。这个<tt>Bind()</tt>方法是<tt>wx.EvtHandler</tt>的一个方法，<tt>wx.EvtHandler</tt>是所有可显示对象的父类。因此上例代码行可以被放置在任何显示类。 <span id="line-74" class="anchor"/><span id="line-75" class="anchor"/></p><p
class="line862">即使你的<tt>wxPython</tt>程序表面上看起来在被动地等待事件，但它仍在做事。它在运行方法<tt>wx.App.MainLoop()</tt>，该方法是一个无限的循环。<tt>MainLoop()</tt>方法可以使用<tt>Python</tt>伪代码表示如下： <span id="line-76" class="anchor"/><span id="line-77" class="anchor"/><span id="line-78" class="anchor"/><span id="line-79" class="anchor"/><span id="line-80" class="anchor"/><span id="line-81" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-d572ee99513401603107292b6d3d29d27d659030_001\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-d572ee99513401603107292b6d3d29d27d659030_001', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-d572ee99513401603107292b6d3d29d27d659030_001" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="ResWord">while</span> <span class="ID">True</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   2 </span>    <span class="ResWord">while</span> <span class="ResWord">not</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">Pending</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">ProcessIdle</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ID">self</span><span class="Operator">.</span><span class="ID">DoMessage</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-82" class="anchor"/><p class="line874">上面的伪代码意思是如果没有未处理的消息，则做一些空闲时做的事；如果有消息进入，那么将这个消息分派给适当的事件处理方法。 <span id="line-83" class="anchor"/><span id="line-84" class="anchor"/><span id="line-85" class="anchor"/></p><p class="line867">
</p><h3 id="head-fc3d09123b2425cf47df1478aefba879339edc39">1.2.2. 设计事件驱动程序</h3>
<span id="line-86" class="anchor"/><span id="line-87" class="anchor"/><span id="line-88" class="anchor"/><p class="line862">对于事件驱动程序的设计，由于没有假设事件何时发生，所以程序员将大量的控制交给了用户。你的<tt>wxPython</tt>程序中的大多数代码通过用户或系统的行为被直接或间接地执行。例如在用户选择了一个菜单项、或按下一个工具栏按钮、或按下了特定的按键组合后，你的程序中有关保存工作的代码被执行了。 <span id="line-89" class="anchor"/><span id="line-90" class="anchor"/></p><p
class="line862">另一方面，事件驱动体系通常是分散性的。响应一个窗口部件事件的代码通常不是定义在该部件的定义中的。例如，响应一个按钮单击事件的代码不必是该按钮定义的一部分，而可以存在在该按钮所附的框架中或其它地方。当与面向对象设计结合时，这个体系导致了松散和高度可重用的代码。你将会发现<tt>Python</tt>的灵活使得重用不同的<tt>wxPython</tt>应用程序的通常的事件处理器和结构变得非常容易。 <span id="line-91" class="anchor"/><span id="line-92" class="anchor"/><span id="line-93" class="anchor"/></p><p class="line867">
</p><h3 id="head-86fb2ec6110c8aa4388e08046e106261ebea0009">1.2.3. 事件触发</h3>
<span id="line-94" class="anchor"/><span id="line-95" class="anchor"/><span id="line-96" class="anchor"/><p
class="line862">在<tt>wxPython</tt>中，大部分窗口部件在响应低级事件时都导致高级事件发生。例如，在一个<tt>wx.Button</tt>上的鼠标单击导致一个<tt>EVT_BUTTON</tt>事件的生成，该事件是<tt>wx.CommandEvent</tt>的特定类型。类似的，在一个窗口的角中拖动鼠标将导致<tt>wxPython</tt>为你自动创建一个<tt>wx.SizeEvent</tt>事件。高级事件的用处是让你的系统的其它部分更容易聚焦于最有关联的事件上，而不是陷于追踪每个鼠标单击。高级事件能够封装更多关于事件的有用的信息。当你创建你自已的定制的窗口部件时，你能定义你自己的定制事件以便管理事件的处理。 <span id="line-97" class="anchor"/><span id="line-98"
class="anchor"/></p><p class="line862">在<tt>wxPython</tt>中，代表事件的是事件对象。事件对象是类<tt>wx.Event</tt>或其子类的一个实例。父类<tt>wx.Event</tt>相对小且抽象，它只是包含了对所有事件的一些通常的信息。<tt>wx.Event</tt>的各个子类都添加了更多的信息。 <span id="line-99" class="anchor"/><span id="line-100" class="anchor"/></p><p class="line862">在<tt>wxPython</tt>中，有一些<tt>wx.Event</tt>的子类。表3.2包含了你将最常遇到的一些事件类。记住，一个事件类可以有多个事件类型，每个都对应于一个不同的用户行为。下表3.2是<tt>wx.Event</tt>的重要的子类。 <span id="line-101"
class="anchor"/><span id="line-102" class="anchor"/></p><p class="line867"><tt>wx.CloseEvent</tt>：当一个框架关闭时触发。这个事件的类型分为一个通常的框架关闭和一个系统关闭事件。 <span id="line-103" class="anchor"/><tt>wx.CommandEvent</tt>：与窗口部件的简单的各种交互都将触发这个事件，如按钮单击、菜单项选择、单选按钮选择。这些交互有它各自的事件类型。许多更复杂的窗口部件，如列表等则定义<tt>wx.CommandEvent</tt>的子类。事件处理系统对待命令事件与其它事件不同。 <span id="line-104" class="anchor"/><tt>wx.KeyEvent</tt>：按按键事件。这个事件的类型分按下按键、释放按键、整个按键动作。 <span
id="line-105" class="anchor"/><tt>wx.MouseEvent</tt>：鼠标事件。这个事件的类型分鼠标移动和鼠标敲击。对于哪个鼠标按钮被敲击和是单击还是双击都有各自的事件类型。 <span id="line-106" class="anchor"/><tt>wx.PaintEvent</tt>：当窗口的内容需要被重画时触发。 <span id="line-107" class="anchor"/><tt>wx.SizeEvent</tt>：当窗口的大小或其布局改变时触发。 <span id="line-108" class="anchor"/><tt>wx.TimerEvent</tt>：可以由类<tt>wx.Timer</tt>类创建，它是定期的事件。 <span id="line-109" class="anchor"/><span id="line-110" class="anchor"/></p><p
class="line874">通常，事件对象需要使用事件绑定器和事件处理系统将它们传递给相关的事件处理器。 <span id="line-111" class="anchor"/><span id="line-112" class="anchor"/><span id="line-113" class="anchor"/></p><p class="line867">
</p><h2 id="head-2fb118752de502b97b26a7ba9fabf6b65585836d">1.3. 如何将事件绑定到处理器?</h2>
<span id="line-114" class="anchor"/><span id="line-115" class="anchor"/><span id="line-116" class="anchor"/><p class="line862">事件绑定器由类<tt>wx.PyEventBinder</tt>的实例组成。一个预定义的<tt>wx.PyEventBinder</tt>的实例被提供给所有支持的事件类型，并且在你需要的时候你可以为你定制的事件创建你自己的事件绑定器。每个事件类型都有一个事件绑定器，这意味着一个<tt>wx.Event</tt>的子类对应多个绑定器。 <span id="line-117" class="anchor"/><span id="line-118" class="anchor"/></p><p
class="line862">在<tt>wxPython</tt>中，事件绑定器实例的名字是全局性的。为了清楚地将事件类型与处理器联系起来，它们的名字都是以<tt>wx.EVT_</tt>开头并且对应于使用在C++ <tt>wxWidgets</tt>代码中宏的名字。值得强调的是，<tt>wx.EVT</tt>绑定器名字的值不是你通过调用一个<tt>wx.Event</tt>实例的<tt>GetEventType()</tt>方法得到的事件类型的实际的整数码。事件类型整数码有一套完全不同的全局名，并且在实际中不常被使用。 <span id="line-119" class="anchor"/><span id="line-120" class="anchor"/></p><p
class="line862">作为<tt>wx.EVT</tt>名字的例子，让我们看看<tt>wx.MouseEvent</tt>的事件类型。正如我们所提到的，它们有十四个，其中的九个涉及到了基于在按钮上的敲击，如鼠标按下、鼠标释放、或双击事件。这九个事件类型使用了下面的名字： <span id="line-121" class="anchor"/><span id="line-122" class="anchor"/></p><pre>wx.EVT_LEFT_DOWN
<span id="line-123" class="anchor"/>wx.EVT_LEFT_UP
<span id="line-124" class="anchor"/>wx.EVT_LEFT_DCLICK
<span id="line-125" class="anchor"/>wx.EVT_MIDDLE_DOWN
<span id="line-126" class="anchor"/>wx.EVT_MIDDLE_UP
<span id="line-127" class="anchor"/>wx.EVT_MIDDLE_DCLICK
<span id="line-128" class="anchor"/>wx.EVT_RIGHT_DOWN
<span id="line-129" class="anchor"/>wx.EVT_RIGHT_UP
<span id="line-130" class="anchor"/>wx.EVT_RIGHT_DCLICK
<span id="line-131" class="anchor"/></pre><span id="line-132" class="anchor"/><p class="line862">另外，类型<tt>wx.EVT_MOTION</tt>产生于用户移动鼠标。类型<tt>wx.ENTER_WINDOW</tt>和<tt>wx.LEAVE_WINDOW</tt>产生于当鼠标进入或离开一个窗口部件时。类型<tt>wx.EVT_MOUSEWHEEL</tt>被绑定到鼠标滚轮的活动。最后，你可以使用类型<tt>wx.EVT_MOUSE_EVENTS</tt>一次绑定所有的鼠标事件到一个函数。 <span id="line-133" class="anchor"/><span id="line-134" class="anchor"/></p><p
class="line862">同样，类<tt>wx.CommandEvent</tt>有28个不同的事件类型与之关联；尽管有几个仅针对老的<tt>Windows</tt>操作系统。它们中的大多数是专门针对单一窗口部件的，如<tt>wx.EVT_BUTTON</tt>用于按钮敲击，<tt>wx.EVT_MENU</tt>用于菜单项选择。用于专门窗口部件的命令事件在<tt>part2</tt>中讨论。 <span id="line-135" class="anchor"/><span id="line-136" class="anchor"/></p><p class="line862">绑定机制的好处是它使得<tt>wxPython</tt>可以很细化地分派事件，而仍然允许同类的类似事件发生并且共享数据和功能。这使得在<tt>wxPython</tt>中写事件处理比在其它界面工具包中清细得多。 <span id="line-137"
class="anchor"/><span id="line-138" class="anchor"/></p><p
class="line862">事件绑定器被用于将一个<tt>wxPython</tt>窗口部件与一个事件对象和一个处理器函数连接起来。这个连接使得<tt>wxPython</tt>系统能够通过执行处理器函数中的代码来响应相应窗口部件上的事件。在<tt>wxPython</tt>中，任何能够响应事件的对象都是<tt>wx.EvtHandler</tt>的子类。所有窗口对象都是<tt>wx.EvtHandler</tt>的子类，因些在<tt>wxPython</tt>应用程序中的每个窗口部件都能够响应事件。类<tt>wx.EvtHandler</tt>也能够被非窗口部件对象所使用，如<tt>wx.App</tt>，因此事件处理功能不是限于可显示的窗口部件。我们所说的窗口部件能响应事件的意思是：该窗口部件能够创建事件绑定，在分派期间<tt>wxPython</tt>能够识别该事件绑定。由绑定器调用的在事件处理器函数中的实际代码不是必须位于一个<tt>wx.EvtHandler</tt>类中。
<span id="line-139" class="anchor"/><span id="line-140" class="anchor"/><span id="line-141" class="anchor"/></p><p class="line867">
</p><h3 id="head-a77a7a94031a80b122b50b68510839567f2845bc">1.3.1. 使用wx.EvtHandler的方法工作</h3>
<span id="line-142" class="anchor"/><span id="line-143" class="anchor"/><span id="line-144" class="anchor"/><p class="line867"><tt>wx.EvtHandler</tt>类定义的一些方法在一般情况下用不到。你会经常使用的<tt>wx.EvtHandler</tt>的方法是<tt>Bind()</tt>，它创建事件绑定。该方法的用法如下： <span id="line-145" class="anchor"/><span id="line-146" class="anchor"/></p><p class="line867"><span id="line-147" class="anchor"/><span id="line-148" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-ffca6becea63f1a171e6c2c6d9425958ee2f08cc_002\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-ffca6becea63f1a171e6c2c6d9425958ee2f08cc_002', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-ffca6becea63f1a171e6c2c6d9425958ee2f08cc_002" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">event</span><span class="Operator">,</span> <span class="ID">handler</span><span class="Operator">,</span> <span class="ID">source</span><span class="Operator">=</span><span class="ID">None</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">=</span><span class="ID">wx</span><span class="Operator">.</span><span
class="ID">ID_ANY</span><span class="Operator">,</span> <span class="ID">id2</span><span class="Operator">=</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">ID_ANY</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-149" class="anchor"/><span id="line-150" class="anchor"/><p
class="line867"><tt>Bind()</tt>函数将一个事件和一个对象与一个事件处理器函数关联起来。参数<tt>event</tt>是必选的，它是我们在3.3节中所说的<tt>wx.PyEventBinder</tt>的一个实例。参数<tt>handler</tt>也是必选的，它是一个可调用的<tt>Python</tt>对象，通常是一个被绑定的方法或函数。处理器必须是可使用一个参数（事件对象本身）来调用的。参数<tt>handler</tt>可以是<tt>None</tt>，这种情况下，事件没有关联的处理器。参数<tt>source</tt>是产生该事件的源窗口部件，这个参数在触发事件的窗口部件与用作事件处理器的窗口部件不相同时使用。通常情况下这个参数使用默认值<tt>None</tt>，这是因为你一般使用一个定制的<tt>wx.Frame</tt>类作为处理器，并且绑定来自于包含在该框架内的窗口部件的事件。父窗口的<tt>__init__</tt>是一个用于声明事件绑定的方便的位置。但是如果父窗口包含了多个按钮敲击事件源（比如<tt>OK</tt>按钮和<tt>Cancel</tt>按钮），那么就要指定<tt>source</tt>参数以便<tt>wxPython</tt>区分它们。下面是该方法的一个例子：
<span id="line-151" class="anchor"/><span id="line-152" class="anchor"/></p><p class="line867"><span id="line-153" class="anchor"/><span id="line-154" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9e4991da6967abbd6af86f9f96920d342715b5fe_003\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-9e4991da6967abbd6af86f9f96920d342715b5fe_003', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-9e4991da6967abbd6af86f9f96920d342715b5fe_003" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="ID">self</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_BUTTON</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnClick</span><span class="Operator">,</span> <span class="ID">button</span><span
class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-155" class="anchor"/><p class="line862">下例3.1演示了使用参数<tt>source</tt>和不使用参数<tt>source</tt>的方法，它改编自第二章中的代码： <span id="line-156" class="anchor"/><span id="line-157" class="anchor"/><span id="line-158" class="anchor"/><span id="line-159" class="anchor"/><span id="line-160" class="anchor"/><span id="line-161" class="anchor"/><span id="line-162" class="anchor"/><span id="line-163" class="anchor"/><span id="line-164" class="anchor"/><span id="line-165" class="anchor"/><span id="line-166"
class="anchor"/><span id="line-167" class="anchor"/><span id="line-168" class="anchor"/><span id="line-169" class="anchor"/><span id="line-170" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-41fd15dd18568dcad066da7fabd1ce0b66c6c80f_004\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-41fd15dd18568dcad066da7fabd1ce0b66c6c80f_004', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-41fd15dd18568dcad066da7fabd1ce0b66c6c80f_004" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   2 </span>    <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Frame</span><span class="Operator">.</span><span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">,</span> <span class="String">'Frame With Button'</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">   3 </span>            <span class="ID">size</span><span class="Operator">=</span><span class="Operator">(</span><span class="Number">300</span><span class="Operator">,</span> <span class="Number">100</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ID">panel</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Panel</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="Operator">-</span><span class="Number">1</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   5 </span>    <span class="ID">button</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Button</span><span class="Operator">(</span><span class="ID">panel</span><span class="Operator">,</span> <span class="Operator">-</span><span class="Number">1</span><span class="Operator">,</span> <span class="String">"Close"</span><span class="Operator">,</span> <span class="ID">pos</span><span class="Operator">=</span><span
class="Operator">(</span><span class="Number">130</span><span class="Operator">,</span> <span class="Number">15</span><span class="Operator">)</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">   6 </span>            <span class="ID">size</span><span class="Operator">=</span><span class="Operator">(</span><span class="Number">40</span><span class="Operator">,</span> <span class="Number">40</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   7 </span>    <span class="ID">self</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_CLOSE</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnCloseWindow</span><span class="Operator">)</span> <span class="Comment">#1 绑定框架关闭事件   </span></span>
<span class="line"><span class="LineNumber">   8 </span>    <span class="ID">self</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_BUTTON</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnCloseMe</span><span class="Operator">,</span> <span class="ID">button</span><span class="Operator">)</span> <span class="Comment">#2 绑定按钮事件  </span></span>
<span class="line"><span class="LineNumber">   9 </span></span>
<span class="line"><span class="LineNumber">  10 </span>    <span class="ResWord">def</span> <span class="ID">OnCloseMe</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  11 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">Close</span><span class="Operator">(</span><span class="ID">True</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  12 </span>    <span class="ResWord">def</span> <span class="ID">OnCloseWindow</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  13 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">Destroy</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-171" class="anchor"/><span id="line-172" class="anchor"/><p class="line867"><strong>说明：</strong> <span id="line-173" class="anchor"/><span id="line-174" class="anchor"/><span id="line-175" class="anchor"/></p><p class="line867"><strong>#1</strong> 这行绑定框架关闭事件到<tt>self.OnCloseWindow</tt>方法。由于这个事件通过该框架触发且用于帧，所以不需要传递一个<tt>source</tt>参数。 <span id="line-176" class="anchor"/><span id="line-177" class="anchor"/></p><p class="line867"><strong>#2</strong>
这行将来自按钮对象的按钮敲击事件绑定到<tt>self.OnCloseMe</tt>方法。这样做是为了让<tt>wxPython</tt>能够区分在这个框架中该按钮和其它按钮所产生的事件。 <span id="line-178" class="anchor"/><span id="line-179" class="anchor"/></p><p class="line862">你也可以使用<tt>source</tt>参数来标识项目，即使该项目不是事件的源。例如，你可以绑定一个菜单事件到事件处理器，即使这个菜单事件严格地说是由框架所触发的。下例3.2演示了绑定一个菜单事件的例子： <span id="line-180" class="anchor"/><span id="line-181" class="anchor"/></p><p class="line867"><span
id="line-182" class="anchor"/><span id="line-183" class="anchor"/><span id="line-184" class="anchor"/><span id="line-185" class="anchor"/><span id="line-186" class="anchor"/><span id="line-187" class="anchor"/><span id="line-188" class="anchor"/><span id="line-189" class="anchor"/><span id="line-190" class="anchor"/><span id="line-191" class="anchor"/><span id="line-192" class="anchor"/><span id="line-193" class="anchor"/><span id="line-194" class="anchor"/><span id="line-195" class="anchor"/><span id="line-196" class="anchor"/><span
id="line-197" class="anchor"/><span id="line-198" class="anchor"/><span id="line-199" class="anchor"/><span id="line-200" class="anchor"/><span id="line-201" class="anchor"/><span id="line-202" class="anchor"/><span id="line-203" class="anchor"/><span id="line-204" class="anchor"/><span id="line-205" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-a5659854417274c8b13e00c78e881eea4533a019_005\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-a5659854417274c8b13e00c78e881eea4533a019_005', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-a5659854417274c8b13e00c78e881eea4533a019_005" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="Comment">#!/usr/bin/env python </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Comment"/></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">import</span> <span class="ID">wx</span></span>
<span class="line"><span class="LineNumber">   4 </span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="ResWord">class</span> <span class="ID">MenuEventFrame</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">Frame</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>    <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   7 </span>        <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Frame</span><span class="Operator">.</span><span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">,</span> <span class="String">'Menus'</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">   8 </span>             <span class="ID">size</span><span class="Operator">=</span><span class="Operator">(</span><span class="Number">300</span><span class="Operator">,</span> <span class="Number">200</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   9 </span>        <span class="ID">menuBar</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">MenuBar</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  10 </span>        <span class="ID">menu1</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Menu</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  11 </span>        <span class="ID">menuItem</span> <span class="Operator">=</span> <span class="ID">menu1</span><span class="Operator">.</span><span class="ID">Append</span><span class="Operator">(</span><span class="Operator">-</span><span class="Number">1</span><span class="Operator">,</span> <span class="String">" "</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  12 </span>        <span class="ID">menuBar</span><span class="Operator">.</span><span class="ID">Append</span><span class="Operator">(</span><span class="ID">menu1</span><span class="Operator">,</span> <span class="String">" "</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  13 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">SetMenuBar</span><span class="Operator">(</span><span class="ID">menuBar</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  14 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_MENU</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnCloseMe</span><span class="Operator">,</span> <span class="ID">menuItem</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  15 </span></span>
<span class="line"><span class="LineNumber">  16 </span>    <span class="ResWord">def</span> <span class="ID">OnCloseMe</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  17 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">Close</span><span class="Operator">(</span><span class="ID">True</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  18 </span></span>
<span class="line"><span class="LineNumber">  19 </span><span class="ResWord">if</span> <span class="ID">__name__</span> <span class="Operator">==</span> <span class="String">'__main__'</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  20 </span>    <span class="ID">app</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">PySimpleApp</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  21 </span>    <span class="ID">frame</span> <span class="Operator">=</span> <span class="ID">MenuEventFrame</span><span class="Operator">(</span><span class="ID">parent</span><span class="Operator">=</span><span class="ID">None</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">=</span><span class="Operator">-</span><span class="Number">1</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  22 </span>    <span class="ID">frame</span><span class="Operator">.</span><span class="ID">Show</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  23 </span>    <span class="ID">app</span><span class="Operator">.</span><span class="ID">MainLoop</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-206" class="anchor"/><span id="line-207" class="anchor"/><p
class="line867"><tt>Bind()</tt>方法中的参数<tt>id</tt>和<tt>id2</tt>使用<tt>ID</tt>号指定了事件的源。一般情况下这没必要，因为事件源的<tt>ID</tt>号可以从参数<tt>source</tt>中提取。但是某些时候直接使用<tt>ID</tt>是合理的。例如，如果你在使用一个对话框的<tt>ID</tt>号，这比使用窗口部件更容易。如果你同时使用了参数<tt>id</tt>和<tt>id2</tt>，你就能够以窗口部件的<tt>ID</tt>号形式将这两个<tt>ID</tt>号之间范围的窗口部件绑定到事件。这仅适用于窗口部件的<tt>ID</tt>号是连续的。 <span id="line-208" class="anchor"/><span id="line-209"
class="anchor"/></p><p class="line862">注意：<tt>Bind()</tt>方法出现在<tt>wx.Python2.5</tt>中，以前版本的事件绑定中，<tt>EVT_</tt>*的用法如同函数对象，因此你会看到如下的绑定调用： <span id="line-210" class="anchor"/><span id="line-211" class="anchor"/><span id="line-212" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-52fa6c2c5b0e3edfd5cf133f67a3e58853fadf8a_006\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-52fa6c2c5b0e3edfd5cf133f67a3e58853fadf8a_006', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-52fa6c2c5b0e3edfd5cf133f67a3e58853fadf8a_006" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_BUTTON</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span><span class="Operator">.</span><span class="ID">GetId</span><span class="Operator">(</span><span
class="Operator">)</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnClick</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-213" class="anchor"/><p class="line862">这个方式的缺点是它不像是面向对象的方法调用。然而，这个老的样式仍可工作在2.5的版本中（因为<tt>wx.EVT</tt>*对象仍是可调用的）。 <span id="line-214" class="anchor"/><span id="line-215" class="anchor"/><span id="line-216" class="anchor"/></p><p class="line867"><strong>下表3.3列出了最常使用的<tt>wx.EvtHandler</tt>的方法</strong>： <span id="line-217" class="anchor"/><span id="line-218" class="anchor"/></p><p
class="line867"><tt>AddPendingEvent(event)</tt>：将这个<tt>event</tt>参数放入事件处理系统中。类似于<tt>ProcessEvent()</tt>，但它实际上不会立即触发事件的处理。相反，该事件被增加到事件队列中。适用于线程间的基于事件的通信。 <span id="line-219" class="anchor"/><span id="line-220" class="anchor"/><span id="line-221" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-c3cfb321e2be6a019417c366b8f59a4def1f6b95_007\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-c3cfb321e2be6a019417c366b8f59a4def1f6b95_007', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-c3cfb321e2be6a019417c366b8f59a4def1f6b95_007" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">event</span><span class="Operator">,</span> <span class="ID">handler</span><span class="Operator">,</span> <span class="ID">source</span><span class="Operator">=</span><span class="ID">None</span><span class="Operator">,</span>   <span class="ID">id</span><span
class="Operator">=</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">ID_ANY</span><span class="Operator">,</span> <span class="ID">id2</span><span class="Operator">=</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">ID_ANY</span><span class="Operator">)</span><span class="Error">：</span><span class="Text"/></span>
</pre></div><span id="line-222" class="anchor"/><p class="line874">完整的说明见3.3.1节。 <span id="line-223" class="anchor"/><span id="line-224" class="anchor"/></p><p class="line867"><tt>GetEvtHandlerEnabled()</tt>  <span id="line-225" class="anchor"/><tt>SetEvtHandlerEnabled(</tt> <tt>boolean)</tt>：如果处理器当前正在处理事件，则属性为<tt>True</tt>，否则为<tt>False</tt>。 <span id="line-226" class="anchor"/><span id="line-227" class="anchor"/></p><p
class="line867"><tt>ProcessEvent(event)</tt>：把<tt>event</tt>对象放入事件处理系统中以便立即处理。 <span id="line-228" class="anchor"/><span id="line-229" class="anchor"/><span id="line-230" class="anchor"/></p><p class="line867">
</p><h2 id="head-f26296f61c0be2d29a898b962b74c506a4bc22ce">1.4. wxPython是如何处理事件的?</h2>
<span id="line-231" class="anchor"/><span id="line-232" class="anchor"/><span id="line-233" class="anchor"/><p class="line862">基于事件系统的关键组成部分是事件处理。通过它，一个事件被分派到了相应的用于相应该事件的一块代码。在这一节，我们将讨论<tt>wxPython</tt>处理事件的过程。我们将使用小段的代码来跟踪这个处理的步骤。图3.2显示了一个带有一个按钮的简单窗口，这个按钮将被用来产生一个简单的事件。 <span id="line-234" class="anchor"/><span id="line-235" class="anchor"/></p><p class="line867"><img
title="attachment:w3.2.gif" src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.2.gif" class="attachment"/> <span id="line-236" class="anchor"/><span id="line-237" class="anchor"/><span id="line-238" class="anchor"/></p><p class="line862">下例3.3包含了生成这个窗口的代码。在这个代码中，通过敲击按钮和将鼠标移动到按钮上都可产生<tt>wxPython</tt>事件。 <span id="line-239" class="anchor"/><span id="line-240" class="anchor"/></p><p
class="line874">例3.3绑定多个鼠标事件 <span id="line-241" class="anchor"/><span id="line-242" class="anchor"/><span id="line-243" class="anchor"/><span id="line-244" class="anchor"/><span id="line-245" class="anchor"/><span id="line-246" class="anchor"/><span id="line-247" class="anchor"/><span id="line-248" class="anchor"/><span id="line-249" class="anchor"/><span id="line-250" class="anchor"/><span id="line-251" class="anchor"/><span id="line-252" class="anchor"/><span id="line-253"
class="anchor"/><span id="line-254" class="anchor"/><span id="line-255" class="anchor"/><span id="line-256" class="anchor"/><span id="line-257" class="anchor"/><span id="line-258" class="anchor"/><span id="line-259" class="anchor"/><span id="line-260" class="anchor"/><span id="line-261" class="anchor"/><span id="line-262" class="anchor"/><span id="line-263" class="anchor"/><span id="line-264" class="anchor"/><span id="line-265" class="anchor"/><span id="line-266" class="anchor"/><span
id="line-267" class="anchor"/><span id="line-268" class="anchor"/><span id="line-269" class="anchor"/><span id="line-270" class="anchor"/><span id="line-271" class="anchor"/><span id="line-272" class="anchor"/><span id="line-273" class="anchor"/><span id="line-274" class="anchor"/><span id="line-275" class="anchor"/><span id="line-276" class="anchor"/><span id="line-277" class="anchor"/><span id="line-278" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9ad91c55f051b611ce6626ac7f80cf830e912c9c_008\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-9ad91c55f051b611ce6626ac7f80cf830e912c9c_008', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-9ad91c55f051b611ce6626ac7f80cf830e912c9c_008" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="Comment">#!/usr/bin/env python </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Comment"/></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">import</span> <span class="ID">wx</span></span>
<span class="line"><span class="LineNumber">   4 </span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="ResWord">class</span> <span class="ID">MouseEventFrame</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">Frame</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span></span>
<span class="line"><span class="LineNumber">   7 </span>    <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   8 </span>        <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Frame</span><span class="Operator">.</span><span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">,</span> <span class="String">'Frame With Button'</span><span
class="Operator">,</span></span>
<span class="line"><span class="LineNumber">   9 </span>                <span class="ID">size</span><span class="Operator">=</span><span class="Operator">(</span><span class="Number">300</span><span class="Operator">,</span> <span class="Number">100</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  10 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">panel</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Panel</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  11 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Button</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">.</span><span class="ID">panel</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  12 </span>            <span class="ID">label</span><span class="Operator">=</span><span class="String">"Not Over"</span><span class="Operator">,</span> <span class="ID">pos</span><span class="Operator">=</span><span class="Operator">(</span><span class="Number">100</span><span class="Operator">,</span> <span class="Number">15</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  13 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_BUTTON</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnButtonClick</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  14 </span>            <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span><span class="Operator">)</span>    <span class="Comment">#1 绑定按钮事件                 </span></span>
<span class="line"><span class="LineNumber">  15 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_ENTER_WINDOW</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  16 </span>            <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnEnterWindow</span><span class="Operator">)</span>     <span class="Comment">#2 绑定鼠标位于其上事件          </span></span>
<span class="line"><span class="LineNumber">  17 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_LEAVE_WINDOW</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  18 </span>            <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnLeaveWindow</span><span class="Operator">)</span>     <span class="Comment">#3 绑定鼠标离开事件</span></span>
<span class="line"><span class="LineNumber">  19 </span></span>
<span class="line"><span class="LineNumber">  20 </span>    <span class="ResWord">def</span> <span class="ID">OnButtonClick</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  21 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">panel</span><span class="Operator">.</span><span class="ID">SetBackgroundColour</span><span class="Operator">(</span><span class="String">'Green'</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  22 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">panel</span><span class="Operator">.</span><span class="ID">Refresh</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  23 </span></span>
<span class="line"><span class="LineNumber">  24 </span>    <span class="ResWord">def</span> <span class="ID">OnEnterWindow</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  25 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span><span class="Operator">.</span><span class="ID">SetLabel</span><span class="Operator">(</span><span class="String">"Over Me!"</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  26 </span>        <span class="ID">event</span><span class="Operator">.</span><span class="ID">Skip</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  27 </span></span>
<span class="line"><span class="LineNumber">  28 </span>    <span class="ResWord">def</span> <span class="ID">OnLeaveWindow</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  29 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span><span class="Operator">.</span><span class="ID">SetLabel</span><span class="Operator">(</span><span class="String">"Not Over"</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  30 </span>        <span class="ID">event</span><span class="Operator">.</span><span class="ID">Skip</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  31 </span></span>
<span class="line"><span class="LineNumber">  32 </span><span class="ResWord">if</span> <span class="ID">__name__</span> <span class="Operator">==</span> <span class="String">'__main__'</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  33 </span>    <span class="ID">app</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">PySimpleApp</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  34 </span>    <span class="ID">frame</span> <span class="Operator">=</span> <span class="ID">MouseEventFrame</span><span class="Operator">(</span><span class="ID">parent</span><span class="Operator">=</span><span class="ID">None</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">=</span><span class="Operator">-</span><span class="Number">1</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  35 </span>    <span class="ID">frame</span><span class="Operator">.</span><span class="ID">Show</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  36 </span>    <span class="ID">app</span><span class="Operator">.</span><span class="ID">MainLoop</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-279" class="anchor"/><span id="line-280" class="anchor"/><p class="line867"><strong>说明</strong>： <span id="line-281" class="anchor"/><span id="line-282" class="anchor"/></p><p class="line867"><tt>MouseEventFrame</tt>包含了一个位于中间的按钮。在其上敲击鼠标将导致框架的背景色改变为绿色。#1绑定了鼠标敲击事件。当鼠标指针位于这个按钮上时，按钮上的标签将改变，这用#2绑定。当鼠标离开这个按钮时，标签变回原样，这用#3绑定。 <span id="line-283"
class="anchor"/><span id="line-284" class="anchor"/></p><p class="line862">通过观察上面的鼠标事件例子，我们引出了在<tt>wxPython</tt>中的事件处理的一些问题。#1中，按钮事件由附着在框架上的按钮触发，那么<tt>wxPython</tt>怎么知道在框架对象中查找绑定而不是在按钮对象上呢？在#2和#3中，鼠标的进入和离开事件被绑定到了按钮，为什么这两个事件不能被绑到框架上呢。这些问题将通过检查<tt>wxPython</tt>用来决定如何响应事件的过程来得到回答。 <span id="line-285" class="anchor"/><span
id="line-286" class="anchor"/><span id="line-287" class="anchor"/></p><p class="line867">
</p><h3 id="head-597d9ef3e7f9e8d5030574f0637f800b9ce95ea4">1.4.1. 理解事件处理过程</h3>
<span id="line-288" class="anchor"/><span id="line-289" class="anchor"/><span id="line-290" class="anchor"/><p class="line867"><tt>wxPython</tt>的事件处理过程被设计来简化程序员关于事件绑定的创建，使他们不必考虑哪些不重要的事件。 <span id="line-291" class="anchor"/>隐藏在简化设计之下的底层机制是有些复杂的。接下来，我们将跟踪关于按钮敲击和鼠标进入事件的过程。 <span id="line-292" class="anchor"/><span id="line-293" class="anchor"/></p><p
class="line862">图3.3显示了事件处理过程的一个基本的流程。矩形代表过程的开始和结束，环形代表各种<tt>wxPython</tt>对象（它们是这个过程的一部分），棱形代表判断点，带条的矩形代表实际的事件处理方法。 <span id="line-294" class="anchor"/><span id="line-295" class="anchor"/></p><p class="line867"><img title="attachment:w3.3.gif" src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.3.gif" class="attachment"/> <span id="line-296" class="anchor"/><span
id="line-297" class="anchor"/></p><p class="line862">事件处理过程开始于触发事件的对象。通常，<tt>wxPython</tt>首先在触发对象中查找匹配事件类型的被绑定的处理器函数。如果找到，则相应的方法被执行。否则，<tt>wxPython</tt>将检查该事件是否传送到了上一级的容器。如果是的话，父窗口部件将被检查，这样一级一级向上寻找，直到<tt>wxPython</tt>找到了一个处理器函数或到达了顶级窗口。如果事件没有传播，在处理过程完成之前，<tt>wxPython</tt>仍将为了处理器函数而检查应用程序对象。 <span
id="line-298" class="anchor"/><span id="line-299" class="anchor"/></p><p class="line862">当事件处理器运行时，过程通常就结束了。然而，函数可以告诉<tt>wxPython</tt>去继续查找处理器。 <span id="line-300" class="anchor"/>下面让我们仔细观察一下这个过程的每一个步骤。我们的每步分析都有图3.3的一个相关略图。 <span id="line-301" class="anchor"/><span id="line-302" class="anchor"/><span id="line-303" class="anchor"/></p><p class="line867"><strong>第一步，创建事件</strong> <span
id="line-304" class="anchor"/><span id="line-305" class="anchor"/></p><p class="line867"><img title="attachment:w3.4.gif" src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.4.gif" class="attachment"/> <span id="line-306" class="anchor"/><span id="line-307" class="anchor"/></p><p class="line874">这个过程开始于事件被创建时。 <span id="line-308"
class="anchor"/>在<tt>wxPython</tt>架构中已经创建了大多数的事件类型，它们用于响应特定的用户动作或系统通知。例如，当<tt>wxPython</tt>通知“鼠标移进了一个新窗口部件对象时”，鼠标进入事件被触发，鼠标敲击事件在鼠标按下或释放后被创建。 <span id="line-309" class="anchor"/><span id="line-310" class="anchor"/></p><p class="line874">事件首先被交给创建事件的对象。对于按钮敲击，这个对象是按钮；对于鼠标进入事件，这个对象是所进入的窗口部件。 <span id="line-311" class="anchor"/><span
id="line-312" class="anchor"/><span id="line-313" class="anchor"/></p><p class="line867"><strong>第二步，确定事件对象是否被允许处理事件</strong>。 <span id="line-314" class="anchor"/><span id="line-315" class="anchor"/></p><p class="line874">事件处理过程检查的下一步是看相关窗口部件当前是否被允许去处理事件。 <span id="line-316"
class="anchor"/>通过调用<tt>wx.EvtHandler</tt>的<tt>SetEvtHandlerEnabled(boolean)</tt>方法，一个窗口可以被设置为允许或不允许事件处理。不允许事件处理的结果是该窗口部件在事件处理中被完全绕过，与该对象关联的绑定对象也不会被搜索，并且在这步中的处理没有向下的分支。 <span id="line-317" class="anchor"/><span id="line-318" class="anchor"/></p><p
class="line862">在事件处理器级使一个窗口部件有效或无效与在用户界面级(<tt>UI)</tt>不一样。在<tt>UI</tt>级使一个窗口部件无效或有效，使用<tt>wx.Window</tt>的方法<tt>Disable()</tt>和<tt>Enable()</tt>。在<tt>UI</tt>级使一个窗口部件无效意味用户不能与这个无效的窗口部件交互。通常无效的窗口部件在屏幕上以灰化的状态表示。一个在<tt>UI</tt>级无效的窗口不能产生任何事件；但是，如果它对于别的事件是容器的级别，它仍然能够处理它接受到的事件。本节的剩余内容，我们将在<tt>wx.EvtHandler</tt>层面上使用有效和无效，这涉及到窗口部件是否被允许处理事件。
<span id="line-319" class="anchor"/><span id="line-320" class="anchor"/></p><p
class="line862">对于初始对象有效或无效状态的检查，这发生在<tt>ProcessEvent()</tt>方法中，该方法由<tt>wxPython</tt>系统调用以开始和处理事件分配机制。我们将在事件处理过程中一再看到<tt>ProcessEvent()</tt>方法，它是类<tt>wx.EvtHandler</tt>中的方法，它实际上执行图3.3所描绘的大量事件处理。如果<tt>ProcessEvent()</tt>方法最后完成了事件处理，则<tt>ProcessEvent()</tt>返回<tt>True</tt>。如果一个处理器被发现和组合事件被处理，则认为处理完成。处理器函数可以通过调用<tt>wx.Event</tt>的<tt>Skip()</tt>方法来显式地请求进一步的处理。另处，如果初始对象是<tt>wx.Window</tt>的一个子类，那么它能够使用一个称为<tt>validator</tt>的对象来过滤事件。<tt>Validator</tt>将在第九章中详细讨论。
<span id="line-321" class="anchor"/><span id="line-322" class="anchor"/></p><p class="line867"><img title="attachment:w3.5.gif" src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.5.gif" class="attachment"/> <span id="line-323" class="anchor"/><span id="line-324" class="anchor"/><span id="line-325" class="anchor"/><span id="line-326" class="anchor"/></p><p class="line867"><strong>第三步</strong>  <span id="line-327"
class="anchor"/><strong>定位绑定器对象</strong> <span id="line-328" class="anchor"/><span id="line-329" class="anchor"/></p><p class="line874">如图3.6所示 <span id="line-330" class="anchor"/><span id="line-331" class="anchor"/></p><p class="line867"><img title="attachment:w3.6.gif" src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.6.gif" class="attachment"/> <span id="line-332" class="anchor"/><span id="line-333" class="anchor"/></p><p
class="line862">然后<tt>ProcessEvent()</tt>方法寻找一个绑定器对象，该绑定器对象确定当前对象和事件类型之间的绑定。 <span id="line-334" class="anchor"/><span id="line-335" class="anchor"/></p><p class="line862">如果对象自身的绑定器没有被找到，那么向上到该对象的超类中去寻找。如果一个绑定器对象被发现，<tt>wxPython</tt>调用相关的处理器函数。在处理器被调用后，该事件的事件处理停止，除非处理器函数显式地要求作更多的处理。 <span id="line-336" class="anchor"/><span id="line-337"
class="anchor"/></p><p class="line862">在例子3.3中，因为在按钮对象，绑定器对象<tt>wx.EVT_ENTER_WINDOW</tt>，和相关的方法<tt>OnEnterWindow()</tt>之间定义了绑定，所以鼠标进入事件被捕获，<tt>OnEnterWindow()</tt>方法被调用。由于我们没有绑定鼠标敲击事件 <span id="line-338" class="anchor"/><tt>wx.EVT_LEFT_DOWN</tt>，在这种情况下，<tt>wxPython</tt>将继续搜索。 <span id="line-339" class="anchor"/><span id="line-340" class="anchor"/><span id="line-341" class="anchor"/></p><p
class="line867"><strong>第四步</strong>  <span id="line-342" class="anchor"/><strong>决定是否继续处理</strong> <span id="line-343" class="anchor"/><span id="line-344" class="anchor"/></p><p class="line874">如图3.7所示 <span id="line-345" class="anchor"/><span id="line-346" class="anchor"/></p><p class="line867"><img title="attachment:w3.7.gif" src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.7.gif" class="attachment"/> <span id="line-347"
class="anchor"/><span id="line-348" class="anchor"/><span id="line-349" class="anchor"/></p><p
class="line862">在调用了第一个事件处理器之后，<tt>wxPython</tt>查看是否有进一步的处理要求。事件处理器通过调用<tt>wx.Event</tt>的方法<tt>Skip()</tt>要求更多的处理。如果<tt>Skip()</tt>方法被调用，那么处理将继续，并且任何定义在超类中的处理器在这一步中被发现并执行。<tt>Skip()</tt>方法在处理中的任一点或处理器所调用的任何代码中都可以被调用。<tt>Skip()</tt>方法在事件实例中设置一个标记，在事件处理器方法完成后，<tt>wxPython</tt>检查这个标记。在例3.3中，<tt>OnButtonClick()</tt>不调用<tt>Skip()</tt>，因此在那种情况下，处理器方法结束后，事件处理完成。在另两个事件处理器中调用了<tt>Skip()</tt>，所以系统将保持搜索“匹配事件绑定”，最后对于原窗口部件的鼠标进入和离开事件调用默认的功能，如鼠标位于其上的事件。
<span id="line-350" class="anchor"/><span id="line-351" class="anchor"/><span id="line-352" class="anchor"/></p><p class="line867"><strong>第五步</strong>  <span id="line-353" class="anchor"/><strong>决定是否展开</strong> <span id="line-354" class="anchor"/>如图3.8所示 <span id="line-355" class="anchor"/><span id="line-356" class="anchor"/></p><p class="line867"><img title="attachment:w3.8.gif"
src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.8.gif" class="attachment"/> <span id="line-357" class="anchor"/><span id="line-358" class="anchor"/></p><p class="line862">最后，<tt>wxPython</tt>决定是否将事件处理向上展开到容器级以发现一个事件处理器。所谓的容器级是从一个特定的窗口部件到顶层框架的路径，这个路径是从窗口部件到它的父容器，一直向上沿升。 <span id="line-359" class="anchor"/><span id="line-360" class="anchor"/></p><p
class="line862">如果当前对象没有关于该事件的一个处理器，或如果处理器调用了<tt>Skip()</tt>，<tt>wxPython</tt>将决定是否这个事件将沿容器级向上展开。如果决定不，那么在<tt>wx.App</tt>实例中再找寻一次处理器，然后停止。如果决定是，则事件处沿该窗口的容器级向上搜索，直到发现适当的绑定，或到达顶层框架对象，或到达一个<tt>wx.Dialog</tt>对象（即使这个对话框不是顶级的）。如果<tt>ProcessEvent()</tt>返回<tt>True</tt>，事件则被认为发现了一个适当的绑定，这表示处理完成。到达一个<tt>wx.Dialog</tt>停止的目的是防止父框架被来自对话框的无关的或未预期的假事件干扰。
<span id="line-361" class="anchor"/><span id="line-362" class="anchor"/></p><p class="line862">一个事件是否向上展开至容器级，这是每个事件实例的一个动态属性，尽管实际上默认值几乎总是使用那几个。默认情况，只有<tt>wx.CommandEvent</tt>及其子类的实例向上展开至容器级。其它的所有事件不这样做。 <span id="line-363" class="anchor"/><span id="line-364" class="anchor"/></p><p
class="line862">在例3.3中，按钮敲击事件得到处理。在<tt>wx.Button</tt>上敲击鼠标产生一个命令类型的事件<tt>wx.EVT_BUTTON</tt>。由于<tt>wx.EVT_BUTTON</tt>属于一个<tt>wx.CommandEvent</tt>，所以<tt>wxPython</tt>在这个按钮对象中?已鞍蠖ㄊО芎螅蛏险箍寥萜骷叮仁前磁サ母复翱趝{{panel}}}。由于<tt>panel</tt>中没有相匹配的绑定，所以又向上至<tt>panel</tt>的父窗口<tt>frame</tt>。由于<tt>frame</tt>中有匹配的绑定，所以<tt>ProcessEvent()</tt>调用相关函数 <tt>OnButtonClick()</tt>。 <span
id="line-365" class="anchor"/><span id="line-366" class="anchor"/></p><p class="line862">第五步同时也说明了为什么鼠标进入和离开事件必须被绑定到按钮而不是框架。由于鼠标事件不是<tt>wx.CommandEvent</tt>的子类，所以鼠标进入和离开事件不向上展开至容器级。如果鼠标进入和离开事件被绑定到了框架，那么当鼠标进入或离开框架时，<tt>wxPython</tt>触发鼠标进入或离开事件。 <span id="line-367" class="anchor"/><span id="line-368" class="anchor"/></p><p
class="line874">在这种方式中，命令事件是被优先对待的。因为它们被认为是高级事件，表示用户正在应用程序空间中做一些事，而非窗口系统。窗口系统类型事件只对窗口部件感兴趣，而应用级事件对容器级。这个规则不防碍我们在任何地方声明绑定，不管被绑定的是什么对象或什么对象定义事件处理器。例如，即使这个绑定的鼠标敲击事件针对于按钮对象，而绑定则被定义在这个框架类中，且调用这个框架内的方法。换句话说，低级的非命令事件通常用于窗口部件或一些系统级的通知，如鼠标敲击、按键按下、绘画请求、调整大小或移动。另一方面，命令事件，如在按钮上敲击鼠标、或列表框上的选择，通常由窗口部件自己生成。例如，在适当的窗口部件上按下和释放鼠标后，按钮命令事件产生。
<span id="line-369" class="anchor"/><span id="line-370" class="anchor"/></p><p class="line862">最后，如果遍历了容器级后，事件没有被处理，那么应用程序的<tt>wx.App</tt>对象调用<tt>ProcessEvent()</tt>。默认情况下，这什么也不做，但是你可以给你的<tt>wx.App</tt>增加事件绑定，以便以非标准的方式来传递事件。例如，假如你在写一个<tt>GUI</tt>构建器，你可能想把你构建器窗口中的事件传到你的代码窗口中，即使它们都是顶级窗口。方法之一是捕获应用程序对象中的事件，并把它们传递到代码窗口上。 <span
id="line-371" class="anchor"/><span id="line-372" class="anchor"/><span id="line-373" class="anchor"/></p><p class="line867">
</p><h3 id="head-d34c3722bc0c5d807d43ff9729eef2a1a56db511">1.4.2. 使用Skip()方法</h3>
<span id="line-374" class="anchor"/><span id="line-375" class="anchor"/><span id="line-376" class="anchor"/><p
class="line862">事件的第一个处理器函数被发现并执行完后，该事件处理将终止，除非在处理器返回之前调用了该事件的<tt>Skip()</tt>方法。调用<tt>Skip()</tt>方法允许另外被绑定的处理器被搜索，搜索依据3.4.1节中的第四步中声明的规则，因此父类和父窗口被搜索，就如同这第一个处理器不存在一样。在某些情况下，你想继续处理事件，以便原窗口部件的默认行为和你定制的处理能被执行。例3.4显示了一个使用<tt>Skip()</tt>的例子，它使得程序能够同时响应同一按钮上的鼠标左按键按下和按钮敲击。 <span id="line-377"
class="anchor"/><span id="line-378" class="anchor"/></p><p class="line874">例3.4 同时响应鼠标按下和按钮敲击 <span id="line-379" class="anchor"/><span id="line-380" class="anchor"/><span id="line-381" class="anchor"/><span id="line-382" class="anchor"/><span id="line-383" class="anchor"/><span id="line-384" class="anchor"/><span id="line-385" class="anchor"/><span id="line-386" class="anchor"/><span id="line-387" class="anchor"/><span id="line-388" class="anchor"/><span
id="line-389" class="anchor"/><span id="line-390" class="anchor"/><span id="line-391" class="anchor"/><span id="line-392" class="anchor"/><span id="line-393" class="anchor"/><span id="line-394" class="anchor"/><span id="line-395" class="anchor"/><span id="line-396" class="anchor"/><span id="line-397" class="anchor"/><span id="line-398" class="anchor"/><span id="line-399" class="anchor"/><span id="line-400" class="anchor"/><span id="line-401" class="anchor"/><span
id="line-402" class="anchor"/><span id="line-403" class="anchor"/><span id="line-404" class="anchor"/><span id="line-405" class="anchor"/><span id="line-406" class="anchor"/><span id="line-407" class="anchor"/><span id="line-408" class="anchor"/><span id="line-409" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-2a4ecc95a9c7c2b886d8508ab96406b8b56acb76_009\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-2a4ecc95a9c7c2b886d8508ab96406b8b56acb76_009', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-2a4ecc95a9c7c2b886d8508ab96406b8b56acb76_009" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="Comment">#!/usr/bin/env python </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Comment"/></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">import</span> <span class="ID">wx</span></span>
<span class="line"><span class="LineNumber">   4 </span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="ResWord">class</span> <span class="ID">DoubleEventFrame</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">Frame</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span></span>
<span class="line"><span class="LineNumber">   7 </span>    <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   8 </span>        <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Frame</span><span class="Operator">.</span><span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">,</span> <span class="String">'Frame With
Button'</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">   9 </span>                <span class="ID">size</span><span class="Operator">=</span><span class="Operator">(</span><span class="Number">300</span><span class="Operator">,</span> <span class="Number">100</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  10 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">panel</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Panel</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="Operator">-</span><span class="Number">1</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  11 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Button</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">.</span><span class="ID">panel</span><span class="Operator">,</span> <span class="Operator">-</span><span
class="Number">1</span><span class="Operator">,</span> <span class="String">"Click Me"</span><span class="Operator">,</span> <span class="ID">pos</span><span class="Operator">=</span><span class="Operator">(</span><span class="Number">100</span><span class="Operator">,</span> <span class="Number">15</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  12 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_BUTTON</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnButtonClick</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  13 </span>            <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span><span class="Operator">)</span>    <span class="Comment">#1 绑定按钮敲击事件                           </span></span>
<span class="line"><span class="LineNumber">  14 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_LEFT_DOWN</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span
class="ID">OnMouseDown</span><span class="Operator">)</span>   <span class="Comment">#2 绑定鼠标左键按下事件</span></span>
<span class="line"><span class="LineNumber">  15 </span></span>
<span class="line"><span class="LineNumber">  16 </span>    <span class="ResWord">def</span> <span class="ID">OnButtonClick</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  17 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">panel</span><span class="Operator">.</span><span class="ID">SetBackgroundColour</span><span class="Operator">(</span><span class="String">'Green'</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  18 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">panel</span><span class="Operator">.</span><span class="ID">Refresh</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  19 </span></span>
<span class="line"><span class="LineNumber">  20 </span>    <span class="ResWord">def</span> <span class="ID">OnMouseDown</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  21 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">button</span><span class="Operator">.</span><span class="ID">SetLabel</span><span class="Operator">(</span><span class="String">"Again!"</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  22 </span>        <span class="ID">event</span><span class="Operator">.</span><span class="ID">Skip</span><span class="Operator">(</span><span class="Operator">)</span>   <span class="Comment">#3 确保继续处理     </span></span>
<span class="line"><span class="LineNumber">  23 </span></span>
<span class="line"><span class="LineNumber">  24 </span></span>
<span class="line"><span class="LineNumber">  25 </span><span class="ResWord">if</span> <span class="ID">__name__</span> <span class="Operator">==</span> <span class="String">'__main__'</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  26 </span>    <span class="ID">app</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">PySimpleApp</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  27 </span>    <span class="ID">frame</span> <span class="Operator">=</span> <span class="ID">DoubleEventFrame</span><span class="Operator">(</span><span class="ID">parent</span><span class="Operator">=</span><span class="ID">None</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">=</span><span class="Operator">-</span><span class="Number">1</span><span
class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  28 </span>    <span class="ID">frame</span><span class="Operator">.</span><span class="ID">Show</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  29 </span>    <span class="ID">app</span><span class="Operator">.</span><span class="ID">MainLoop</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-410" class="anchor"/><span id="line-411" class="anchor"/><p class="line867"><strong>#1</strong> 这行绑定按钮敲击事件到<tt>OnButtonClick()</tt>处理器，这个处理器改变框架的背景色。 <span id="line-412" class="anchor"/><span id="line-413" class="anchor"/></p><p class="line867"><strong>#2</strong>
这行绑定鼠标左键按下事件到<tt>OnMouseDown()</tt>处理器，这个处理器改变按钮的标签文本。由于鼠标左键按下事件不是命令事件，所以它必须被绑定到按钮（<tt>self.button.Bind</tt>）而非框架（<tt>self.Bind</tt>）。 <span id="line-414" class="anchor"/><span id="line-415" class="anchor"/></p><p
class="line862">当用户在按钮上敲击鼠标时，通过直接与底层操作系统交互，鼠标左键按下事件首先被产生。通常情况下，鼠标左键按下事件改变按钮的状态，随着鼠标左键的释放，产生了<tt>wx.EVT_BUTTON</tt>敲击事件。由于行#3的<tt>Skip()</tt>语句，<tt>DoubleEventFrame</tt>维持处理。没有<tt>Skip()</tt>语句，事件处理规则发现在#2创建的绑定，而在按钮能产生<tt>wx.EVT_BUTTON</tt>事件之前停止。由于<tt>Skip()</tt>的调用，事件处理照常继续，并且按钮敲击被创建。 <span id="line-416"
class="anchor"/><span id="line-417" class="anchor"/></p><p class="line862">记住，当绑定低级事件时如鼠标按下或释放，<tt>wxPython</tt>期望捕获这些低级事件以便生成进一步的事件，为了进一步的事件处理，你必须调用<tt>Skip()</tt>方法，否则进一步的事件处理将被阻止。 <span id="line-418" class="anchor"/><span id="line-419" class="anchor"/><span id="line-420" class="anchor"/><span id="line-421" class="anchor"/></p><p class="line867">
</p><h2 id="head-4d84eaa2c4bc84d5730652c890582d76eddae139">1.5. 在应用程序对象中还包含哪些其它的属性？</h2>
<span id="line-422" class="anchor"/><span id="line-423" class="anchor"/><span id="line-424" class="anchor"/><p class="line862">要更直接地管理主事件循环，你可以使用一些<tt>wx.App</tt>方法来修改它。例如，按你的计划，你可能想开始处理下一个有效的事件，而非等待<tt>wxPython</tt>去开始处理。如果你正在执行一个长时间的过程，并且不想图形界面被冻结，那么这个特性是必要的，通常你不需要使用这节中的这些方法，但是，这些性能有时是很重要的。 <span id="line-425"
class="anchor"/><span id="line-426" class="anchor"/></p><p class="line862">下表3.4列出了你可以用来修改主循环的<tt>wx.App</tt>方法： <span id="line-427" class="anchor"/><span id="line-428" class="anchor"/></p><p class="line867"><tt>Dispatch()</tt>：迫使事件队列中的下一个事件被发送。通过<tt>MainLoop()</tt>使用或使用在定制的事件循环中。 <span id="line-429"
class="anchor"/><tt>Pending()</tt>：如果在<tt>wxPython</tt>应用程序事件队列中有等待被处理的事件，则返回<tt>True</tt>。 <span id="line-430" class="anchor"/><tt>Yield(onlyIfNeeded</tt>=<tt>False)</tt>：允许等候处理的<tt>wxWidgets</tt>事件在一个长时间的处理期间被分派，否则窗口系统将被锁定而不能显示或更新。如果等候处理的事件被处理了，则返回<tt>True</tt>，否则返回<tt>False</tt>。 <span id="line-431"
class="anchor"/><tt>onlyIfNeeded</tt>参数如果为<tt>True</tt>，那么当前的处理将让位于等候处理的事件。如果该参数为<tt>False</tt>，那么递归调用<tt>Yield</tt>是错误的。 <span id="line-432" class="anchor"/>这里也有一个全局函数<tt>wx.SafeYield()</tt>，它阻止用户在<tt>Yield</tt>期间输入数据（这通过临时使用来输入的窗口部件无效来达到目的），以免干扰<tt>Yield</tt>任务。 <span id="line-433" class="anchor"/><span id="line-434" class="anchor"/></p><p
class="line874">另一管理事件的方法是通过定制的方式，它创建你自己的事件类型，以匹配你的应用程序中特定的数据和窗口部件。下一节我们将讨论如何创建你自己的定制事件。 <span id="line-435" class="anchor"/><span id="line-436" class="anchor"/><span id="line-437" class="anchor"/><span id="line-438" class="anchor"/></p><p class="line867">
</p><h2 id="head-fc92511d8672e37c967ac67fa1e4a9df4a6014bc">1.6. 如何创建自己的事件？</h2>
<span id="line-439" class="anchor"/><span id="line-440" class="anchor"/><span id="line-441" class="anchor"/><p class="line874">尽管这是一个更高级的主题，但是我们将在这里讨论定制事件。当你第一次阅读的时候，你可以跳过并且以后再回过头来读。 <span id="line-442"
class="anchor"/>为了要与<tt>wxPython</tt>提供的事件类相区别，你可以创建你自己定制的事件。你可以定制事件以响应哪些针对你的应用程序的数据更新或其它改变，此处定制的事件必须负责你的自定义数据。创建定制的事件类的另一个原因是：你可以针对所定制的窗口部件，使用它自己独特的命令事件类型。下一节中，我们将看一个定制窗口部件的例子。 <span id="line-443" class="anchor"/><span id="line-444" class="anchor"/><span id="line-445" class="anchor"/></p><p class="line867">
</p><h3 id="head-cc66fb7269df6909ea842c971d023ddd94fdbd74">1.6.1. 为一个定制的窗口部件定义一个定制的事件</h3>
<span id="line-446" class="anchor"/><p class="line874">。 <span id="line-447" class="anchor"/><span id="line-448" class="anchor"/><span id="line-449" class="anchor"/></p><p class="line867"><img title="attachment:w3.9.gif" src="/moin/WxPythonInAction/ChapterThree?action=AttachFile&amp;do=get&amp;target=w3.9.gif" class="attachment"/> <span id="line-450" class="anchor"/><span id="line-451" class="anchor"/></p><p
class="line862">图3.9显示了这个窗口部件，一个画板(<tt>panel)</tt>包含了两个按钮。自定义的事件<tt>TwoButtonEvent</tt>仅当用户敲击了这两个按钮之后被触发。这个事件包含了一个关于用户在该部件上敲击次数的计数。 <span id="line-452" class="anchor"/><span id="line-453" class="anchor"/><span id="line-454" class="anchor"/></p><p class="line867"><strong>创建自定义事件的步骤</strong>： <span id="line-455" class="anchor"/><span id="line-456" class="anchor"/></p><p
class="line862">1、定义一个新的事件类，它是<tt>wxPython</tt>的<tt>wx.PyEvent</tt>类的子类。如果你想这个事件被作为命令事件，你可以创建<tt>wx.PyCommandEvent</tt>的子类。像许多<tt>wxPython</tt>中的覆盖一样，一个类的<tt>py</tt>版本使得<tt>wxWidget</tt>系统明白用<tt>Python</tt>写的覆盖C++方法的方法。 <span id="line-457" class="anchor"/><span id="line-458" class="anchor"/></p><p class="line874">2、创建一个事件类型和一个绑定器对象去绑定该事件到特定的对象。 <span
id="line-459" class="anchor"/><span id="line-460" class="anchor"/></p><p class="line862">3、添加能够建造这个新事件实例的代码，并且使用<tt>ProcessEvent()</tt>方法将这个实例引入事件处理系统。一旦该事件被创建，你就可以像使用其它的<tt>wxPython</tt>事件一样创建绑定和处理器方法。 <span id="line-461" class="anchor"/><span id="line-462" class="anchor"/></p><p class="line874">下例3.5显示了管理窗口部件的代码： <span id="line-463" class="anchor"/><span id="line-464"
class="anchor"/><span id="line-465" class="anchor"/><span id="line-466" class="anchor"/><span id="line-467" class="anchor"/><span id="line-468" class="anchor"/><span id="line-469" class="anchor"/><span id="line-470" class="anchor"/><span id="line-471" class="anchor"/><span id="line-472" class="anchor"/><span id="line-473" class="anchor"/><span id="line-474" class="anchor"/><span id="line-475" class="anchor"/><span id="line-476" class="anchor"/><span
id="line-477" class="anchor"/><span id="line-478" class="anchor"/><span id="line-479" class="anchor"/><span id="line-480" class="anchor"/><span id="line-481" class="anchor"/><span id="line-482" class="anchor"/><span id="line-483" class="anchor"/><span id="line-484" class="anchor"/><span id="line-485" class="anchor"/><span id="line-486" class="anchor"/><span id="line-487" class="anchor"/><span id="line-488" class="anchor"/><span id="line-489"
class="anchor"/><span id="line-490" class="anchor"/><span id="line-491" class="anchor"/><span id="line-492" class="anchor"/><span id="line-493" class="anchor"/><span id="line-494" class="anchor"/><span id="line-495" class="anchor"/><span id="line-496" class="anchor"/><span id="line-497" class="anchor"/><span id="line-498" class="anchor"/><span id="line-499" class="anchor"/><span id="line-500" class="anchor"/><span id="line-501" class="anchor"/><span
id="line-502" class="anchor"/><span id="line-503" class="anchor"/><span id="line-504" class="anchor"/><span id="line-505" class="anchor"/><span id="line-506" class="anchor"/><span id="line-507" class="anchor"/><span id="line-508" class="anchor"/><span id="line-509" class="anchor"/><span id="line-510" class="anchor"/><span id="line-511" class="anchor"/><span id="line-512" class="anchor"/><span id="line-513" class="anchor"/><span id="line-514"
class="anchor"/><span id="line-515" class="anchor"/><span id="line-516" class="anchor"/><span id="line-517" class="anchor"/><span id="line-518" class="anchor"/><span id="line-519" class="anchor"/><span id="line-520" class="anchor"/><span id="line-521" class="anchor"/><span id="line-522" class="anchor"/><span id="line-523" class="anchor"/><span id="line-524" class="anchor"/><span id="line-525" class="anchor"/><span id="line-526" class="anchor"/><span
id="line-527" class="anchor"/><span id="line-528" class="anchor"/><span id="line-529" class="anchor"/><span id="line-530" class="anchor"/><span id="line-531" class="anchor"/><span id="line-532" class="anchor"/><span id="line-533" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-e6eb9cd7bfc354fedf9db03d2113147b0791c207_010\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-e6eb9cd7bfc354fedf9db03d2113147b0791c207_010', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-e6eb9cd7bfc354fedf9db03d2113147b0791c207_010" dir="ltr"><span class="line"><span class="LineNumber">   1 </span><span class="ResWord">import</span> <span class="ID">wx</span></span>
<span class="line"><span class="LineNumber">   2 </span></span>
<span class="line"><span class="LineNumber">   3 </span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ResWord">class</span> <span class="ID">TwoButtonEvent</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">PyCommandEvent</span><span class="Operator">)</span><span class="Operator">:</span>   <span class="Comment">#1 定义事件          </span></span>
<span class="line"><span class="LineNumber">   5 </span>    <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">evtType</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>        <span class="ID">wx</span><span class="Operator">.</span><span class="ID">PyCommandEvent</span><span class="Operator">.</span><span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">evtType</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   7 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">clickCount</span> <span class="Operator">=</span> <span class="Number">0</span></span>
<span class="line"><span class="LineNumber">   8 </span></span>
<span class="line"><span class="LineNumber">   9 </span>    <span class="ResWord">def</span> <span class="ID">GetClickCount</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  10 </span>        <span class="ResWord">return</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">clickCount</span></span>
<span class="line"><span class="LineNumber">  11 </span></span>
<span class="line"><span class="LineNumber">  12 </span>    <span class="ResWord">def</span> <span class="ID">SetClickCount</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">count</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  13 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">clickCount</span> <span class="Operator">=</span> <span class="ID">count</span></span>
<span class="line"><span class="LineNumber">  14 </span></span>
<span class="line"><span class="LineNumber">  15 </span><span class="ID">myEVT_TWO_BUTTON</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">NewEventType</span><span class="Operator">(</span><span class="Operator">)</span> <span class="Comment">#2 创建一个事件类型   </span></span>
<span class="line"><span class="LineNumber">  16 </span><span class="ID">EVT_TWO_BUTTON</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">PyEventBinder</span><span class="Operator">(</span><span class="ID">myEVT_TWO_BUTTON</span><span class="Operator">,</span> <span class="Number">1</span><span class="Operator">)</span>  <span class="Comment">#3 创建一个绑定器对象 </span></span>
<span class="line"><span class="LineNumber">  17 </span></span>
<span class="line"><span class="LineNumber">  18 </span><span class="ResWord">class</span> <span class="ID">TwoButtonPanel</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">Panel</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  19 </span>    <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">=</span><span class="Operator">-</span><span class="Number">1</span><span class="Operator">,</span> <span
class="ID">leftText</span><span class="Operator">=</span><span class="String">"Left"</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  20 </span>            <span class="ID">rightText</span><span class="Operator">=</span><span class="String">"Right"</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  21 </span>        <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Panel</span><span class="Operator">.</span><span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  22 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">leftButton</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Button</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">label</span><span class="Operator">=</span><span
class="ID">leftText</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  23 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">rightButton</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Button</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">label</span><span class="Operator">=</span><span
class="ID">rightText</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  24 </span>                                     <span class="ID">pos</span><span class="Operator">=</span><span class="Operator">(</span><span class="Number">100</span><span class="Operator">,</span><span class="Number">0</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  25 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">leftClick</span> <span class="Operator">=</span> <span class="ID">False</span></span>
<span class="line"><span class="LineNumber">  26 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">rightClick</span> <span class="Operator">=</span> <span class="ID">False</span></span>
<span class="line"><span class="LineNumber">  27 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">clickCount</span> <span class="Operator">=</span> <span class="Number">0</span></span>
<span class="line"><span class="LineNumber">  28 </span><span class="Comment">#4 下面两行绑定更低级的事件</span></span>
<span class="line"><span class="LineNumber">  29 </span><span class="Comment"/>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">leftButton</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_LEFT_DOWN</span><span class="Operator">,</span> <span class="ID">self</span><span
class="Operator">.</span><span class="ID">OnLeftClick</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  30 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">rightButton</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">EVT_LEFT_DOWN</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span
class="ID">OnRightClick</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  31 </span></span>
<span class="line"><span class="LineNumber">  32 </span>    <span class="ResWord">def</span> <span class="ID">OnLeftClick</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  33 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">leftClick</span> <span class="Operator">=</span> <span class="ID">True</span></span>
<span class="line"><span class="LineNumber">  34 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnClick</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  35 </span>        <span class="ID">event</span><span class="Operator">.</span><span class="ID">Skip</span><span class="Operator">(</span><span class="Operator">)</span>   <span class="Comment">#5 继续处理</span></span>
<span class="line"><span class="LineNumber">  36 </span></span>
<span class="line"><span class="LineNumber">  37 </span></span>
<span class="line"><span class="LineNumber">  38 </span>    <span class="ResWord">def</span> <span class="ID">OnRightClick</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  39 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">rightClick</span> <span class="Operator">=</span> <span class="ID">True</span></span>
<span class="line"><span class="LineNumber">  40 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnClick</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  41 </span>        <span class="ID">event</span><span class="Operator">.</span><span class="ID">Skip</span><span class="Operator">(</span><span class="Operator">)</span>   <span class="Comment">#6 继续处理</span></span>
<span class="line"><span class="LineNumber">  42 </span></span>
<span class="line"><span class="LineNumber">  43 </span></span>
<span class="line"><span class="LineNumber">  44 </span>    <span class="ResWord">def</span> <span class="ID">OnClick</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  45 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">clickCount</span> <span class="Operator">+=</span> <span class="Number">1</span></span>
<span class="line"><span class="LineNumber">  46 </span>        <span class="ResWord">if</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">leftClick</span> <span class="ResWord">and</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">rightClick</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  47 </span>            <span class="ID">self</span><span class="Operator">.</span><span class="ID">leftClick</span> <span class="Operator">=</span> <span class="ID">False</span></span>
<span class="line"><span class="LineNumber">  48 </span>            <span class="ID">self</span><span class="Operator">.</span><span class="ID">rightClick</span> <span class="Operator">=</span> <span class="ID">False</span></span>
<span class="line"><span class="LineNumber">  49 </span>            <span class="ID">evt</span> <span class="Operator">=</span> <span class="ID">TwoButtonEvent</span><span class="Operator">(</span><span class="ID">myEVT_TWO_BUTTON</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">GetId</span><span class="Operator">(</span><span class="Operator">)</span><span
class="Operator">)</span> <span class="Comment">#7 创建自定义事件   </span></span>
<span class="line"><span class="LineNumber">  50 </span>            <span class="ID">evt</span><span class="Operator">.</span><span class="ID">SetClickCount</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">.</span><span class="ID">clickCount</span><span class="Operator">)</span>   <span class="Comment"># 添加数据到事件 </span></span>
<span class="line"><span class="LineNumber">  51 </span>            <span class="ID">self</span><span class="Operator">.</span><span class="ID">GetEventHandler</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">.</span><span class="ID">ProcessEvent</span><span class="Operator">(</span><span class="ID">evt</span><span class="Operator">)</span>  <span class="Comment">#8 处理事件 </span></span>
<span class="line"><span class="LineNumber">  52 </span></span>
<span class="line"><span class="LineNumber">  53 </span><span class="ResWord">class</span> <span class="ID">CustomEventFrame</span><span class="Operator">(</span><span class="ID">wx</span><span class="Operator">.</span><span class="ID">Frame</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  54 </span>    <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  55 </span>        <span class="ID">wx</span><span class="Operator">.</span><span class="ID">Frame</span><span class="Operator">.</span><span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">parent</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">,</span> <span
class="String">'Click Count: 0'</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  56 </span>                          <span class="ID">size</span><span class="Operator">=</span><span class="Operator">(</span><span class="Number">300</span><span class="Operator">,</span> <span class="Number">100</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  57 </span>        <span class="ID">panel</span> <span class="Operator">=</span> <span class="ID">TwoButtonPanel</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  58 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">Bind</span><span class="Operator">(</span><span class="ID">EVT_TWO_BUTTON</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">OnTwoClick</span><span class="Operator">,</span> <span class="ID">panel</span><span class="Operator">)</span> <span
class="Comment">#9 绑定自定义事件  </span></span>
<span class="line"><span class="LineNumber">  59 </span></span>
<span class="line"><span class="LineNumber">  60 </span>    <span class="ResWord">def</span> <span class="ID">OnTwoClick</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">event</span><span class="Operator">)</span><span class="Operator">:</span>   <span class="Comment">#10 定义一个事件处理器函数                              </span></span>
<span class="line"><span class="LineNumber">  61 </span>        <span class="ID">self</span><span class="Operator">.</span><span class="ID">SetTitle</span><span class="Operator">(</span><span class="String">"Click Count: %s"</span> <span class="Operator">%</span> <span class="ID">event</span><span class="Operator">.</span><span class="ID">GetClickCount</span><span class="Operator">(</span><span class="Operator">)</span><span
class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  62 </span></span>
<span class="line"><span class="LineNumber">  63 </span></span>
<span class="line"><span class="LineNumber">  64 </span><span class="ResWord">if</span> <span class="ID">__name__</span> <span class="Operator">==</span> <span class="String">'__main__'</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  65 </span>    <span class="ID">app</span> <span class="Operator">=</span> <span class="ID">wx</span><span class="Operator">.</span><span class="ID">PySimpleApp</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  66 </span>    <span class="ID">frame</span> <span class="Operator">=</span> <span class="ID">CustomEventFrame</span><span class="Operator">(</span><span class="ID">parent</span><span class="Operator">=</span><span class="ID">None</span><span class="Operator">,</span> <span class="ID">id</span><span class="Operator">=</span><span class="Operator">-</span><span class="Number">1</span><span
class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  67 </span>    <span class="ID">frame</span><span class="Operator">.</span><span class="ID">Show</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  68 </span>    <span class="ID">app</span><span class="Operator">.</span><span class="ID">MainLoop</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-534" class="anchor"/><p class="line867"><strong>说明</strong>： <span id="line-535" class="anchor"/><span id="line-536" class="anchor"/><span id="line-537" class="anchor"/></p><p class="line867"><strong>#1</strong> 这个关于事件类的构造器声明为<tt>wx.PyCommandEvent</tt>的一个子类。
<tt>wx.PyEvent</tt>和<tt>wx.PyCommandEvent</tt>是<tt>wxPython</tt>特定的结构，你可以用来创建新的事件类并且可以把C++类和你的<tt>Python</tt>代码连接起来。如果你试图直接使用<tt>wx.Event</tt>，那么在事件处理期间<tt>wxPython</tt>不能明白你的子类的新方法，因为C++事件处理不了解该<tt>Python</tt>子类。如果你<tt>wx.PyEvent</tt>，一个对该<tt>Python</tt>实例的引用被保存，并且以后被直接传递给事件处理器，使得该<tt>Python</tt>代码能被使用。 <span
id="line-538" class="anchor"/><span id="line-539" class="anchor"/><span id="line-540" class="anchor"/></p><p class="line867"><strong>#2</strong> 全局函数<tt>wx.NewEventType()</tt>的作用类似于<tt>wx.NewId()</tt>；它返回一个唯一的事件类型<tt>ID</tt>。这个唯一的值标识了一个应用于事件处理系统的事件类型。 <span id="line-541" class="anchor"/><span id="line-542" class="anchor"/><span id="line-543" class="anchor"/></p><p
class="line867"><strong>#3</strong> 这个绑定器对象的创建使用了这个新事件类型作为一个参数。这第二个参数的取值位于[0,2]之间，它代表<tt>wxId</tt>标识号，该标识号用于<tt>wx.EvtHandler.Bind()</tt>方法去确定哪个对象是事件的源。 <span id="line-544" class="anchor"/><span id="line-545" class="anchor"/><span id="line-546" class="anchor"/></p><p class="line867"><strong>#4</strong>
为了创建这个新的更高级的命令事件，程序必需响应特定的用户事件，例如，在每个按钮对象上的鼠标左键按下。依据哪个按钮被敲击，该事件被绑定到<tt>OnLeftClick()</tt>和<tt>OnRightClick()</tt>方法。处理器设置了布尔值，以表明按键是否被敲击。 <span id="line-547" class="anchor"/><span id="line-548" class="anchor"/><span id="line-549" class="anchor"/></p><p class="line867"><strong>#5</strong>  <span id="line-550" class="anchor"/><strong>#6</strong>
<tt>Skip()</tt>的调用允许在该事件处理完成后的进一步处理。在这里，这个新的事件不需要<tt>skip</tt>调用；它在事件处理器完成之前被分派了(<tt>self.OnClick())</tt>。但是所有的鼠标左键按下事件需要调用<tt>Skip()</tt>，以便处理器不把最后的按钮敲击挂起。这个程序没有处理按钮敲击事件，但是由于使用了<tt>Skip()</tt>，<tt>wxPython</tt>在敲击期间使用按钮敲击事件来正确地绘制按钮。如果被挂起了，用户将不会得到来自按钮按下的反馈。 <span id="line-551"
class="anchor"/><span id="line-552" class="anchor"/><span id="line-553" class="anchor"/></p><p class="line867"><strong>#7</strong> 如果两个按钮都被敲击了，该代码创建这个新事件的一个实例。事件类型和两个按钮的<tt>ID</tt>作为构造器的参数。通常，一个事件类可以有多个事件类型，尽管本例中不是这样。 <span id="line-554" class="anchor"/><span id="line-555" class="anchor"/><span id="line-556" class="anchor"/></p><p class="line867"><strong>#8</strong>
<tt>ProcessEvent()</tt>的调用将这个新事件引入到事件处理系统中，<tt>ProcessEvent()</tt>的说明见3.4.1节。<tt>GetEventHandler()</tt>调用返回<tt>wx.EvtHandler</tt>的一个实例。大多数情况下，返回的实例是窗口部件对象本身，但是如果其它的<tt>wx.EvtHandler()</tt>方法已经被压入了事件处理器堆栈，那么返回的将是堆栈项的项目。 <span id="line-557" class="anchor"/><span id="line-558" class="anchor"/><span id="line-559" class="anchor"/></p><p
class="line867"><strong>#9</strong> 该自定义的事件的绑定如同其它事件一样，在这里使用#3所创建的绑定器。 <span id="line-560" class="anchor"/><span id="line-561" class="anchor"/><span id="line-562" class="anchor"/></p><p class="line867"><strong>#10</strong> 这个例子的事件处理器函数改变窗口的标题以显示敲击数。 <span id="line-563" class="anchor"/><span id="line-564" class="anchor"/></p><p
class="line862">至此，你的自定义的事件可以做任何预先存在的<tt>wxPython</tt>事件所能做的事，比如创建不同的窗口部件，它们响应同样的事件。创建事件是<tt>wxPython</tt>的定制的一个重要部分。 <span id="line-565" class="anchor"/><span id="line-566" class="anchor"/><span id="line-567" class="anchor"/><span id="line-568" class="anchor"/></p><p class="line867">
</p><h2 id="head-e0d5baa7d0aad03d94711466b87eea31f1aa9bf9">1.7. 总结</h2>
<span id="line-569" class="anchor"/><span id="line-570" class="anchor"/><span id="line-571" class="anchor"/><p class="line862">1、<tt>wxPython</tt>应用程序使用基于事件的控制流。应用程序的大部分时间花费在一个主循环中，等待事件并分派它们到适当的处理器函数。 <span id="line-572" class="anchor"/><span id="line-573" class="anchor"/></p><p
class="line862">2、所有的<tt>wxPython</tt>事件是<tt>wx.Event</tt>类的子类。低级的事件，如鼠标敲击，被用来建立高级的事件，如按钮敲击或菜单项选择。这些由<tt>wxPython</tt>窗口部件引起的高级事件是类<tt>wx.CommandEvent</tt>的子类。大多的事件类通过一个事件类型字段被进一步分类，事件类型字段区分事件。 <span id="line-574" class="anchor"/><span id="line-575" class="anchor"/></p><p
class="line862">3、为了捕获事件和函数之间的关联，<tt>wxPython</tt>使用类<tt>wx.PyEventBinder</tt>的实例。类<tt>wx.PyEventBinder</tt>有许多预定义的实例，每个都对应于一个特定的事件类型。每个<tt>wxPython</tt>窗口部件都是类<tt>wx.EvtHandler</tt>的子类。类<tt>wx.EvtHandler</tt>有一个方法<tt>Bind()</tt>，它通常在初始化时被调用，所带参数是一个事件绑定器实例和一个处理器函数。根据事件的类型，别的<tt>wxPython</tt>对象的<tt>ID</tt>可能也需要被传递给<tt>Bind()</tt>调用。
<span id="line-576" class="anchor"/><span id="line-577" class="anchor"/></p><p
class="line862">4、事件通常被发送给产生它们的对象，以搜索一个绑定对象，这个绑定对象绑定事件到一个处理器函数。如果事件是命令事件，这个事件沿容器级向上传递直到一个窗口部件被发现有一个针对该事件类型的处理器。一旦一个事件处理器被发现，对于该事件的处理就停止，除非这个处理器调用了该事件的<tt>Skip()</tt>方法。你可以允许多个处理器去响应一个事件，或去核查该事件的所有默认行为。主循环的某些方面可以使用<tt>wx.App</tt>的方法来控制。 <span id="line-578"
class="anchor"/><span id="line-579" class="anchor"/></p><p
class="line862">5、在<tt>wxPython</tt>中可以创建自定义事件，并作为定制（自定义）的窗口部件的行为的一部分。自定义的事件是类<tt>wx.PyEvent</tt>的子类，自定义的命令事件是类<tt>wx.PyCommandEvent</tt>的子类。为了创建一个自定义事件，新的类必须被定义，并且关于每个事件类型（这些事件类型被这个新类所管理）的绑定器必须被创建。最后，这个事件必须在系统的某处被生成，这通过经由<tt>ProcessEvent()</tt>方法传递一个新的实例给事件处理器系统来实现。 <span
id="line-580" class="anchor"/><span id="line-581" class="anchor"/></p><p class="line862">在本章中，我们已经讨论了应用程序对象，它们对于你的<tt>wxPython</tt>应用程序是最重要的。在下一章，我们将给你看一个有用的工具，它是用<tt>wxPython</tt>写成的，它将帮助你使用<tt>wxPython</tt>进行开发工作。 <span id="line-582" class="anchor"/><span id="bottom" class="anchor"/></p></div>
