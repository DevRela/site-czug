---
created: ''
creator: panjy
description: ''
title: 编程FAQ
---
<p>来自：<a href="http://wiki.woodpecker.org.cn/moin/PyProgFaq">http://wiki.woodpecker.org.cn/moin/PyProgFaq</a></p>
<div lang="en" id="content" dir="ltr"><span id="top" class="anchor"/>
<span id="line-3" class="anchor"/><span id="line-4" class="anchor"/><p class="line862">::-- limodou [2009-08-25 06:12:01] <span id="line-5" class="anchor"/></p><div class="table-of-contents"><p class="table-of-contents-heading">目录</p><ol><li><a href="#head-e0c076953f1ab47dc37191f1f2cdd263f5e01422">编程   FAQ</a><ol><li><a href="#head-9d3fb722be94575823113b68b72703abca611aaa">一般问题</a></li><li><a href="#head-0f342a0af40cd160b998c81e2fdf5f9ff2d6f3f4">核心语言</a></li><li><a href="#head-746c0f27d6dc2c6724b30c94e5c291f5340e1cee">数字和字符串</a></li><li><a href="#head-22cefbfc2d1ad0ee425e22ae7696365b6125aeb3">序列 (Tuples/Lists)</a></li><li><a href="#head-1448eae58490c05f29c01bb917357132b480a601">字典</a></li><li><a href="#head-20d3e3fd3982f7cb2deab5d5a1cbf0e90df1d142">对象</a></li><li><a href="#head-6fa0baf6a054a5c60279208494be546d48a1c709">模块</a></li></ol></li></ol></div> <span id="line-6" class="anchor"/><span id="line-7" class="anchor"/><p class="line874">[翻译]Python Programming FAQ <span id="line-8" class="anchor"/><span id="line-9" class="anchor"/></p><p class="line867"><strong>by liqust at gmail dot com <span id="line-10" class="anchor"/><a href="http://www.2pole.com/" class="http">http://www.2pole.com/</a> -- 09/15/2005</strong>  <span id="line-11" class="anchor"/><span id="line-12" class="anchor"/></p><p class="line862">此FAQ英文原版在<a href="http://www.python.org/doc/faq/programming.html" class="http">http://www.python.org/doc/faq/programming.html</a> <span id="line-13" class="anchor"/><span id="line-14" class="anchor"/></p><p class="line867">
</p><h1 id="head-e0c076953f1ab47dc37191f1f2cdd263f5e01422">1. 编程   FAQ</h1>
<span id="line-15" class="anchor"/><span id="line-16" class="anchor"/><span id="line-17" class="anchor"/><ul><li style="list-style-type: none;">Date: <span id="line-18" class="anchor"/><span id="line-19" class="anchor"/>$Date: 2005-06-05 19:37:51 -0500 (Sun, 05 Jun 2005) $ <span id="line-20" class="anchor"/><span id="line-21" class="anchor"/><span id="line-22" class="anchor"/>Version: <span id="line-23" class="anchor"/><span id="line-24" class="anchor"/>$Revision: 8226 $ <span id="line-25" class="anchor"/><span id="line-26" class="anchor"/><span id="line-27" class="anchor"/><span id="line-28" class="anchor"/>Web site: <span id="line-29" class="anchor"/><span id="line-30" class="anchor"/><p class="line891"><a href="http://www.python.org/" class="http">http://www.python.org/</a> <span id="line-31" class="anchor"/><span id="line-32" class="anchor"/><span id="line-33" class="anchor"/><span id="line-34" class="anchor"/></p></li></ul><p class="line867">
</p><h2 id="head-9d3fb722be94575823113b68b72703abca611aaa">1.1. 一般问题</h2>
<span id="line-35" class="anchor"/><span id="line-36" class="anchor"/><p class="line867">
</p><h3 id="head-781898e840b48176b2f752b4d41ec6c3b569a7d1">1.1.1. 是否有源码级的调试器， 具有breakpoint, single-stepping等功能?</h3>
<span id="line-37" class="anchor"/><span id="line-38" class="anchor"/><p class="line874">是的。 <span id="line-39" class="anchor"/><span id="line-40" class="anchor"/></p><p class="line862">pdb模块是一个简单却强大的命令行模式的python调试器。它是标准python库的一部分, 在<a href="http://docs.python.org/lib/module-pdb.html" class="http">库参考手册</a>中有关于它的文档。作为一个例 子，你也可以使用pdb的代码编写你自己的调试器。 <span id="line-41" class="anchor"/><span id="line-42" class="anchor"/></p><p class="line862">作为标准python发行包的一部分（通常为Tools/scripts/idle），IDLE包含了一个图形界面的调试器。在<a href="http://www.python.org/idle/doc/idle2.html#Debugger" class="http">http://www.python.org/idle/doc/idle2.html#Debugger</a>有IDLE调试器的文档。 <span id="line-43" class="anchor"/><span id="line-44" class="anchor"/></p><p class="line862">另一个Python IDE，<a href="/moin/PythonWin" class="nonexistent">PythonWin</a>包含了一个基于pdb的GUI调试器。 Pythonwin调试器对breakpoints作颜色标记，它还有一些很酷的特性，比如调试非python程序。可以参考<a href="http://www.python.org/windows/pythonwin/" class="http">http://www.python.org/windows/pythonwin/</a>。最 新版本的<a href="/moin/PythonWin" class="nonexistent">PythonWin</a>已作为<a href="/moin/ActivePython" class="nonexistent">ActivePython</a> 发行包的一部分(见 <a href="http://www.activestate.com/Products/ActivePython/index.html" class="http">http://www.activestate.com/Products/ActivePython/index.html</a>)。 <span id="line-45" class="anchor"/><span id="line-46" class="anchor"/></p><p class="line867"><a href="http://boa-constructor.sourceforge.net/" class="http">Boa Constructor</a> 是一个使用wxPython的IDE和GUI builder。它提供了可视化的框架创建和操作，一个对象探查器，多种代码视图比如对象浏览器，继承架构，doc string创建的html文档，一个高级调试器，继承帮助和Zope支持。 <span id="line-47" class="anchor"/><span id="line-48" class="anchor"/></p><p class="line867"><a href="http://www.die-offenbachs.de/detlev/eric3.html" class="http">Eric3</a> 是基于<a href="/moin/PyQt">PyQt</a>和Scintilla editing组件的一个IDE。 <span id="line-49" class="anchor"/><span id="line-50" class="anchor"/></p><p class="line862">Pydb是python标准调试器pdb的一个版本, 与DDD(Data Display Debugger, 一个流行的调试器图形界面)一起工作。Pydb 可以在<a href="http://packages.debian.org/unstable/devel/pydb.html" class="http">http://packages.debian.org/unstable/devel/pydb.html</a>找到，DDD可以在 <a href="http://www.gnu.org/software/ddd" class="http">http://www.gnu.org/software/ddd</a>找到. <span id="line-51" class="anchor"/><span id="line-52" class="anchor"/></p><p class="line874">还有很多包含图形界面的商业版本Python IDE。包括: <span id="line-53" class="anchor"/><span id="line-54" class="anchor"/><span id="line-55" class="anchor"/></p><ul><li><p class="line862">Wing IDE (<a href="http://wingide.com" class="http">http://wingide.com</a>) <span id="line-56" class="anchor"/><span id="line-57" class="anchor"/></p></li><li class="gap"><p class="line862">Komodo IDE (<a href="http://www.activestate.com/Products/Komodo" class="http">http://www.activestate.com/Products/Komodo</a>) <span id="line-58" class="anchor"/><span id="line-59" class="anchor"/><span id="line-60" class="anchor"/></p></li></ul><p class="line867">
</p><h3 id="head-8bb0c2eb68a546a3dfca3c76aa226d676ad8724d">1.1.2. 是否有工具可以帮助找到bug或者做静态分析?</h3>
<span id="line-61" class="anchor"/><span id="line-62" class="anchor"/><p class="line874">是的. <span id="line-63" class="anchor"/><span id="line-64" class="anchor"/></p><p class="line867"><a href="/moin/PyChecker" class="nonexistent">PyChecker</a>是一个静态分析器，它可以找出python代码中的bug并对代码的复杂性和风格作出警告。可以在 <a href="http://pychecker.sf.net" class="http">http://pychecker.sf.net</a>找到它. <span id="line-65" class="anchor"/><span id="line-66" class="anchor"/></p><p class="line862">另一个工具<a href="http://www.logilab.org/projects/pylint" class="http">Pylint</a> 检查一个模块是否满足编码规范，它还支持插件扩展。除了<a href="/moin/PyChecker" class="nonexistent">PyChecker</a>能提供的bug检查外，Pylint 还提供额外的特性比如检查代码行长度，变量名是否符合代码规范，声明的接口是否都已实现等。<a href="http://www.logilab.org/projects/pylint/documentation" class="http">http://www.logilab.org/projects/pylint/documentation</a> 提供了关于Pylint特性的一个完整列表。 <span id="line-67" class="anchor"/><span id="line-68" class="anchor"/></p><p class="line867">
</p><h3 id="head-0e3b6cb4a0dae7c7f0ee1cb89998cc7e871f00c2">1.1.3. 如何由python脚本创建一个单独的二进制文件?</h3>
<span id="line-69" class="anchor"/><span id="line-70" class="anchor"/><p class="line874">如果你只是希望用户运行一个单独的程序而不需要预先下载一个python的发行版，则并不需要将Python代码编译成C代码。有很多工具可以找出程序依赖的模块并将这些模块 与程序绑定在一起以产生一个单独的执行文件。 <span id="line-71" class="anchor"/><span id="line-72" class="anchor"/></p><p class="line874">其中一种工具就是freeze tool, 它作为Tools/freeze被包含在python的代码树中。它将python字节码转换成C数组，和一个可将你所有模块嵌入到新程序中的编译器，这个编译器跟python模块链接在一起。 <span id="line-73" class="anchor"/><span id="line-74" class="anchor"/></p><p class="line874">它根据import语句递归地扫描源代码，并查找在标准python路径中的模块和源代码目录中的模块（内建模块）。用python写的模块的字节码随后被转换成C代码（可以通过使用marshal模块转换成代码对象的数组构 造器），并产生一个可自定义的配置文件，只包含程序使用了的模块。 最后将生成的C代码编译并链接至余下的的python解释器，产生一个与你的script执行效果完全一样的单独文件。 <span id="line-75" class="anchor"/><span id="line-76" class="anchor"/></p><p class="line862">显然，freeze需要一个C编译器。但也有一些工具并不需要。首先便是Gordon <a href="/moin/McMillan" class="nonexistent">McMillan</a>'s installer，它在 <span id="line-77" class="anchor"/><span id="line-78" class="anchor"/><span id="line-79" class="anchor"/></p><ul><li style="list-style-type: none;"><p class="line891"><a href="http://www.mcmillan-inc.com/install1.html" class="http">http://www.mcmillan-inc.com/install1.html</a> <span id="line-80" class="anchor"/><span id="line-81" class="anchor"/><span id="line-82" class="anchor"/></p></li></ul><p class="line874">它工作在Windows, Linux和至少是部分Unix变种上。 <span id="line-83" class="anchor"/><span id="line-84" class="anchor"/></p><p class="line874">另一个便是Thomas Heller的 py2exe (只适用于Windows平台)，它在 <span id="line-85" class="anchor"/><span id="line-86" class="anchor"/><span id="line-87" class="anchor"/></p><ul><li style="list-style-type: none;"><p class="line891"><a href="http://starship.python.net/crew/theller/py2exe" class="http">http://starship.python.net/crew/theller/py2exe</a> <span id="line-88" class="anchor"/><span id="line-89" class="anchor"/><span id="line-90" class="anchor"/></p></li></ul><p class="line862">第三个是Christian Tismer的 <a href="http://starship.python.net/crew/pirx" class="http">SQFREEZE</a>，它将字节码附在一个特殊的python解释器后面，解释器负责找到这段代码。Python 2.4可能会引入类似的机制。 <span id="line-91" class="anchor"/><span id="line-92" class="anchor"/></p><p class="line862">其它工具包括Fredrik Lundh的 <a href="http://www.pythonware.com/products/python/squeeze" class="http">Squeeze</a> 和 Anthony Tuininga的 <a href="http://starship.python.net/crew/atuining/cx_Freeze/index.html" class="http">cx_Freeze</a>. <span id="line-93" class="anchor"/><span id="line-94" class="anchor"/></p><p class="line867">
</p><h3 id="head-47e32e0e2b4dbab7f4513a697fb97c734ffdae61">1.1.4. 是否有关于python程序的代码标准或风格向导?</h3>
<span id="line-95" class="anchor"/><span id="line-96" class="anchor"/><p class="line862">是的。标准库模块要求的代码风格被列在<a href="http://www.python.org/peps/pep-0008.html" class="http">PEP 8</a>. <span id="line-97" class="anchor"/><span id="line-98" class="anchor"/></p><p class="line867">
</p><h3 id="head-c5241f321faeed109e3cc2317b10218f8ed42090">1.1.5. 程序执行速度太慢，如何改善?</h3>
<span id="line-99" class="anchor"/><span id="line-100" class="anchor"/><p class="line874">一般来说这是个复杂的问题。有很多技巧可以提升python的速度，比如可以用C重写部分代码。 <span id="line-101" class="anchor"/><span id="line-102" class="anchor"/></p><p class="line874">在某些情况下将python转换成C或x86汇编语言是可能的，这意味着您不需要修改代码就可获得速度提升。 <span id="line-103" class="anchor"/><span id="line-104" class="anchor"/></p><p class="line867"><a href="http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/" class="http">Pyrex</a> 可以将稍许改动过的python码转换成C扩展，并可以在很多平台上使用。 <span id="line-105" class="anchor"/><span id="line-106" class="anchor"/></p><p class="line867"><a href="http://psyco.sourceforge.net" class="http">Psyco</a> 是一个即时编译器，可将python码转换成x86汇编语言。如果你可以使用它， Psyco 可使关键函数有明显的性能提升。 <span id="line-107" class="anchor"/><span id="line-108" class="anchor"/></p><p class="line874">剩下的问题就是讨论各种可稍许提升python代码速度的技巧。在profile指出某个函数是一个经常执行的热点后，除非确实需要，否则不要应用任何优化措施，优化经常会使代码变得不清晰，您不应该承受这样做所带来的负担（延长的开发时间，更多可能的bug），除非优化结果确实值得你这样做。 <span id="line-109" class="anchor"/><span id="line-110" class="anchor"/></p><p class="line862">Skip Montanaro有一个专门关于提升python代码速度的网页，位于 <a href="http://manatee.mojam.com/~skip/python/fastpython.html" class="http">http://manatee.mojam.com/~skip/python/fastpython.html</a>。 <span id="line-111" class="anchor"/><span id="line-112" class="anchor"/></p><p class="line862">Guido van Rossum 写了关于提升python代码速度的内容，在<a href="http://www.python.org/doc/essays/list2str.html" class="http">http://www.python.org/doc/essays/list2str.html</a>。 <span id="line-113" class="anchor"/><span id="line-114" class="anchor"/></p><p class="line862">还有件需要注意的事，那就是函数特别是方法的调用代价相当大；如果你设计了一个有很多小型函数的纯面向对象的接口，而这些函数所做的不过是对实例变量获取或赋值，又或是调用另一个方法，那么你应该考虑使用更直接的方式比如直接存取实例变量。也可参照profile模块（在<a href="http://docs.python.org/lib/module-profile.html" class="http">Library Reference manual</a>中描述)，它 能找出程序哪些部分耗费多数时间（如果你有耐性的话--profile本身会使程序数量级地变慢）。 <span id="line-115" class="anchor"/><span id="line-116" class="anchor"/></p><p class="line874">记住很多从其它语言中学到的标准优化方法也可用于python编程。比如，在执行输出时通过使用更大块的写入来减少系统调用会加快程序速度。因此CGI脚本一次性的写入所有输出就会比写入很多次小块输出快得多。 <span id="line-117" class="anchor"/><span id="line-118" class="anchor"/></p><p class="line874">同样的，在适当的情况下使用python的核心特性。比如，通过使用高度优化的C实现，slicing允许程序在解释器主循环的一个滴答中，切割list和其它sequence对象。因此 ，为取得同样效果，为取得以下代码的效果 <span id="line-119" class="anchor"/><span id="line-120" class="anchor"/><span id="line-121" class="anchor"/><span id="line-122" class="anchor"/><span id="line-123" class="anchor"/><span id="line-124" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
function isnumbered(obj) {
return obj.childNodes.length && obj.firstChild.childNodes.length && obj.firstChild.firstChild.className == 'LineNumber';
}
function nformat(num,chrs,add) {
var nlen = Math.max(0,chrs-(''+num).length), res = '';
while (nlen>0) { res += ' '; nlen-- }
return res+num+add;
}
function addnumber(did, nstart, nstep) {
var c = document.getElementById(did), l = c.firstChild, n = 1;
if (!isnumbered(c))
if (typeof nstart == 'undefined') nstart = 1;
if (typeof nstep  == 'undefined') nstep = 1;
n = nstart;
while (l != null) {
if (l.tagName == 'SPAN') {
var s = document.createElement('SPAN');
s.className = 'LineNumber'
s.appendChild(document.createTextNode(nformat(n,4,' ')));
n += nstep;
if (l.childNodes.length)
l.insertBefore(s, l.firstChild)
else
l.appendChild(s)
}
l = l.nextSibling;
}
return false;
}
function remnumber(did) {
var c = document.getElementById(did), l = c.firstChild;
if (isnumbered(c))
while (l != null) {
if (l.tagName == 'SPAN' && l.firstChild.className == 'LineNumber') l.removeChild(l.firstChild);
l = l.nextSibling;
}
return false;
}
function togglenumber(did, nstart, nstep) {
var c = document.getElementById(did);
if (isnumbered(c)) {
remnumber(did);
} else {
addnumber(did,nstart,nstep);
}
return false;
}
</script>

<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-126f809fe86276c5447b73ce84afb2788500f3b1_000\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-126f809fe86276c5447b73ce84afb2788500f3b1_000', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-126f809fe86276c5447b73ce84afb2788500f3b1_000" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">L2</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">for</span> <span class="ID">i</span> <span class="ResWord">in</span> <span class="ID">range</span><span class="Operator">[</span><span class="Number">3</span><span class="Operator">]</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>     <span class="ID">L2</span><span class="Operator">.</span><span class="ID">append</span><span class="Operator">(</span><span class="ID">L1</span><span class="Operator">[</span><span class="ID">i</span><span class="Operator">]</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-125" class="anchor"/><span id="line-126" class="anchor"/><p class="line874">使用 <span id="line-127" class="anchor"/><span id="line-128" class="anchor"/><span id="line-129" class="anchor"/><span id="line-130" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-824510e92283a84c8d5e068caf911c30204b48f1_001\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-824510e92283a84c8d5e068caf911c30204b48f1_001', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-824510e92283a84c8d5e068caf911c30204b48f1_001" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">L2</span> <span class="Operator">=</span> <span class="ID">list</span><span class="Operator">(</span><span class="ID">L1</span><span class="Operator">[</span><span class="Operator">:</span><span class="Number">3</span><span class="Operator">]</span><span class="Operator">)</span> <span class="Comment"># "list" is redundant if L1 is a list.</span><span class="Text"/></span>
</pre></div><span id="line-131" class="anchor"/><span id="line-132" class="anchor"/><p class="line874">则更短且快得多。 <span id="line-133" class="anchor"/><span id="line-134" class="anchor"/></p><p class="line874">注意，内建函数如map(), zip(), 和friends在执行一个单独循环的任务时，可被作为一个方便的加速器。比如将两个list配成一对： <span id="line-135" class="anchor"/><span id="line-136" class="anchor"/><span id="line-137" class="anchor"/><span id="line-138" class="anchor"/><span id="line-139" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-3e9db635d58eaf9ae0af25f8f7f9db52479e4c5c_002\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-3e9db635d58eaf9ae0af25f8f7f9db52479e4c5c_002', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-3e9db635d58eaf9ae0af25f8f7f9db52479e4c5c_002" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">zip</span><span class="Operator">(</span><span class="Operator">[</span><span class="Number">1</span><span class="Operator">,</span><span class="Number">2</span><span class="Operator">,</span><span class="Number">3</span><span class="Operator">]</span><span class="Operator">,</span> <span class="Operator">[</span><span class="Number">4</span><span class="Operator">,</span><span class="Number">5</span><span class="Operator">,</span><span class="Number">6</span><span class="Operator">]</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">[</span><span class="Operator">(</span><span class="Number">1</span><span class="Operator">,</span> <span class="Number">4</span><span class="Operator">)</span><span class="Operator">,</span> <span class="Operator">(</span><span class="Number">2</span><span class="Operator">,</span> <span class="Number">5</span><span class="Operator">)</span><span class="Operator">,</span> <span class="Operator">(</span><span class="Number">3</span><span class="Operator">,</span> <span class="Number">6</span><span class="Operator">)</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-140" class="anchor"/><span id="line-141" class="anchor"/><p class="line874">或在执行一系列正弦值时： <span id="line-142" class="anchor"/><span id="line-143" class="anchor"/><span id="line-144" class="anchor"/><span id="line-145" class="anchor"/><span id="line-146" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-a27db439ee995c1f0113d15a62ac4d4472f1424b_003\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-a27db439ee995c1f0113d15a62ac4d4472f1424b_003', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-a27db439ee995c1f0113d15a62ac4d4472f1424b_003" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">map</span><span class="Operator">(</span><span class="ID">math</span><span class="Operator">.</span><span class="ID">sin</span><span class="Operator">,</span> <span class="Operator">(</span><span class="Number">1</span><span class="Operator">,</span><span class="Number">2</span><span class="Operator">,</span><span class="Number">3</span><span class="Operator">,</span><span class="Number">4</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">[</span><span class="Number">0.841470984808</span><span class="Operator">,</span> <span class="Number">0.909297426826</span><span class="Operator">,</span> <span class="Number">0.14112000806</span><span class="Operator">,</span>   <span class="Operator">-</span><span class="Number">0.756802495308</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-147" class="anchor"/><span id="line-148" class="anchor"/><p class="line874">在这些情况下，操作速度会很快。 <span id="line-149" class="anchor"/><span id="line-150" class="anchor"/></p><p class="line874">其它的例子包括string对象的join()和split()方法。例如，如果s1..s7 是大字符串(10K+)那么join([s1,s2,s3,s4,s5,s6,s7])就会比s1+s2+s3+s4+s5+s6+s7快得多, 因为后者会计算很多次子表达式，而join()则在一次过程中完成所有的复制。对于字符串操作，对字符串对象使用replace()方法。仅当在没有固定字符串模式时才使用正则表达式。考虑使用字符串格式化操作string % tuple和string % dictionary。 <span id="line-151" class="anchor"/><span id="line-152" class="anchor"/></p><p class="line862">使用内建方法list.sort()来排序，参考<a href="http://www.amk.ca/python/howto/sorting/" class="http">sorting mini-HOWTO</a>中关于较高级的使用例子。除非在极特殊的情况下，list.sort()比其它任何 方式都要好。 <span id="line-153" class="anchor"/><span id="line-154" class="anchor"/></p><p class="line874">另一个技巧就是"将循环放入函数或方法中" 。例如，假设你有个运行的很慢的程序，而且你使用profiler确定函数ff()占用了很多时间。如果你注意到ff()： <span id="line-155" class="anchor"/><span id="line-156" class="anchor"/></p><p class="line874">def ff(x): <span id="line-157" class="anchor"/></p><ul><li style="list-style-type: none;">..do something with x computing result... <span id="line-158" class="anchor"/>return result <span id="line-159" class="anchor"/><span id="line-160" class="anchor"/></li></ul><p class="line874">常常是在循环中被调用，如: <span id="line-161" class="anchor"/><span id="line-162" class="anchor"/><span id="line-163" class="anchor"/><span id="line-164" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-68f54bad29340cfa485397501054f86a258b3c34_004\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-68f54bad29340cfa485397501054f86a258b3c34_004', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-68f54bad29340cfa485397501054f86a258b3c34_004" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">list</span> <span class="Operator">=</span> <span class="ID">map</span><span class="Operator">(</span><span class="ID">ff</span><span class="Operator">,</span> <span class="ID">oldlist</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-165" class="anchor"/><span id="line-166" class="anchor"/><p class="line874">或: <span id="line-167" class="anchor"/><span id="line-168" class="anchor"/><span id="line-169" class="anchor"/><span id="line-170" class="anchor"/><span id="line-171" class="anchor"/><span id="line-172" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-fa4513b5c2fd16aaf67b924b09ab66e0fa1bbbec_005\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-fa4513b5c2fd16aaf67b924b09ab66e0fa1bbbec_005', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-fa4513b5c2fd16aaf67b924b09ab66e0fa1bbbec_005" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">sequence</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">value</span> <span class="Operator">=</span> <span class="ID">ff</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="ID">do</span> <span class="ID">something</span> <span class="ResWord">with</span> <span class="ID">value</span><span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="Text"/></span>
</pre></div><span id="line-173" class="anchor"/><span id="line-174" class="anchor"/><p class="line874">那么你可以通过重写ff()来消除函数的调用开销： <span id="line-175" class="anchor"/><span id="line-176" class="anchor"/><span id="line-177" class="anchor"/><span id="line-178" class="anchor"/><span id="line-179" class="anchor"/><span id="line-180" class="anchor"/><span id="line-181" class="anchor"/><span id="line-182" class="anchor"/><span id="line-183" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-81a20abe975855f0577931c9d4777182945ff0fe_006\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-81a20abe975855f0577931c9d4777182945ff0fe_006', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-81a20abe975855f0577931c9d4777182945ff0fe_006" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">ffseq</span><span class="Operator">(</span><span class="ID">seq</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">resultseq</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">seq</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>        <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="ID">do</span> <span class="ID">something</span> <span class="ResWord">with</span> <span class="ID">x</span> <span class="ID">computing</span> <span class="ID">result</span><span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   6 </span>        <span class="ID">resultseq</span><span class="Operator">.</span><span class="ID">append</span><span class="Operator">(</span><span class="ID">result</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   7 </span>    <span class="ResWord">return</span> <span class="ID">resultseq</span><span class="Text"/></span>
</pre></div><span id="line-184" class="anchor"/><span id="line-185" class="anchor"/><p class="line874">并重写以上两个例子： <span id="line-186" class="anchor"/><span id="line-187" class="anchor"/></p><p class="line874">list = ffseq(oldlist) <span id="line-188" class="anchor"/><span id="line-189" class="anchor"/></p><p class="line874">和 <span id="line-190" class="anchor"/><span id="line-191" class="anchor"/><span id="line-192" class="anchor"/><span id="line-193" class="anchor"/><span id="line-194" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-ffc57530e71f5adc90e177945e40a9b3ecc21b31_007\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-ffc57530e71f5adc90e177945e40a9b3ecc21b31_007', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-ffc57530e71f5adc90e177945e40a9b3ecc21b31_007" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">for</span> <span class="ID">value</span> <span class="ResWord">in</span> <span class="ID">ffseq</span><span class="Operator">(</span><span class="ID">sequence</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="ID">do</span> <span class="ID">something</span> <span class="ResWord">with</span> <span class="ID">value</span><span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="Text"/></span>
</pre></div><span id="line-195" class="anchor"/><span id="line-196" class="anchor"/><p class="line874">单独对ff(x)的调用被翻译成ffseq([x])[0]，几乎没有额外开销。当然这个技术并不总是合适的，还是其它的方法。 <span id="line-197" class="anchor"/><span id="line-198" class="anchor"/></p><p class="line874">你可以通过将函数或方法的定位结果精确地存储至一个本地变量来获得一些性能提升。一个循环如： <span id="line-199" class="anchor"/><span id="line-200" class="anchor"/><span id="line-201" class="anchor"/><span id="line-202" class="anchor"/><span id="line-203" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-8eb65d40dc3111930ebb17153016d8917d0cec7a_008\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-8eb65d40dc3111930ebb17153016d8917d0cec7a_008', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-8eb65d40dc3111930ebb17153016d8917d0cec7a_008" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">for</span> <span class="ID">key</span> <span class="ResWord">in</span> <span class="ID">token</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">dict</span><span class="Operator">[</span><span class="ID">key</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="ID">dict</span><span class="Operator">.</span><span class="ID">get</span><span class="Operator">(</span><span class="ID">key</span><span class="Operator">,</span> <span class="Number">0</span><span class="Operator">)</span> <span class="Operator">+</span> <span class="Number">1</span><span class="Text"/></span>
</pre></div><span id="line-204" class="anchor"/><span id="line-205" class="anchor"/><p class="line874">每次循环都要定位dict.get。如果这个方法一直不变，可这样实现以获取小小的性能提升： <span id="line-206" class="anchor"/><span id="line-207" class="anchor"/><span id="line-208" class="anchor"/><span id="line-209" class="anchor"/><span id="line-210" class="anchor"/><span id="line-211" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9fc74cfaaa7b4395017290565af4af825c2ec127_009\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-9fc74cfaaa7b4395017290565af4af825c2ec127_009', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-9fc74cfaaa7b4395017290565af4af825c2ec127_009" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">dict_get</span> <span class="Operator">=</span> <span class="ID">dict</span><span class="Operator">.</span><span class="ID">get</span>  <span class="Comment"># look up the method once</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">for</span> <span class="ID">key</span> <span class="ResWord">in</span> <span class="ID">token</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ID">dict</span><span class="Operator">[</span><span class="ID">key</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="ID">dict_get</span><span class="Operator">(</span><span class="ID">key</span><span class="Operator">,</span> <span class="Number">0</span><span class="Operator">)</span> <span class="Operator">+</span> <span class="Number">1</span><span class="Text"/></span>
</pre></div><span id="line-212" class="anchor"/><span id="line-213" class="anchor"/><p class="line874">默认参数可在编译期被一次赋值，而不是在运行期。这只适用于函数或对象在程序执行期间不被改变的情况，比如替换 <span id="line-214" class="anchor"/><span id="line-215" class="anchor"/><span id="line-216" class="anchor"/><span id="line-217" class="anchor"/><span id="line-218" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-aff07d7a82116bcd5721b3ea4c43b3ff3aec57f7_010\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-aff07d7a82116bcd5721b3ea4c43b3ff3aec57f7_010', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-aff07d7a82116bcd5721b3ea4c43b3ff3aec57f7_010" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">degree_sin</span><span class="Operator">(</span><span class="ID">deg</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">return</span> <span class="ID">math</span><span class="Operator">.</span><span class="ID">sin</span><span class="Operator">(</span><span class="ID">deg</span> <span class="Operator">*</span> <span class="ID">math</span><span class="Operator">.</span><span class="ID">pi</span> <span class="Operator">/</span> <span class="Number">180.0</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-219" class="anchor"/><span id="line-220" class="anchor"/><p class="line874">为 <span id="line-221" class="anchor"/><span id="line-222" class="anchor"/><span id="line-223" class="anchor"/><span id="line-224" class="anchor"/><span id="line-225" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-5e3d316c887b90c025105c99e9d3521206270e0c_011\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-5e3d316c887b90c025105c99e9d3521206270e0c_011', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-5e3d316c887b90c025105c99e9d3521206270e0c_011" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">degree_sin</span><span class="Operator">(</span><span class="ID">deg</span><span class="Operator">,</span> <span class="ID">factor</span> <span class="Operator">=</span> <span class="ID">math</span><span class="Operator">.</span><span class="ID">pi</span><span class="Operator">/</span><span class="Number">180.0</span><span class="Operator">,</span> <span class="ID">sin</span> <span class="Operator">=</span> <span class="ID">math</span><span class="Operator">.</span><span class="ID">sin</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">return</span> <span class="ID">sin</span><span class="Operator">(</span><span class="ID">deg</span> <span class="Operator">*</span> <span class="ID">factor</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-226" class="anchor"/><span id="line-227" class="anchor"/><p class="line874">因为这个技巧对常量变量使用了默认参数，因而需要保证传递给用户API时不会产生混乱。 <span id="line-228" class="anchor"/><span id="line-229" class="anchor"/></p><p class="line867">
</p><h2 id="head-0f342a0af40cd160b998c81e2fdf5f9ff2d6f3f4">1.2. 核心语言</h2>
<span id="line-230" class="anchor"/><span id="line-231" class="anchor"/><p class="line867">
</p><h3 id="head-7f90f86f09307c2c196d06427f574b02f1711455">1.2.1. 如何在一个函数中设置一个全局变量?</h3>
<span id="line-232" class="anchor"/><span id="line-233" class="anchor"/><p class="line874">你是否做过类似的事？ <span id="line-234" class="anchor"/><span id="line-235" class="anchor"/><span id="line-236" class="anchor"/><span id="line-237" class="anchor"/><span id="line-238" class="anchor"/><span id="line-239" class="anchor"/><span id="line-240" class="anchor"/><span id="line-241" class="anchor"/><span id="line-242" class="anchor"/><span id="line-243" class="anchor"/><span id="line-244" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-67975ac570623d6e2c7b611f8037a8a7b8cfa39c_012\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-67975ac570623d6e2c7b611f8037a8a7b8cfa39c_012', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-67975ac570623d6e2c7b611f8037a8a7b8cfa39c_012" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">x</span> <span class="Operator">=</span> <span class="Number">1</span> <span class="Comment"># make a global</span></span>
<span class="line"><span class="LineNumber">   3 </span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ResWord">def</span> <span class="ID">f</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>      <span class="ResWord">print</span> <span class="ID">x</span> <span class="Comment"># try to print the global</span></span>
<span class="line"><span class="LineNumber">   6 </span>      <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   7 </span>      <span class="ResWord">for</span> <span class="ID">j</span> <span class="ResWord">in</span> <span class="ID">range</span><span class="Operator">(</span><span class="Number">100</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   8 </span>           <span class="ResWord">if</span> <span class="ID">q</span><span class="Operator">></span><span class="Number">3</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   9 </span>              <span class="ID">x</span><span class="Operator">=</span><span class="Number">4</span><span class="Text"/></span>
</pre></div><span id="line-245" class="anchor"/><span id="line-246" class="anchor"/><p class="line862">任何函数内赋值的变量都是这个函数的local变量。除非它专门声明为global。作为函数体最后一个语句，x被赋值，因此编译器认为x为local变量。而语句print x 试图 print一个未初始化的local变量，因而会触发<a href="/moin/NameError" class="nonexistent">NameError</a> 异常。 <span id="line-247" class="anchor"/><span id="line-248" class="anchor"/></p><p class="line874">解决办法是在函数的开头插入一个明确的global声明。 <span id="line-249" class="anchor"/><span id="line-250" class="anchor"/><span id="line-251" class="anchor"/><span id="line-252" class="anchor"/><span id="line-253" class="anchor"/><span id="line-254" class="anchor"/><span id="line-255" class="anchor"/><span id="line-256" class="anchor"/><span id="line-257" class="anchor"/><span id="line-258" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9ce4e3ca84cc281a0dcedca62c24f46221aca455_013\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-9ce4e3ca84cc281a0dcedca62c24f46221aca455_013', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-9ce4e3ca84cc281a0dcedca62c24f46221aca455_013" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">f</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>      <span class="ResWord">global</span> <span class="ID">x</span></span>
<span class="line"><span class="LineNumber">   4 </span>      <span class="ResWord">print</span> <span class="ID">x</span> <span class="Comment"># try to print the global</span></span>
<span class="line"><span class="LineNumber">   5 </span>      <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   6 </span>      <span class="ResWord">for</span> <span class="ID">j</span> <span class="ResWord">in</span> <span class="ID">range</span><span class="Operator">(</span><span class="Number">100</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   7 </span>           <span class="ResWord">if</span> <span class="ID">q</span><span class="Operator">></span><span class="Number">3</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   8 </span>              <span class="ID">x</span><span class="Operator">=</span><span class="Number">4</span><span class="Text"/></span>
</pre></div><span id="line-259" class="anchor"/><span id="line-260" class="anchor"/><p class="line874">在这种情况下，所有对x的引用都是模块名称空间中的x。 <span id="line-261" class="anchor"/><span id="line-262" class="anchor"/></p><p class="line867">
</p><h3 id="head-601949c0da44e7d3a93d0911fac00ae1d7c041d2">1.2.2. python中local和global变量的规则是什么?</h3>
<span id="line-263" class="anchor"/><span id="line-264" class="anchor"/><p class="line874">在Python中, 某个变量在一个函数里只是被引用，则认为这个变量是global。如果函数体中变量在某个地方会被赋值，则认为这个变量是local。如果一个global变量在函数体中 被赋予新值，这个变量就会被认为是local，除非你明确地指明其为global。 <span id="line-265" class="anchor"/><span id="line-266" class="anchor"/></p><p class="line874">尽管有些惊讶，我们略微思考一下就会明白。一方面，对于被赋值的变量，用关键字 global 是为了防止意想不到的边界效应。另一方面，如果对所有的global引用都需要关键字global，则会不停地使用global关键字。需要在每次引用内建函数或一个import的模块时都声明global。global声明是用来确定边界效应的，而这 种混乱的用法会抵消这个作用。 <span id="line-267" class="anchor"/><span id="line-268" class="anchor"/></p><p class="line867">
</p><h3 id="head-b06ba605a4c846bd76630eba91b503ffedebdf4f">1.2.3. 如何在模块间共享global变量?</h3>
<span id="line-269" class="anchor"/><span id="line-270" class="anchor"/><p class="line874">在一个单独程序中，各模块间共享信息的标准方法是创建一个特殊的模块（常被命名为config和cfg）。仅需要在你程序中每个模块里import这个config模块。 因为每个模块只有一个实例，对这个模块的任何改变将会影响所有的地方。例如: <span id="line-271" class="anchor"/><span id="line-272" class="anchor"/></p><p class="line874">config.py: <span id="line-273" class="anchor"/><span id="line-274" class="anchor"/><span id="line-275" class="anchor"/><span id="line-276" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-dcebffde192daf346bcb701d9b8f91e4d0018940_014\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-dcebffde192daf346bcb701d9b8f91e4d0018940_014', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-dcebffde192daf346bcb701d9b8f91e4d0018940_014" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">x</span> <span class="Operator">=</span> <span class="Number">0</span>   <span class="Comment"># Default value of the 'x' configuration setting</span><span class="Text"/></span>
</pre></div><span id="line-277" class="anchor"/><span id="line-278" class="anchor"/><p class="line874">mod.py: <span id="line-279" class="anchor"/><span id="line-280" class="anchor"/><span id="line-281" class="anchor"/><span id="line-282" class="anchor"/><span id="line-283" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-eb5f9da75cd113d75380e369fa0dbfc7b635ecbb_015\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-eb5f9da75cd113d75380e369fa0dbfc7b635ecbb_015', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-eb5f9da75cd113d75380e369fa0dbfc7b635ecbb_015" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">import</span> <span class="ID">config</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ID">config</span><span class="Operator">.</span><span class="ID">x</span> <span class="Operator">=</span> <span class="Number">1</span><span class="Text"/></span>
</pre></div><span id="line-284" class="anchor"/><span id="line-285" class="anchor"/><p class="line874">main.py: <span id="line-286" class="anchor"/><span id="line-287" class="anchor"/><span id="line-288" class="anchor"/><span id="line-289" class="anchor"/><span id="line-290" class="anchor"/><span id="line-291" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-cb489ab8dd611ffa7002ccfe6ce49700b9e75081_016\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-cb489ab8dd611ffa7002ccfe6ce49700b9e75081_016', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-cb489ab8dd611ffa7002ccfe6ce49700b9e75081_016" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">import</span> <span class="ID">config</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">import</span> <span class="ID">mod</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ResWord">print</span> <span class="ID">config</span><span class="Operator">.</span><span class="ID">x</span><span class="Text"/></span>
</pre></div><span id="line-292" class="anchor"/><span id="line-293" class="anchor"/><p class="line874">注意，由于同样的原因，使用模块也是实现Singleton设计模式的基础。 <span id="line-294" class="anchor"/><span id="line-295" class="anchor"/></p><p class="line867">
</p><h3 id="head-bf7347bab63287f5edc39261dba385ec27d74b46">1.2.4. 什么是import模块的最好方式?</h3>
<span id="line-296" class="anchor"/><span id="line-297" class="anchor"/><p class="line874">通常情况下，不要使用from modulename import * 这种格式。这样做会使引入者的namespace混乱。很多人甚至对于那些专门设计用于这种模式的模块都不采用这种方式。被设计成这种模式的模块包括Tkinter, 和threading. <span id="line-298" class="anchor"/><span id="line-299" class="anchor"/></p><p class="line874">在一个文件的开头引入模块。这样做使得你的你的代码需要哪些模块变得清晰，并且避免了模块名称是否存在的问题。 在每行只使用一次import使得添加和删除模块import更加容易，但每行多个import则减少屏幕空间的使用。 <span id="line-300" class="anchor"/><span id="line-301" class="anchor"/></p><p class="line874">应该按照以下顺序import模块： <span id="line-302" class="anchor"/><span id="line-303" class="anchor"/><span id="line-304" class="anchor"/></p><ol type="1"><li>标准库模块 -- 如 sys, os, getopt 等 <span id="line-305" class="anchor"/><span id="line-306" class="anchor"/></li><li class="gap"><p class="line862">第三方模块(安装在python的site-packages目录下) -- 如 mx.<a href="/moin/DateTime" class="nonexistent">DateTime</a>, ZODB, PIL.Image, 等。 <span id="line-307" class="anchor"/><span id="line-308" class="anchor"/></p></li><li class="gap">本地实现的模块。 <span id="line-309" class="anchor"/><span id="line-310" class="anchor"/><span id="line-311" class="anchor"/></li></ol><p class="line874">不要使用相对的import。如果你在编写package.sub.m1 模块的代码并想 import package.sub.m2, 不要只是 import m2, 即使这样是合法的。用 from package.sub import m2 代替. 相对的imports会导致模块被初始化两次，并产生奇怪的bug。 <span id="line-312" class="anchor"/><span id="line-313" class="anchor"/></p><p class="line862">有时需要将import语句移到函数或类中来防止import循环。 Gordon <a href="/moin/McMillan" class="nonexistent">McMillan</a> 说: <span id="line-314" class="anchor"/><span id="line-315" class="anchor"/><span id="line-316" class="anchor"/></p><ul><li style="list-style-type: none;"><p class="line862">在两个模块都使用 "import <module>" 格式时是没问题的 。但若第二个模块想要获取第一个模块以外的一个名称("from module import name")且这个import语句位于最顶层时，则会产生错误 。因为这时第一个模块的名称并不处于有效状态，因为第一个模块正忙于import第二个模块。 <span id="line-317" class="anchor"/><span id="line-318" class="anchor"/><span id="line-319" class="anchor"/></p></li></ul><p class="line874">在这种情况下，如果第二个模块只是用在一个函数中，那么可以简单地把import移入到这个函数中。当这个import被调用时，第一个模块已经完成了初始化，而第二个模块 则可以完成它的import语句了。 <span id="line-320" class="anchor"/><span id="line-321" class="anchor"/></p><p class="line874">如果某些模块是系统相关的，那么将import移出顶层代码也是必要的。在那种情况下，甚至不可能在文件的顶层import所有的模块。在这种情况下，在对应的系统相关代码中引入这些模块则是个好的选择。 <span id="line-322" class="anchor"/><span id="line-323" class="anchor"/></p><p class="line874">在解决诸如防止import循环或试图减少模块初始化时间等问题，且诸多模块并不需要依赖程序是如何执行的情况下，这种方法尤其有用。如果模块只是被用在某个函数中，你也可以将import移到这个函数中。注意首次import模块会花费较多的时间，但多次地import则几乎不会再花去额外的时间，而只是需要两次的字典查询操作。即使模块名称已经处在scope外，这个模块也很有可能 仍处在sys.modules中。 <span id="line-324" class="anchor"/><span id="line-325" class="anchor"/></p><p class="line862">如果只是某个类的实例使用某个模块，则应该在类的<tt class="backtick">__init__</tt> 方法里import模块并把这个模块赋给一个实例变量以使这个模块在对象的整个生命周期内一直有效（通过这个实例变量）。注意要使import推迟到类的实例化，必须将import放入某个方法中。在类里所有方法之外的地方放置import语句，仍然会 使模块初始化的时候执行import。 <span id="line-326" class="anchor"/><span id="line-327" class="anchor"/></p><p class="line867">
</p><h3 id="head-5678f55ec761564dd1ba71c23edfa061fadc6e5b">1.2.5. 如何将某个函数的选项或键值参数传递到另一个函数?</h3>
<span id="line-328" class="anchor"/><span id="line-329" class="anchor"/><p class="line874">在函数的参数列表中使用 * 和 ** ；它将你的位置参数作为一个tuple，将键值参数作为一个字典。当调用另一个函数时你可以通过使用 * 和 **来传递这些参数： <span id="line-330" class="anchor"/><span id="line-331" class="anchor"/><span id="line-332" class="anchor"/><span id="line-333" class="anchor"/><span id="line-334" class="anchor"/><span id="line-335" class="anchor"/><span id="line-336" class="anchor"/><span id="line-337" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-69ce94899ec7e334438b0979e243e8f0d81e8d95_017\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-69ce94899ec7e334438b0979e243e8f0d81e8d95_017', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-69ce94899ec7e334438b0979e243e8f0d81e8d95_017" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">f</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator">,</span> <span class="Operator">*</span><span class="ID">tup</span><span class="Operator">,</span> <span class="Operator">**</span><span class="ID">kwargs</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>        <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="ID">kwargs</span><span class="Operator">[</span><span class="String">'width'</span><span class="Operator">]</span><span class="Operator">=</span><span class="String">'14.3c'</span></span>
<span class="line"><span class="LineNumber">   5 </span>        <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   6 </span>        <span class="ID">g</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator">,</span> <span class="Operator">*</span><span class="ID">tup</span><span class="Operator">,</span> <span class="Operator">**</span><span class="ID">kwargs</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-338" class="anchor"/><span id="line-339" class="anchor"/><p class="line874">如果考虑到比python的2.0更老的版本的特殊情况，使用'apply': <span id="line-340" class="anchor"/><span id="line-341" class="anchor"/><span id="line-342" class="anchor"/><span id="line-343" class="anchor"/><span id="line-344" class="anchor"/><span id="line-345" class="anchor"/><span id="line-346" class="anchor"/><span id="line-347" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-dc716c538abd4053ab25bd030a00c78b491e2df3_018\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-dc716c538abd4053ab25bd030a00c78b491e2df3_018', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-dc716c538abd4053ab25bd030a00c78b491e2df3_018" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">f</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator">,</span> <span class="Operator">*</span><span class="ID">tup</span><span class="Operator">,</span> <span class="Operator">**</span><span class="ID">kwargs</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>        <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="ID">kwargs</span><span class="Operator">[</span><span class="String">'width'</span><span class="Operator">]</span><span class="Operator">=</span><span class="String">'14.3c'</span></span>
<span class="line"><span class="LineNumber">   5 </span>        <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   6 </span>        <span class="ID">apply</span><span class="Operator">(</span><span class="ID">g</span><span class="Operator">,</span> <span class="Operator">(</span><span class="ID">x</span><span class="Operator">,</span><span class="Operator">)</span><span class="Operator">+</span><span class="ID">tup</span><span class="Operator">,</span> <span class="ID">kwargs</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-348" class="anchor"/><span id="line-349" class="anchor"/><p class="line867">
</p><h3 id="head-4d72bbd641392f485cba43751b65d7470fa675dc">1.2.6. 如何编写一个带有输出参数的函数（传引用调用）?</h3>
<span id="line-350" class="anchor"/><span id="line-351" class="anchor"/><p class="line874">记住在python中参数传递是动过赋值实现的。因为赋值仅是创建一个新的对对象的引用，所以在调用者和被调用者之间没有任何的别名可以使用，因此从本质上说没有传引用调用。但你可以通过一系列的方法来实现这个效果。 <span id="line-352" class="anchor"/><span id="line-353" class="anchor"/><span id="line-354" class="anchor"/></p><ol type="1"><li> <span id="line-355" class="anchor"/><ul><li style="list-style-type: none;">对结果传递一个tuple: <span id="line-356" class="anchor"/><span id="line-357" class="anchor"/><span id="line-358" class="anchor"/><span id="line-359" class="anchor"/><span id="line-360" class="anchor"/><span id="line-361" class="anchor"/><span id="line-362" class="anchor"/><span id="line-363" class="anchor"/><span id="line-364" class="anchor"/><span id="line-365" class="anchor"/><span id="line-366" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-8e7619362f26fbd59b4ca6f400f93aac6ee935fd_019\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-8e7619362f26fbd59b4ca6f400f93aac6ee935fd_019', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-8e7619362f26fbd59b4ca6f400f93aac6ee935fd_019" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">func2</span><span class="Operator">(</span><span class="ID">a</span><span class="Operator">,</span> <span class="ID">b</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">a</span> <span class="Operator">=</span> <span class="String">'new-value'</span>        <span class="Comment"># a and b are local names</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ID">b</span> <span class="Operator">=</span> <span class="ID">b</span> <span class="Operator">+</span> <span class="Number">1</span>              <span class="Comment"># assigned to new objects</span></span>
<span class="line"><span class="LineNumber">   5 </span>    <span class="ResWord">return</span> <span class="ID">a</span><span class="Operator">,</span> <span class="ID">b</span>            <span class="Comment"># return new values</span></span>
<span class="line"><span class="LineNumber">   6 </span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="ID">x</span><span class="Operator">,</span> <span class="ID">y</span> <span class="Operator">=</span> <span class="String">'old-value'</span><span class="Operator">,</span> <span class="Number">99</span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="ID">x</span><span class="Operator">,</span> <span class="ID">y</span> <span class="Operator">=</span> <span class="ID">func2</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator">,</span> <span class="ID">y</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   9 </span><span class="ResWord">print</span> <span class="ID">x</span><span class="Operator">,</span> <span class="ID">y</span>                 <span class="Comment"># output: new-value 100</span><span class="Text"/></span>
</pre></div><span id="line-367" class="anchor"/><span id="line-368" class="anchor"/>这通常是最清晰的方法。 <span id="line-369" class="anchor"/><span id="line-370" class="anchor"/><span id="line-371" class="anchor"/></li></ul></li><li class="gap"> <span id="line-372" class="anchor"/><ul><li style="list-style-type: none;">通过使用global变量。这不是线程安全的，所以不推荐。 <span id="line-373" class="anchor"/><span id="line-374" class="anchor"/><span id="line-375" class="anchor"/></li></ul></li><li class="gap"> <span id="line-376" class="anchor"/><ul><li style="list-style-type: none;">传递一个可变对象: <span id="line-377" class="anchor"/><span id="line-378" class="anchor"/><span id="line-379" class="anchor"/><span id="line-380" class="anchor"/><span id="line-381" class="anchor"/><span id="line-382" class="anchor"/><span id="line-383" class="anchor"/><span id="line-384" class="anchor"/><span id="line-385" class="anchor"/><span id="line-386" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-ef0bdf9a7236b062f3d4a1dfe6735a0f5e725c1e_020\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-ef0bdf9a7236b062f3d4a1dfe6735a0f5e725c1e_020', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-ef0bdf9a7236b062f3d4a1dfe6735a0f5e725c1e_020" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">func1</span><span class="Operator">(</span><span class="ID">a</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">a</span><span class="Operator">[</span><span class="Number">0</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="String">'new-value'</span>     <span class="Comment"># 'a' references a mutable list</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ID">a</span><span class="Operator">[</span><span class="Number">1</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="ID">a</span><span class="Operator">[</span><span class="Number">1</span><span class="Operator">]</span> <span class="Operator">+</span> <span class="Number">1</span>        <span class="Comment"># changes a shared object</span></span>
<span class="line"><span class="LineNumber">   5 </span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="ID">args</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="String">'old-value'</span><span class="Operator">,</span> <span class="Number">99</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="ID">func1</span><span class="Operator">(</span><span class="ID">args</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="ResWord">print</span> <span class="ID">args</span><span class="Operator">[</span><span class="Number">0</span><span class="Operator">]</span><span class="Operator">,</span> <span class="ID">args</span><span class="Operator">[</span><span class="Number">1</span><span class="Operator">]</span>     <span class="Comment"># output: new-value 100</span><span class="Text"/></span>
</pre></div><span id="line-387" class="anchor"/><span id="line-388" class="anchor"/><span id="line-389" class="anchor"/></li></ul></li><li class="gap"> <span id="line-390" class="anchor"/><ul><li style="list-style-type: none;">传递一个可变字典： <span id="line-391" class="anchor"/><span id="line-392" class="anchor"/><span id="line-393" class="anchor"/><span id="line-394" class="anchor"/><span id="line-395" class="anchor"/><span id="line-396" class="anchor"/><span id="line-397" class="anchor"/><span id="line-398" class="anchor"/><span id="line-399" class="anchor"/><span id="line-400" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-ed932102a0340ff682791dfc70ead8edff72f198_021\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-ed932102a0340ff682791dfc70ead8edff72f198_021', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-ed932102a0340ff682791dfc70ead8edff72f198_021" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">func3</span><span class="Operator">(</span><span class="ID">args</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">args</span><span class="Operator">[</span><span class="String">'a'</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="String">'new-value'</span>     <span class="Comment"># args is a mutable dictionary</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ID">args</span><span class="Operator">[</span><span class="String">'b'</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="ID">args</span><span class="Operator">[</span><span class="String">'b'</span><span class="Operator">]</span> <span class="Operator">+</span> <span class="Number">1</span>   <span class="Comment"># change it in-place</span></span>
<span class="line"><span class="LineNumber">   5 </span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="ID">args</span> <span class="Operator">=</span> <span class="Operator">{</span><span class="String">'a'</span><span class="Operator">:</span><span class="String">' old-value'</span><span class="Operator">,</span> <span class="String">'b'</span><span class="Operator">:</span> <span class="Number">99</span><span class="Operator">}</span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="ID">func3</span><span class="Operator">(</span><span class="ID">args</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="ResWord">print</span> <span class="ID">args</span><span class="Operator">[</span><span class="String">'a'</span><span class="Operator">]</span><span class="Operator">,</span> <span class="ID">args</span><span class="Operator">[</span><span class="String">'b'</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-401" class="anchor"/><span id="line-402" class="anchor"/><span id="line-403" class="anchor"/></li></ul></li><li class="gap"> <span id="line-404" class="anchor"/><ul><li style="list-style-type: none;">或者是将它绑定在一个类的实例中： <span id="line-405" class="anchor"/><span id="line-406" class="anchor"/><span id="line-407" class="anchor"/><span id="line-408" class="anchor"/><span id="line-409" class="anchor"/><span id="line-410" class="anchor"/><span id="line-411" class="anchor"/><span id="line-412" class="anchor"/><span id="line-413" class="anchor"/><span id="line-414" class="anchor"/><span id="line-415" class="anchor"/><span id="line-416" class="anchor"/><span id="line-417" class="anchor"/><span id="line-418" class="anchor"/><span id="line-419" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-46bfedaa6581d05b181199c3082808cbb1100e5d_022\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-46bfedaa6581d05b181199c3082808cbb1100e5d_022', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-46bfedaa6581d05b181199c3082808cbb1100e5d_022" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">callByRef</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="Operator">**</span><span class="ID">args</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="ResWord">for</span> <span class="Operator">(</span><span class="ID">key</span><span class="Operator">,</span> <span class="ID">value</span><span class="Operator">)</span> <span class="ResWord">in</span> <span class="ID">args</span><span class="Operator">.</span><span class="ID">items</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>            <span class="ID">setattr</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">key</span><span class="Operator">,</span> <span class="ID">value</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   6 </span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="ResWord">def</span> <span class="ID">func4</span><span class="Operator">(</span><span class="ID">args</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   8 </span>    <span class="ID">args</span><span class="Operator">.</span><span class="ID">a</span> <span class="Operator">=</span> <span class="String">'new-value'</span>        <span class="Comment"># args is a mutable callByRef</span></span>
<span class="line"><span class="LineNumber">   9 </span>    <span class="ID">args</span><span class="Operator">.</span><span class="ID">b</span> <span class="Operator">=</span> <span class="ID">args</span><span class="Operator">.</span><span class="ID">b</span> <span class="Operator">+</span> <span class="Number">1</span>         <span class="Comment"># change object in-place</span></span>
<span class="line"><span class="LineNumber">  10 </span></span>
<span class="line"><span class="LineNumber">  11 </span><span class="ID">args</span> <span class="Operator">=</span> <span class="ID">callByRef</span><span class="Operator">(</span><span class="ID">a</span><span class="Operator">=</span><span class="String">'old-value'</span><span class="Operator">,</span> <span class="ID">b</span><span class="Operator">=</span><span class="Number">99</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  12 </span><span class="ID">func4</span><span class="Operator">(</span><span class="ID">args</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  13 </span><span class="ResWord">print</span> <span class="ID">args</span><span class="Operator">.</span><span class="ID">a</span><span class="Operator">,</span> <span class="ID">args</span><span class="Operator">.</span><span class="ID">b</span><span class="Text"/></span>
</pre></div><span id="line-420" class="anchor"/><span id="line-421" class="anchor"/>但这样会使程序变得复杂，并不是一个好方法。 <span id="line-422" class="anchor"/><span id="line-423" class="anchor"/><span id="line-424" class="anchor"/><span id="line-425" class="anchor"/></li></ul></li></ol><p class="line874">最好的方法还是返回一个包含多个结果的tuple。 <span id="line-426" class="anchor"/><span id="line-427" class="anchor"/></p><p class="line867">
</p><h3 id="head-fbd2a62070574dfad0d7c3c6a6f83167a3b74de6">1.2.7. 如何使用python中更高 阶的函数?</h3>
<span id="line-428" class="anchor"/><span id="line-429" class="anchor"/><p class="line874">有两个选择：你可以使用内嵌的方式或使用可调用对象。比如，假设你想定义 linear(a,b)， <span id="line-430" class="anchor"/><span id="line-431" class="anchor"/></p><p class="line874">它返回计算a*x+b 的函数f(x)。使用内嵌的方法： <span id="line-432" class="anchor"/><span id="line-433" class="anchor"/><span id="line-434" class="anchor"/><span id="line-435" class="anchor"/><span id="line-436" class="anchor"/><span id="line-437" class="anchor"/><span id="line-438" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-1f88d7f712308ea216b7b96ea8092c7c7faf3e75_023\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-1f88d7f712308ea216b7b96ea8092c7c7faf3e75_023', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-1f88d7f712308ea216b7b96ea8092c7c7faf3e75_023" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">linear</span><span class="Operator">(</span><span class="ID">a</span><span class="Operator">,</span><span class="ID">b</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">def</span> <span class="ID">result</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="ResWord">return</span> <span class="ID">a</span><span class="Operator">*</span><span class="ID">x</span> <span class="Operator">+</span> <span class="ID">b</span></span>
<span class="line"><span class="LineNumber">   5 </span>    <span class="ResWord">return</span> <span class="ID">result</span><span class="Text"/></span>
</pre></div><span id="line-439" class="anchor"/><span id="line-440" class="anchor"/><p class="line874">或者使用可调用的类: <span id="line-441" class="anchor"/><span id="line-442" class="anchor"/><span id="line-443" class="anchor"/><span id="line-444" class="anchor"/><span id="line-445" class="anchor"/><span id="line-446" class="anchor"/><span id="line-447" class="anchor"/><span id="line-448" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9c6c42a1ffc649723a5c2993cb81ccaf2f386cb6_024\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-9c6c42a1ffc649723a5c2993cb81ccaf2f386cb6_024', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-9c6c42a1ffc649723a5c2993cb81ccaf2f386cb6_024" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">linear</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>   <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">a</span><span class="Operator">,</span> <span class="ID">b</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>       <span class="ID">self</span><span class="Operator">.</span><span class="ID">a</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">b</span> <span class="Operator">=</span> <span class="ID">a</span><span class="Operator">,</span><span class="ID">b</span></span>
<span class="line"><span class="LineNumber">   5 </span>   <span class="ResWord">def</span> <span class="ID">__call__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">x</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>       <span class="ResWord">return</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">a</span> <span class="Operator">*</span> <span class="ID">x</span> <span class="Operator">+</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">b</span><span class="Text"/></span>
</pre></div><span id="line-449" class="anchor"/><span id="line-450" class="anchor"/><p class="line874">两种方法都是： <span id="line-451" class="anchor"/><span id="line-452" class="anchor"/><span id="line-453" class="anchor"/><span id="line-454" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9f5720323a60abd9b1cb9212c6731ece0f14d2f8_025\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-9f5720323a60abd9b1cb9212c6731ece0f14d2f8_025', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-9f5720323a60abd9b1cb9212c6731ece0f14d2f8_025" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">taxes</span> <span class="Operator">=</span> <span class="ID">linear</span><span class="Operator">(</span><span class="Number">0.3</span><span class="Operator">,</span><span class="Number">2</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-455" class="anchor"/><span id="line-456" class="anchor"/><p class="line874">给出一个可调用对象，taxes(10e6)  0.3 * 10e6 + 2。 <span id="line-457" class="anchor"/><span id="line-458" class="anchor"/></p><p class="line874">用可调用对象的方法有个缺点，那就是这样做会慢一些且代码也会长一些。但是，注意到一系列的可调用对象可通过继承共享信号。 <span id="line-459" class="anchor"/><span id="line-460" class="anchor"/><span id="line-461" class="anchor"/><span id="line-462" class="anchor"/><span id="line-463" class="anchor"/><span id="line-464" class="anchor"/><span id="line-465" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-6b8440cbd5b914636c1bd386ee9bc93ea0704fa3_026\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-6b8440cbd5b914636c1bd386ee9bc93ea0704fa3_026', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-6b8440cbd5b914636c1bd386ee9bc93ea0704fa3_026" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">exponential</span><span class="Operator">(</span><span class="ID">linear</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>   <span class="Comment"># __init__ inherited</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="Comment"/>   <span class="ResWord">def</span> <span class="ID">__call__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">x</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>       <span class="ResWord">return</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">a</span> <span class="Operator">*</span> <span class="Operator">(</span><span class="ID">x</span> <span class="Operator">**</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">b</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-466" class="anchor"/><span id="line-467" class="anchor"/><p class="line874">对象可以对若干方法封装状态信息： <span id="line-468" class="anchor"/><span id="line-469" class="anchor"/><span id="line-470" class="anchor"/><span id="line-471" class="anchor"/><span id="line-472" class="anchor"/><span id="line-473" class="anchor"/><span id="line-474" class="anchor"/><span id="line-475" class="anchor"/><span id="line-476" class="anchor"/><span id="line-477" class="anchor"/><span id="line-478" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-78dbdefe5a36b43d4c00f081720231c57c857140_027\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-78dbdefe5a36b43d4c00f081720231c57c857140_027', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-78dbdefe5a36b43d4c00f081720231c57c857140_027" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">counter</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">value</span> <span class="Operator">=</span> <span class="Number">0</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ResWord">def</span> <span class="ID">set</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">x</span><span class="Operator">)</span><span class="Operator">:</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">value</span> <span class="Operator">=</span> <span class="ID">x</span></span>
<span class="line"><span class="LineNumber">   5 </span>    <span class="ResWord">def</span> <span class="ID">up</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">value</span><span class="Operator">=</span><span class="ID">self</span><span class="Operator">.</span><span class="ID">value</span><span class="Operator">+</span><span class="Number">1</span></span>
<span class="line"><span class="LineNumber">   6 </span>    <span class="ResWord">def</span> <span class="ID">down</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">value</span><span class="Operator">=</span><span class="ID">self</span><span class="Operator">.</span><span class="ID">value</span><span class="Operator">-</span><span class="Number">1</span></span>
<span class="line"><span class="LineNumber">   7 </span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="ID">count</span> <span class="Operator">=</span> <span class="ID">counter</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   9 </span><span class="ID">inc</span><span class="Operator">,</span> <span class="ID">dec</span><span class="Operator">,</span> <span class="ID">reset</span> <span class="Operator">=</span> <span class="ID">count</span><span class="Operator">.</span><span class="ID">up</span><span class="Operator">,</span> <span class="ID">count</span><span class="Operator">.</span><span class="ID">down</span><span class="Operator">,</span> <span class="ID">count</span><span class="Operator">.</span><span class="ID">set</span><span class="Text"/></span>
</pre></div><span id="line-479" class="anchor"/><span id="line-480" class="anchor"/><p class="line874">这里inc(), dec() 和 reset() 运性起来就像是一组共享相同计数变量的函数。 <span id="line-481" class="anchor"/><span id="line-482" class="anchor"/></p><p class="line867">
</p><h3 id="head-b620223b7ed89a104d5394d2e4b91767d68cb57a">1.2.8. 如何在python中复制一个对象?</h3>
<span id="line-483" class="anchor"/><span id="line-484" class="anchor"/><p class="line874">通常，使用copy.copy() 或 copy.deepcopy()。并不是所有的对象都可以被复制，但大多数是可以的。 <span id="line-485" class="anchor"/><span id="line-486" class="anchor"/></p><p class="line874">某些对象可以被简单地多的方法复制。字典有个copy() 方法: <span id="line-487" class="anchor"/><span id="line-488" class="anchor"/><span id="line-489" class="anchor"/><span id="line-490" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-bdbe21df74f7ec4b05770b0ebb0f6831816d72b7_028\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-bdbe21df74f7ec4b05770b0ebb0f6831816d72b7_028', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-bdbe21df74f7ec4b05770b0ebb0f6831816d72b7_028" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">newdict</span> <span class="Operator">=</span> <span class="ID">olddict</span><span class="Operator">.</span><span class="ID">copy</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-491" class="anchor"/><span id="line-492" class="anchor"/><p class="line874">序列可以通过slicing来复制: <span id="line-493" class="anchor"/><span id="line-494" class="anchor"/><span id="line-495" class="anchor"/><span id="line-496" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-6e9cc915504f54eed658041132ab91c4a9b1d30f_029\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-6e9cc915504f54eed658041132ab91c4a9b1d30f_029', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-6e9cc915504f54eed658041132ab91c4a9b1d30f_029" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">new_l</span> <span class="Operator">=</span> <span class="ID">l</span><span class="Operator">[</span><span class="Operator">:</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-497" class="anchor"/><span id="line-498" class="anchor"/><p class="line867">
</p><h3 id="head-05d97c2a731fe35b1e0cac6e43fb8b5db4d60ed1">1.2.9. 如何查看某个对象的方法和属性?</h3>
<span id="line-499" class="anchor"/><span id="line-500" class="anchor"/><p class="line874">对于一个用户定义的类的实例x，dir(x) 返回一个按字母排序的列表，其中包含了这个实例的属性和方法，类的属性。 <span id="line-501" class="anchor"/><span id="line-502" class="anchor"/></p><p class="line867">
</p><h3 id="head-22f078422b0ef4741a519dd09310ca68b363fd2f">1.2.10. 如何在运行时查看某个对象的名称?</h3>
<span id="line-503" class="anchor"/><span id="line-504" class="anchor"/><p class="line874">一般来说是不行的，因为实际上对象并没有名称。实质上，赋值经常将一个名称绑定到一个值；对于def 和 class 语句也是一样, 但在那种情况下这个变量是可调用的。考虑以下代码： <span id="line-505" class="anchor"/><span id="line-506" class="anchor"/><span id="line-507" class="anchor"/><span id="line-508" class="anchor"/><span id="line-509" class="anchor"/><span id="line-510" class="anchor"/><span id="line-511" class="anchor"/><span id="line-512" class="anchor"/><span id="line-513" class="anchor"/><span id="line-514" class="anchor"/><span id="line-515" class="anchor"/><span id="line-516" class="anchor"/><span id="line-517" class="anchor"/><span id="line-518" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-bdc0afe4417afdd88245228b4ccc42d0753e7b60_030\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-bdc0afe4417afdd88245228b4ccc42d0753e7b60_030', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-bdc0afe4417afdd88245228b4ccc42d0753e7b60_030" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">A</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">pass</span></span>
<span class="line"><span class="LineNumber">   4 </span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="ID">B</span> <span class="Operator">=</span> <span class="ID">A</span></span>
<span class="line"><span class="LineNumber">   6 </span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="ID">a</span> <span class="Operator">=</span> <span class="ID">B</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="ID">b</span> <span class="Operator">=</span> <span class="ID">a</span></span>
<span class="line"><span class="LineNumber">   9 </span><span class="ResWord">print</span> <span class="ID">b</span></span>
<span class="line"><span class="LineNumber">  10 </span><span class="Operator"><</span><span class="ID">__main__</span><span class="Operator">.</span><span class="ID">A</span> <span class="ID">instance</span> <span class="ID">at</span> <span class="Number">016</span><span class="ID">D07CC</span><span class="Operator">></span></span>
<span class="line"><span class="LineNumber">  11 </span><span class="ResWord">print</span> <span class="ID">a</span></span>
<span class="line"><span class="LineNumber">  12 </span><span class="Operator"><</span><span class="ID">__main__</span><span class="Operator">.</span><span class="ID">A</span> <span class="ID">instance</span> <span class="ID">at</span> <span class="Number">016</span><span class="ID">D07CC</span><span class="Operator">></span><span class="Text"/></span>
</pre></div><span id="line-519" class="anchor"/><span id="line-520" class="anchor"/><p class="line874">理论上这个类有名称：尽管它被绑定到两个名称，通过名称B进行调用，这个新创建的实例仍然被作为是类A的实例。但是，因为两个名称都被绑定到同样的值，因此说这个实例的名称到底是A还是B是不可能的。 <span id="line-521" class="anchor"/><span id="line-522" class="anchor"/></p><p class="line874">一般来说，让你的代码知道特定对象的名称并不是必要的。除非去特意地编写一个自省程序，否则这往往意味着需要改变一下代码。 <span id="line-523" class="anchor"/><span id="line-524" class="anchor"/></p><p class="line874">在comp.lang.python, Fredrik Lundh 曾经给出了一个极好的解答： <span id="line-525" class="anchor"/><span id="line-526" class="anchor"/><span id="line-527" class="anchor"/></p><ul><li style="list-style-type: none;">就好像在你家走廊发现一只猫，而你想知道它的名字：这只猫（对象）不会告诉你它的名字，它实际上也不在乎 —— 所以唯一的方法就是问你的邻居们（名称空间namespace）…… <span id="line-528" class="anchor"/><span id="line-529" class="anchor"/></li><li style="list-style-type: none;" class="gap">...如果你发现它有很多名字或根本就没有名字的话也不要惊讶！ <span id="line-530" class="anchor"/><span id="line-531" class="anchor"/><span id="line-532" class="anchor"/></li></ul><p class="line867">
</p><h3 id="head-8ca82be5b2e43a167e3ba0dd1c940025442762a0">1.2.11. 是否有类似C的 "?:" 三元操作符?</h3>
<span id="line-533" class="anchor"/><span id="line-534" class="anchor"/><p class="line874">没有。在很多情况下你可以用"a and b or c"模拟 a?b:c with , 但这样做有个缺陷：如果b是zero(或 empty, 或 None -- 只要为false) 则c被选择。在很多情况下你可以查看代码以保证这种情况不会发生(例如，因为b是个常数或是一种永远不会为false的类型), 但是通常来书它的确是个问题。 <span id="line-535" class="anchor"/><span id="line-536" class="anchor"/></p><p class="line874">Tim Peters (本人希望是Steve Majewski) 有以下建议: (a and [b] or [c])[0]. 因为 [b] 是一个永远不会为false的列表，所以错误的情况不会发生；然后对整个表达式使用 [0] 来得到想要的b或者c。很难看，但在你重写代码并且使用'if'很不方便的情况下，这种方式是有效的。 <span id="line-537" class="anchor"/><span id="line-538" class="anchor"/></p><p class="line874">最好的方式还是用 if...else 语句。另一种方法就是用一个函数来实现 "?:" 操作符： <span id="line-539" class="anchor"/><span id="line-540" class="anchor"/><span id="line-541" class="anchor"/><span id="line-542" class="anchor"/><span id="line-543" class="anchor"/><span id="line-544" class="anchor"/><span id="line-545" class="anchor"/><span id="line-546" class="anchor"/><span id="line-547" class="anchor"/><span id="line-548" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-e9999d9147ce0586bb5069bd716ff695c2481f22_031\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-e9999d9147ce0586bb5069bd716ff695c2481f22_031', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-e9999d9147ce0586bb5069bd716ff695c2481f22_031" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">q</span><span class="Operator">(</span><span class="ID">cond</span><span class="Operator">,</span><span class="ID">on_true</span><span class="Operator">,</span><span class="ID">on_false</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">if</span> <span class="ID">cond</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="ResWord">if</span> <span class="ResWord">not</span> <span class="ID">isfunction</span><span class="Operator">(</span><span class="ID">on_true</span><span class="Operator">)</span><span class="Operator">:</span> <span class="ResWord">return</span> <span class="ID">on_true</span></span>
<span class="line"><span class="LineNumber">   5 </span>        <span class="ResWord">else</span><span class="Operator">:</span> <span class="ResWord">return</span> <span class="ID">apply</span><span class="Operator">(</span><span class="ID">on_true</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   6 </span>    <span class="ResWord">else</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   7 </span>        <span class="ResWord">if</span> <span class="ResWord">not</span> <span class="ID">isfunction</span><span class="Operator">(</span><span class="ID">on_false</span><span class="Operator">)</span><span class="Operator">:</span> <span class="ResWord">return</span> <span class="ID">on_false</span></span>
<span class="line"><span class="LineNumber">   8 </span>        <span class="ResWord">else</span><span class="Operator">:</span> <span class="ResWord">return</span> <span class="ID">apply</span><span class="Operator">(</span><span class="ID">on_false</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-549" class="anchor"/><span id="line-550" class="anchor"/><p class="line874">在大多数情况下，你会直接传递b和c: q(a,b,c)。为防止在不合适的情况下计算 b 或者 c，用一个lambda函数封装它们，例如：q(a,lambda: b, lambda: c)。 <span id="line-551" class="anchor"/><span id="line-552" class="anchor"/></p><p class="line874">为什么python没有if-then-else表达式。有几个回答： 很多语言在没有这个的情况下也工作得很好；它会减少可读代码的数量；还没有足够多的python风格的语法；通过对标准库的搜索，发现几乎没有这种情况：通过使用 if-then-else 表达式让代码的可读性更好。 <span id="line-553" class="anchor"/><span id="line-554" class="anchor"/></p><p class="line862">在 2002年, <a href="http://www.python.org/peps/pep-0308.html" class="http">PEP 308</a> 提交了若干语法建议，整个社区对此进行了一次非决定性的投票。很多人喜欢某个语法而反对另外的语法；投票结果表明，很多人宁愿没有三元操作符，也不愿意创建一种新的令人讨厌的语法，。 <span id="line-555" class="anchor"/><span id="line-556" class="anchor"/></p><p class="line867">
</p><h3 id="head-b862f9bc3f8b996830bab8a85f77ec755744a3b6">1.2.12. 能不能在python中编写复杂的行程序?</h3>
<span id="line-557" class="anchor"/><span id="line-558" class="anchor"/><p class="line874">是的。这经常发生在将lambda嵌入到lambda的情况，根据 Ulf Bartelt，有以下三个例子: <span id="line-559" class="anchor"/><span id="line-560" class="anchor"/><span id="line-561" class="anchor"/><span id="line-562" class="anchor"/><span id="line-563" class="anchor"/><span id="line-564" class="anchor"/><span id="line-565" class="anchor"/><span id="line-566" class="anchor"/><span id="line-567" class="anchor"/><span id="line-568" class="anchor"/><span id="line-569" class="anchor"/><span id="line-570" class="anchor"/><span id="line-571" class="anchor"/><span id="line-572" class="anchor"/><span id="line-573" class="anchor"/><span id="line-574" class="anchor"/><span id="line-575" class="anchor"/><span id="line-576" class="anchor"/><span id="line-577" class="anchor"/><span id="line-578" class="anchor"/><span id="line-579" class="anchor"/><span id="line-580" class="anchor"/><span id="line-581" class="anchor"/><span id="line-582" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-c589ab76083bdfb074bfbcd41150ec9c9f0444b3_032\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-c589ab76083bdfb074bfbcd41150ec9c9f0444b3_032', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-c589ab76083bdfb074bfbcd41150ec9c9f0444b3_032" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Comment"># Primes < 1000</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Comment"/><span class="ResWord">print</span> <span class="ID">filter</span><span class="Operator">(</span><span class="ID">None</span><span class="Operator">,</span><span class="ID">map</span><span class="Operator">(</span><span class="ResWord">lambda</span> <span class="ID">y</span><span class="Operator">:</span><span class="ID">y</span><span class="Operator">*</span><span class="ID">reduce</span><span class="Operator">(</span><span class="ResWord">lambda</span> <span class="ID">x</span><span class="Operator">,</span><span class="ID">y</span><span class="Operator">:</span><span class="ID">x</span><span class="Operator">*</span><span class="ID">y</span><span class="Operator">!=</span><span class="Number">0</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ID">map</span><span class="Operator">(</span><span class="ResWord">lambda</span> <span class="ID">x</span><span class="Operator">,</span><span class="ID">y</span><span class="Operator">=</span><span class="ID">y</span><span class="Operator">:</span><span class="ID">y</span><span class="Operator">%</span><span class="ID">x</span><span class="Operator">,</span><span class="ID">range</span><span class="Operator">(</span><span class="Number">2</span><span class="Operator">,</span><span class="ID">int</span><span class="Operator">(</span><span class="ID">pow</span><span class="Operator">(</span><span class="ID">y</span><span class="Operator">,</span><span class="Number">0.5</span><span class="Operator">)</span><span class="Operator">+</span><span class="Number">1</span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">,</span><span class="Number">1</span><span class="Operator">)</span><span class="Operator">,</span><span class="ID">range</span><span class="Operator">(</span><span class="Number">2</span><span class="Operator">,</span><span class="Number">1000</span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   5 </span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="Comment"># First 10 Fibonacci numbers</span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="Comment"/><span class="ResWord">print</span> <span class="ID">map</span><span class="Operator">(</span><span class="ResWord">lambda</span> <span class="ID">x</span><span class="Operator">,</span><span class="ID">f</span><span class="Operator">=</span><span class="ResWord">lambda</span> <span class="ID">x</span><span class="Operator">,</span><span class="ID">f</span><span class="Operator">:</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator"><=</span><span class="Number">1</span><span class="Operator">)</span> <span class="ResWord">or</span> <span class="Operator">(</span><span class="ID">f</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator">-</span><span class="Number">1</span><span class="Operator">,</span><span class="ID">f</span><span class="Operator">)</span><span class="Operator">+</span><span class="ID">f</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator">-</span><span class="Number">2</span><span class="Operator">,</span><span class="ID">f</span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">:</span> <span class="ID">f</span><span class="Operator">(</span><span class="ID">x</span><span class="Operator">,</span><span class="ID">f</span><span class="Operator">)</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="ID">range</span><span class="Operator">(</span><span class="Number">10</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   9 </span></span>
<span class="line"><span class="LineNumber">  10 </span><span class="Comment"># Mandelbrot set</span></span>
<span class="line"><span class="LineNumber">  11 </span><span class="Comment"/><span class="ResWord">print</span> <span class="Operator">(</span><span class="ResWord">lambda</span> <span class="ID">Ru</span><span class="Operator">,</span><span class="ID">Ro</span><span class="Operator">,</span><span class="ID">Iu</span><span class="Operator">,</span><span class="ID">Io</span><span class="Operator">,</span><span class="ID">IM</span><span class="Operator">,</span><span class="ID">Sx</span><span class="Operator">,</span><span class="ID">Sy</span><span class="Operator">:</span><span class="ID">reduce</span><span class="Operator">(</span><span class="ResWord">lambda</span> <span class="ID">x</span><span class="Operator">,</span><span class="ID">y</span><span class="Operator">:</span><span class="ID">x</span><span class="Operator">+</span><span class="ID">y</span><span class="Operator">,</span><span class="ID">map</span><span class="Operator">(</span><span class="ResWord">lambda</span> <span class="ID">y</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  12 </span><span class="ID">Iu</span><span class="Operator">=</span><span class="ID">Iu</span><span class="Operator">,</span><span class="ID">Io</span><span class="Operator">=</span><span class="ID">Io</span><span class="Operator">,</span><span class="ID">Ru</span><span class="Operator">=</span><span class="ID">Ru</span><span class="Operator">,</span><span class="ID">Ro</span><span class="Operator">=</span><span class="ID">Ro</span><span class="Operator">,</span><span class="ID">Sy</span><span class="Operator">=</span><span class="ID">Sy</span><span class="Operator">,</span><span class="ID">L</span><span class="Operator">=</span><span class="ResWord">lambda</span> <span class="ID">yc</span><span class="Operator">,</span><span class="ID">Iu</span><span class="Operator">=</span><span class="ID">Iu</span><span class="Operator">,</span><span class="ID">Io</span><span class="Operator">=</span><span class="ID">Io</span><span class="Operator">,</span><span class="ID">Ru</span><span class="Operator">=</span><span class="ID">Ru</span><span class="Operator">,</span><span class="ID">Ro</span><span class="Operator">=</span><span class="ID">Ro</span><span class="Operator">,</span><span class="ID">i</span><span class="Operator">=</span><span class="ID">IM</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  13 </span><span class="ID">Sx</span><span class="Operator">=</span><span class="ID">Sx</span><span class="Operator">,</span><span class="ID">Sy</span><span class="Operator">=</span><span class="ID">Sy</span><span class="Operator">:</span><span class="ID">reduce</span><span class="Operator">(</span><span class="ResWord">lambda</span> <span class="ID">x</span><span class="Operator">,</span><span class="ID">y</span><span class="Operator">:</span><span class="ID">x</span><span class="Operator">+</span><span class="ID">y</span><span class="Operator">,</span><span class="ID">map</span><span class="Operator">(</span><span class="ResWord">lambda</span> <span class="ID">x</span><span class="Operator">,</span><span class="ID">xc</span><span class="Operator">=</span><span class="ID">Ru</span><span class="Operator">,</span><span class="ID">yc</span><span class="Operator">=</span><span class="ID">yc</span><span class="Operator">,</span><span class="ID">Ru</span><span class="Operator">=</span><span class="ID">Ru</span><span class="Operator">,</span><span class="ID">Ro</span><span class="Operator">=</span><span class="ID">Ro</span><span class="Operator">,</span></span>
<span class="line"><span class="LineNumber">  14 </span><span class="ID">i</span><span class="Operator">=</span><span class="ID">i</span><span class="Operator">,</span><span class="ID">Sx</span><span class="Operator">=</span><span class="ID">Sx</span><span class="Operator">,</span><span class="ID">F</span><span class="Operator">=</span><span class="ResWord">lambda</span> <span class="ID">xc</span><span class="Operator">,</span><span class="ID">yc</span><span class="Operator">,</span><span class="ID">x</span><span class="Operator">,</span><span class="ID">y</span><span class="Operator">,</span><span class="ID">k</span><span class="Operator">,</span><span class="ID">f</span><span class="Operator">=</span><span class="ResWord">lambda</span> <span class="ID">xc</span><span class="Operator">,</span><span class="ID">yc</span><span class="Operator">,</span><span class="ID">x</span><span class="Operator">,</span><span class="ID">y</span><span class="Operator">,</span><span class="ID">k</span><span class="Operator">,</span><span class="ID">f</span><span class="Operator">:</span><span class="Operator">(</span><span class="ID">k</span><span class="Operator"><=</span><span class="Number">0</span><span class="Operator">)</span><span class="ResWord">or</span> <span class="Operator">(</span><span class="ID">x</span><span class="Operator">*</span><span class="ID">x</span><span class="Operator">+</span><span class="ID">y</span><span class="Operator">*</span><span class="ID">y</span></span>
<span class="line"><span class="LineNumber">  15 </span><span class="Operator">>=</span><span class="Number">4.0</span><span class="Operator">)</span> <span class="ResWord">or</span> <span class="Number">1</span><span class="Operator">+</span><span class="ID">f</span><span class="Operator">(</span><span class="ID">xc</span><span class="Operator">,</span><span class="ID">yc</span><span class="Operator">,</span><span class="ID">x</span><span class="Operator">*</span><span class="ID">x</span><span class="Operator">-</span><span class="ID">y</span><span class="Operator">*</span><span class="ID">y</span><span class="Operator">+</span><span class="ID">xc</span><span class="Operator">,</span><span class="Number">2.0</span><span class="Operator">*</span><span class="ID">x</span><span class="Operator">*</span><span class="ID">y</span><span class="Operator">+</span><span class="ID">yc</span><span class="Operator">,</span><span class="ID">k</span><span class="Operator">-</span><span class="Number">1</span><span class="Operator">,</span><span class="ID">f</span><span class="Operator">)</span><span class="Operator">:</span><span class="ID">f</span><span class="Operator">(</span><span class="ID">xc</span><span class="Operator">,</span><span class="ID">yc</span><span class="Operator">,</span><span class="ID">x</span><span class="Operator">,</span><span class="ID">y</span><span class="Operator">,</span><span class="ID">k</span><span class="Operator">,</span><span class="ID">f</span><span class="Operator">)</span><span class="Operator">:</span><span class="ID">chr</span><span class="Operator">(</span></span>
<span class="line"><span class="LineNumber">  16 </span><span class="Number">64</span><span class="Operator">+</span><span class="ID">F</span><span class="Operator">(</span><span class="ID">Ru</span><span class="Operator">+</span><span class="ID">x</span><span class="Operator">*</span><span class="Operator">(</span><span class="ID">Ro</span><span class="Operator">-</span><span class="ID">Ru</span><span class="Operator">)</span><span class="Operator">/</span><span class="ID">Sx</span><span class="Operator">,</span><span class="ID">yc</span><span class="Operator">,</span><span class="Number">0</span><span class="Operator">,</span><span class="Number">0</span><span class="Operator">,</span><span class="ID">i</span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">,</span><span class="ID">range</span><span class="Operator">(</span><span class="ID">Sx</span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">:</span><span class="ID">L</span><span class="Operator">(</span><span class="ID">Iu</span><span class="Operator">+</span><span class="ID">y</span><span class="Operator">*</span><span class="Operator">(</span><span class="ID">Io</span><span class="Operator">-</span><span class="ID">Iu</span><span class="Operator">)</span><span class="Operator">/</span><span class="ID">Sy</span><span class="Operator">)</span><span class="Operator">,</span><span class="ID">range</span><span class="Operator">(</span><span class="ID">Sy</span></span>
<span class="line"><span class="LineNumber">  17 </span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">)</span><span class="Operator">(</span><span class="Operator">-</span><span class="Number">2.1</span><span class="Operator">,</span> <span class="Number">0.7</span><span class="Operator">,</span> <span class="Operator">-</span><span class="Number">1.2</span><span class="Operator">,</span> <span class="Number">1.2</span><span class="Operator">,</span> <span class="Number">30</span><span class="Operator">,</span> <span class="Number">80</span><span class="Operator">,</span> <span class="Number">24</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  18 </span><span class="Comment">#    \___ ___  \___ ___  |   |   |__ lines on screen</span></span>
<span class="line"><span class="LineNumber">  19 </span><span class="Comment"/><span class="Comment">#        V          V      |   |______ columns on screen</span></span>
<span class="line"><span class="LineNumber">  20 </span><span class="Comment"/><span class="Comment">#        |          |      |__________ maximum of "iterations"</span></span>
<span class="line"><span class="LineNumber">  21 </span><span class="Comment"/><span class="Comment">#        |          |_________________ range on y axis</span></span>
<span class="line"><span class="LineNumber">  22 </span><span class="Comment"/><span class="Comment">#        |____________________________ range on x axis</span><span class="Text"/></span>
</pre></div><span id="line-583" class="anchor"/><span id="line-584" class="anchor"/><p class="line874">小朋友不要在家里尝试这个！ <span id="line-585" class="anchor"/><span id="line-586" class="anchor"/></p><p class="line867">
</p><h2 id="head-746c0f27d6dc2c6724b30c94e5c291f5340e1cee">1.3. 数字和字符串</h2>
<span id="line-587" class="anchor"/><span id="line-588" class="anchor"/><p class="line867">
</p><h3 id="head-0fe1b64e2d6f503a6f89cb3fab3dc6928b2267cf">1.3.1. 如何指定十六进制和八进制整数?</h3>
<span id="line-589" class="anchor"/><span id="line-590" class="anchor"/><p class="line874">要指定一个八进制数字，在八进制之前加个0。例如，将a设置成八进制的10，输入： <span id="line-591" class="anchor"/><span id="line-592" class="anchor"/><span id="line-593" class="anchor"/><span id="line-594" class="anchor"/><span id="line-595" class="anchor"/><span id="line-596" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-c66975dd4cdd16aebc945e5721f9a85510d45d52_033\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-c66975dd4cdd16aebc945e5721f9a85510d45d52_033', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-c66975dd4cdd16aebc945e5721f9a85510d45d52_033" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">a</span> <span class="Operator">=</span> <span class="Number">010</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">a</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="Number">8</span><span class="Text"/></span>
</pre></div><span id="line-597" class="anchor"/><span id="line-598" class="anchor"/><p class="line874">十六进制也很简单。在十六进制前加个0x。十六进制数可以大写也可以小写。比如，在python解释器中: <span id="line-599" class="anchor"/><span id="line-600" class="anchor"/><span id="line-601" class="anchor"/><span id="line-602" class="anchor"/><span id="line-603" class="anchor"/><span id="line-604" class="anchor"/><span id="line-605" class="anchor"/><span id="line-606" class="anchor"/><span id="line-607" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-dc8cccf1867e11068f1bb344922c11a759343f94_034\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-dc8cccf1867e11068f1bb344922c11a759343f94_034', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-dc8cccf1867e11068f1bb344922c11a759343f94_034" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">a</span> <span class="Operator">=</span> <span class="Number">0xa5</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">a</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="Number">165</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">b</span> <span class="Operator">=</span> <span class="Number">0XB2</span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">b</span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="Number">178</span><span class="Text"/></span>
</pre></div><span id="line-608" class="anchor"/><span id="line-609" class="anchor"/><p class="line867">
</p><h3 id="head-57d2b5db5f04e4e892c9d1435574c26802dc15d3">1.3.2. 为什么 -22 / 10 返回 -3?</h3>
<span id="line-610" class="anchor"/><span id="line-611" class="anchor"/><p class="line874">这是因为 i%j 跟 j 为同样类型。如果你想那样，且又想： <span id="line-612" class="anchor"/><span id="line-613" class="anchor"/><span id="line-614" class="anchor"/><span id="line-615" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-2e9ca01693f10dc23c1f68847bc463a335a67f7e_035\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-2e9ca01693f10dc23c1f68847bc463a335a67f7e_035', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-2e9ca01693f10dc23c1f68847bc463a335a67f7e_035" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">i</span>  <span class="Operator">(</span><span class="ID">i</span><span class="Operator">/</span><span class="ID">j</span><span class="Operator">)</span><span class="Operator">*</span><span class="ID">j</span> <span class="Operator">+</span> <span class="Operator">(</span><span class="ID">i</span><span class="Operator">%</span><span class="ID">j</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-616" class="anchor"/><span id="line-617" class="anchor"/><p class="line874">那么整数除法就必须返回一个浮点值。C也有这个要求，编译器截断i/j，并使i的类型和i%j一样。 <span id="line-618" class="anchor"/><span id="line-619" class="anchor"/></p><p class="line862">在实际应用中， i%j 的j是负数的可能性很小。当j是正数时，多数情况（实际上是所有情况）下i%j >= 0是很有用的。 如果现在是10点，那么200小时以前是多少？ -190 % 12  2 是正确的，而-190 % 12  -10 则是个bug。 <span id="line-620" class="anchor"/><span id="line-621" class="anchor"/></p><p class="line867">
</p><h3 id="head-92a726c05954e2e5db3e5920414de713e248879e">1.3.3. 如何将一个字符串转换成数字?</h3>
<span id="line-622" class="anchor"/><span id="line-623" class="anchor"/><p class="line874">对于整数，使用内建的 int() 类型构造器, 例如 int('144')  144。类似的，float() 转换成浮点数，例如 float('144')  144.0。 <span id="line-624" class="anchor"/><span id="line-625" class="anchor"/></p><p class="line862">默认的，这些数字被解释成十进制，所以 int('0144')  144 而 int('0x144') 则抛出<a href="/moin/ValueError" class="nonexistent">ValueError</a>异常。 int(string, base) 提供了第二个参数来指定类型，所以int('0x144', 16)  324。 <span id="line-626" class="anchor"/><span id="line-627" class="anchor"/></p><p class="line874">如果base被指定为0，则会按python的规则来解释：开头为一个 '0' 表示八进制，而 '0x' 表示十六进制。 <span id="line-628" class="anchor"/><span id="line-629" class="anchor"/></p><p class="line862">如果你只是将字符串转换成数字，不用使用内建函数 eval()。eval()会慢很多并 有安全风险：某人传递给python一个表达式，可能会有意想不到的边界效应。例如，某人传递 <tt class="backtick">__import__</tt>('os').system("rm -rf $HOME") 会清除掉你的home目录。 <span id="line-630" class="anchor"/><span id="line-631" class="anchor"/></p><p class="line874">eval() <span id="line-632" class="anchor"/><span id="line-633" class="anchor"/></p><p class="line874">也能将数字解释成为python表达式，所以 eval('09') 会给出一个语法错误，因为python将开头为'0'的数字认为是八进制(base 8)。 <span id="line-634" class="anchor"/><span id="line-635" class="anchor"/></p><p class="line867">
</p><h3 id="head-2279cef4a680f2924a66baad2e6b42719a0db0aa">1.3.4. 如何将数字转换成字符串?</h3>
<span id="line-636" class="anchor"/><span id="line-637" class="anchor"/><p class="line874">比如，数字144转换成字符串 '144', 使用内建函数 str()。 如果想用八进制或十六进制表示，使用内建函数hex() 或 oct()。对于格式化，使用 [../../doc/lib/typesseq-strings.html % operator] ，比如，"%04d" % 144 为 '0144' ， "%.3f" % (1/3.0) 为 '0.333'。更多细节查看库参考手册。 <span id="line-638" class="anchor"/><span id="line-639" class="anchor"/></p><p class="line867">
</p><h3 id="head-a8e6e6f8c9d03d6c291a8bc8d2f76bebc7b12859">1.3.5. 如何在字符串的特定位置进行修改?</h3>
<span id="line-640" class="anchor"/><span id="line-641" class="anchor"/><p class="line874">不能，因为字符串是不可改的。如果你确实需要一个具有这个能力的对象，将字符串转换成列表或使用数组模块： <span id="line-642" class="anchor"/><span id="line-643" class="anchor"/><span id="line-644" class="anchor"/><span id="line-645" class="anchor"/><span id="line-646" class="anchor"/><span id="line-647" class="anchor"/><span id="line-648" class="anchor"/><span id="line-649" class="anchor"/><span id="line-650" class="anchor"/><span id="line-651" class="anchor"/><span id="line-652" class="anchor"/><span id="line-653" class="anchor"/><span id="line-654" class="anchor"/><span id="line-655" class="anchor"/><span id="line-656" class="anchor"/><span id="line-657" class="anchor"/><span id="line-658" class="anchor"/><span id="line-659" class="anchor"/><span id="line-660" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-d32681a571851d034e3e919d8449f44632596eee_036\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-d32681a571851d034e3e919d8449f44632596eee_036', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-d32681a571851d034e3e919d8449f44632596eee_036" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">s</span> <span class="Operator">=</span> <span class="String">"Hello, world"</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">a</span> <span class="Operator">=</span> <span class="ID">list</span><span class="Operator">(</span><span class="ID">s</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ResWord">print</span> <span class="ID">a</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Operator">[</span><span class="String">'H'</span><span class="Operator">,</span> <span class="String">'e'</span><span class="Operator">,</span> <span class="String">'l'</span><span class="Operator">,</span> <span class="String">'l'</span><span class="Operator">,</span> <span class="String">'o'</span><span class="Operator">,</span> <span class="String">','</span><span class="Operator">,</span> <span class="String">' '</span><span class="Operator">,</span> <span class="String">'w'</span><span class="Operator">,</span> <span class="String">'o'</span><span class="Operator">,</span> <span class="String">'r'</span><span class="Operator">,</span> <span class="String">'l'</span><span class="Operator">,</span> <span class="String">'d'</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">a</span><span class="Operator">[</span><span class="Number">7</span><span class="Operator">:</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="ID">list</span><span class="Operator">(</span><span class="String">"there!"</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="Operator">>></span><span class="Operator">></span> <span class="String">''</span><span class="Operator">.</span><span class="ID">join</span><span class="Operator">(</span><span class="ID">a</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="String">'Hello, there!'</span></span>
<span class="line"><span class="LineNumber">   9 </span></span>
<span class="line"><span class="LineNumber">  10 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ResWord">import</span> <span class="ID">array</span></span>
<span class="line"><span class="LineNumber">  11 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">a</span> <span class="Operator">=</span> <span class="ID">array</span><span class="Operator">.</span><span class="ID">array</span><span class="Operator">(</span><span class="String">'c'</span><span class="Operator">,</span> <span class="ID">s</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  12 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ResWord">print</span> <span class="ID">a</span></span>
<span class="line"><span class="LineNumber">  13 </span><span class="ID">array</span><span class="Operator">(</span><span class="String">'c'</span><span class="Operator">,</span> <span class="String">'Hello, world'</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  14 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">a</span><span class="Operator">[</span><span class="Number">0</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="String">'y'</span> <span class="Operator">;</span> <span class="ResWord">print</span> <span class="ID">a</span></span>
<span class="line"><span class="LineNumber">  15 </span><span class="ID">array</span><span class="Operator">(</span><span class="String">'c'</span><span class="Operator">,</span> <span class="String">'yello world'</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  16 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">a</span><span class="Operator">.</span><span class="ID">tostring</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  17 </span><span class="String">'yello, world'</span><span class="Text"/></span>
</pre></div><span id="line-661" class="anchor"/><span id="line-662" class="anchor"/><p class="line867">
</p><h3 id="head-4d576976e59b1462cdd9ce9df8c787b8dc35512f">1.3.6. 如何使用字符串来调用函数/方法?</h3>
<span id="line-663" class="anchor"/><span id="line-664" class="anchor"/><p class="line874">这里有几种方式： <span id="line-665" class="anchor"/><span id="line-666" class="anchor"/><span id="line-667" class="anchor"/></p><ul><li>最好的一种就是使用字典将字符串映射到函数。这种方法的最大好处就是字符串不用匹配函数的名称。这也是模拟case construct的主要方式： <span id="line-668" class="anchor"/><ul><li style="list-style-type: none;"><span id="line-669" class="anchor"/><span id="line-670" class="anchor"/><span id="line-671" class="anchor"/><span id="line-672" class="anchor"/><span id="line-673" class="anchor"/><span id="line-674" class="anchor"/><span id="line-675" class="anchor"/><span id="line-676" class="anchor"/><span id="line-677" class="anchor"/><span id="line-678" class="anchor"/><span id="line-679" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-14c23bc8a1ca86ba2173522592819af60c897c0a_037\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-14c23bc8a1ca86ba2173522592819af60c897c0a_037', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-14c23bc8a1ca86ba2173522592819af60c897c0a_037" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">a</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">pass</span></span>
<span class="line"><span class="LineNumber">   4 </span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="ResWord">def</span> <span class="ID">b</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>    <span class="ResWord">pass</span></span>
<span class="line"><span class="LineNumber">   7 </span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="ID">dispatch</span> <span class="Operator">=</span> <span class="Operator">{</span><span class="String">'go'</span><span class="Operator">:</span> <span class="ID">a</span><span class="Operator">,</span> <span class="String">'stop'</span><span class="Operator">:</span> <span class="ID">b</span><span class="Operator">}</span>  <span class="Comment"># Note lack of parens for funcs</span></span>
<span class="line"><span class="LineNumber">   9 </span></span>
<span class="line"><span class="LineNumber">  10 </span><span class="ID">dispatch</span><span class="Operator">[</span><span class="ID">get_input</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">]</span><span class="Operator">(</span><span class="Operator">)</span>  <span class="Comment"># Note trailing parens to call function</span><span class="Text"/></span>
</pre></div><span id="line-680" class="anchor"/><span id="line-681" class="anchor"/><span id="line-682" class="anchor"/></li></ul></li><li class="gap">使用内建函数getattr(): <span id="line-683" class="anchor"/><ul><li style="list-style-type: none;"><span id="line-684" class="anchor"/><span id="line-685" class="anchor"/><span id="line-686" class="anchor"/><span id="line-687" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-46685622cb03e733d1b243efd2debb29622cffc2_038\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-46685622cb03e733d1b243efd2debb29622cffc2_038', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-46685622cb03e733d1b243efd2debb29622cffc2_038" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">import</span> <span class="ID">foo</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ID">getattr</span><span class="Operator">(</span><span class="ID">foo</span><span class="Operator">,</span> <span class="String">'bar'</span><span class="Operator">)</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-688" class="anchor"/><span id="line-689" class="anchor"/>注意，getattr()可工作于任何对象，包括类，类实例，模块等。 <span id="line-690" class="anchor"/><span id="line-691" class="anchor"/>这种方法被用在标准库中的若干地方，就像： <span id="line-692" class="anchor"/><span id="line-693" class="anchor"/><span id="line-694" class="anchor"/><span id="line-695" class="anchor"/><span id="line-696" class="anchor"/><span id="line-697" class="anchor"/><span id="line-698" class="anchor"/><span id="line-699" class="anchor"/><span id="line-700" class="anchor"/><span id="line-701" class="anchor"/><span id="line-702" class="anchor"/><span id="line-703" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-315bb01cab43b9d5c0148a8e88b588ad8af1f7e4_039\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-315bb01cab43b9d5c0148a8e88b588ad8af1f7e4_039', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-315bb01cab43b9d5c0148a8e88b588ad8af1f7e4_039" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">Foo</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">def</span> <span class="ID">do_foo</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   5 </span></span>
<span class="line"><span class="LineNumber">   6 </span>    <span class="ResWord">def</span> <span class="ID">do_bar</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   7 </span>        <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   8 </span></span>
<span class="line"><span class="LineNumber">   9 </span><span class="ID">f</span> <span class="Operator">=</span> <span class="ID">getattr</span><span class="Operator">(</span><span class="ID">foo_instance</span><span class="Operator">,</span> <span class="String">'do_'</span> <span class="Operator">+</span> <span class="ID">opname</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  10 </span><span class="ID">f</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-704" class="anchor"/><span id="line-705" class="anchor"/><span id="line-706" class="anchor"/></li></ul></li><li class="gap">使用locals() 或 eval() 来获得函数名称： <span id="line-707" class="anchor"/><ul><li style="list-style-type: none;"><span id="line-708" class="anchor"/><span id="line-709" class="anchor"/><span id="line-710" class="anchor"/><span id="line-711" class="anchor"/><span id="line-712" class="anchor"/><span id="line-713" class="anchor"/><span id="line-714" class="anchor"/><span id="line-715" class="anchor"/><span id="line-716" class="anchor"/><span id="line-717" class="anchor"/><span id="line-718" class="anchor"/><span id="line-719" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-582834b218e487a6dd65309450769fef13e38b2c_040\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-582834b218e487a6dd65309450769fef13e38b2c_040', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-582834b218e487a6dd65309450769fef13e38b2c_040" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">myFunc</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">print</span> <span class="String">"hello"</span></span>
<span class="line"><span class="LineNumber">   4 </span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="ID">fname</span> <span class="Operator">=</span> <span class="String">"myFunc"</span></span>
<span class="line"><span class="LineNumber">   6 </span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="ID">f</span> <span class="Operator">=</span> <span class="ID">locals</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">[</span><span class="ID">fname</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="ID">f</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   9 </span></span>
<span class="line"><span class="LineNumber">  10 </span><span class="ID">f</span> <span class="Operator">=</span> <span class="ID">eval</span><span class="Operator">(</span><span class="ID">fname</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  11 </span><span class="ID">f</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-720" class="anchor"/><span id="line-721" class="anchor"/>注意：使用eval() 慢而且危险。如果你对字符串的内容没有绝对控制权，其他人可能传递一个字符串而导致某个任意的函数被执行。 <span id="line-722" class="anchor"/><span id="line-723" class="anchor"/><span id="line-724" class="anchor"/><span id="line-725" class="anchor"/></li></ul></li></ul><p class="line867">
</p><h3 id="head-dc494059dfb1851f9ba2b635ff6e6ab0ccf51702">1.3.7. 是否有跟Perl中的chomp()类似的函数，用来去除字符串结尾处的新行符?</h3>
<span id="line-726" class="anchor"/><span id="line-727" class="anchor"/><p class="line874">从Python 2.2起，可以使用S.rstrip("\r\n") 来去除字符串S结尾处的任何行符，而不会去除结尾处的其它空白符。如果字符串S并不只是一行，并在末尾有若干个空行，所有空行的行符都会被去除： <span id="line-728" class="anchor"/><span id="line-729" class="anchor"/><span id="line-730" class="anchor"/><span id="line-731" class="anchor"/><span id="line-732" class="anchor"/><span id="line-733" class="anchor"/><span id="line-734" class="anchor"/><span id="line-735" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-d05daec64e6efd2f816700079cec1be911efcc08_041\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-d05daec64e6efd2f816700079cec1be911efcc08_041', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-d05daec64e6efd2f816700079cec1be911efcc08_041" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">lines</span> <span class="Operator">=</span> <span class="Operator">(</span><span class="String">"line 1 \r\n"</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span>          <span class="String">"\r\n"</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span>          <span class="String">"\r\n"</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">lines</span><span class="Operator">.</span><span class="ID">rstrip</span><span class="Operator">(</span><span class="String">"\n\r"</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="String">"line 1 "</span><span class="Text"/></span>
</pre></div><span id="line-736" class="anchor"/><span id="line-737" class="anchor"/><p class="line874">当程序每次只能读取一行数据时，这样使用S.rstrip() 是很合适的。 <span id="line-738" class="anchor"/><span id="line-739" class="anchor"/></p><p class="line874">对于老版本的Python, 分别有两个替代方法： <span id="line-740" class="anchor"/><span id="line-741" class="anchor"/><span id="line-742" class="anchor"/></p><ul><li>如果想去除所有的结尾空白符，使用字符串对象的 rstrip() 方法。这样会去掉所有的结尾空白符，而不只是一个新行符。 <span id="line-743" class="anchor"/><span id="line-744" class="anchor"/></li><li class="gap">另外，如果在字符串S中只有一行，使用 S.splitlines()[0]。 <span id="line-745" class="anchor"/><span id="line-746" class="anchor"/><span id="line-747" class="anchor"/></li></ul><p class="line867">
</p><h3 id="head-55f6fa8189ed8d368e4a134cb9954aae7171c096">1.3.8. 是否有实现 scanf() 或 sscanf() 功能的函数?</h3>
<span id="line-748" class="anchor"/><span id="line-749" class="anchor"/><p class="line874">没有。 <span id="line-750" class="anchor"/><span id="line-751" class="anchor"/></p><p class="line874">对于简单的输入分析，最简单的方法就是用string对象的 split() 将输入行分割成若干用空格分割的单词，然后用 int() 或float()将数字字符串转换成数字。split() 支持可选参数 "sep" 用来处理分隔符不是空格的情况。 <span id="line-752" class="anchor"/><span id="line-753" class="anchor"/></p><p class="line874">对于更复杂的输入分析，正则表达式比C的sscanf() 更强大和更合适。 <span id="line-754" class="anchor"/><span id="line-755" class="anchor"/></p><p class="line867">
</p><h3 id="head-1c84495cbcdc073ad88f662372728d22fc66bee8">1.3.9. 'UnicodeError: ASCII [decoding,encoding] error: ordinal not in range(128)' 是什么意思?</h3>
<span id="line-756" class="anchor"/><span id="line-757" class="anchor"/><p class="line874">这个错误表明python只能处理 7-bit 的 ASCII 字符串。这里有几种方法可以解决这个问题。 <span id="line-758" class="anchor"/><span id="line-759" class="anchor"/></p><p class="line874">如果程序需要处理任意编码的数据，程序的运行环境一般都会指定它传给你的数据的编码。你需要用那个编码将输入数据转换成 Unicode 数据。例如，一个处理 email 或web输入的程序会在 Content-Type 头里发现字符编码信息。在稍后将数据转换成Unicode时会使用到这个信息。假设通过 value 引用的字符串的编码为 UTF-8： <span id="line-760" class="anchor"/><span id="line-761" class="anchor"/><span id="line-762" class="anchor"/><span id="line-763" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-6e5cdf2101da67ada557e8049621353eeefbc2b3_042\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-6e5cdf2101da67ada557e8049621353eeefbc2b3_042', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-6e5cdf2101da67ada557e8049621353eeefbc2b3_042" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">value</span> <span class="Operator">=</span> <span class="ID">unicode</span><span class="Operator">(</span><span class="ID">value</span><span class="Operator">,</span> <span class="String">"utf-8"</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-764" class="anchor"/><span id="line-765" class="anchor"/><p class="line862">会返回一个 Unicode 对象。如果数据没有被正确地用 UTF-8 编码，那么这个调用会触发一个 <a href="/moin/UnicodeError" class="nonexistent">UnicodeError</a> 异常。 <span id="line-766" class="anchor"/><span id="line-767" class="anchor"/></p><p class="line874">如果你只是想把非 ASCII 的数据转换成 Unicode，你可以首先假定为 ASCII 编码，如果失败再产生 Unicode 对象。 <span id="line-768" class="anchor"/><span id="line-769" class="anchor"/><span id="line-770" class="anchor"/><span id="line-771" class="anchor"/><span id="line-772" class="anchor"/><span id="line-773" class="anchor"/><span id="line-774" class="anchor"/><span id="line-775" class="anchor"/><span id="line-776" class="anchor"/><span id="line-777" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-8de5772defabab6f1982b7a4cdf430bebf8df0d8_043\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-8de5772defabab6f1982b7a4cdf430bebf8df0d8_043', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-8de5772defabab6f1982b7a4cdf430bebf8df0d8_043" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">try</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">x</span> <span class="Operator">=</span> <span class="ID">unicode</span><span class="Operator">(</span><span class="ID">value</span><span class="Operator">,</span> <span class="String">"ascii"</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ResWord">except</span> <span class="ID">UnicodeError</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>    <span class="ID">value</span> <span class="Operator">=</span> <span class="ID">unicode</span><span class="Operator">(</span><span class="ID">value</span><span class="Operator">,</span> <span class="String">"utf-8"</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="ResWord">else</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   7 </span>    <span class="Comment"># value was valid ASCII data</span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="Comment"/>    <span class="ResWord">pass</span><span class="Text"/></span>
</pre></div><span id="line-778" class="anchor"/><span id="line-779" class="anchor"/><p class="line874">可以在python库中的一个叫sitecustomize.py 的文件中设定默认编码。但并不推荐这样 ，因为改变这个全局值可能会导致第三方的扩展模块出错。 <span id="line-780" class="anchor"/><span id="line-781" class="anchor"/></p><p class="line874">注意，在 Windows 上有一种编码为 "mbcs"，它是根据你目前的locale使用编码。在很多情况下，尤其是跟 COM 一起工作的情况下，这是个合适的默认编码。 <span id="line-782" class="anchor"/><span id="line-783" class="anchor"/></p><p class="line867">
</p><h2 id="head-22cefbfc2d1ad0ee425e22ae7696365b6125aeb3">1.4. 序列 (Tuples/Lists)</h2>
<span id="line-784" class="anchor"/><span id="line-785" class="anchor"/><p class="line867">
</p><h3 id="head-c3fb02eae4aa2cc6e201814b3e1a80e8d918edd7">1.4.1. 如何在 tuples 和 lists 之间转换?</h3>
<span id="line-786" class="anchor"/><span id="line-787" class="anchor"/><p class="line874">函数 tuple(seq) 将任何序列(实际上,任何可遍历的对象)转换成一个tuple，并有着同样的元素和顺序。 <span id="line-788" class="anchor"/><span id="line-789" class="anchor"/></p><p class="line874">例如，tuple([1, 2, 3]) 得到 (1, 2, 3)，而 tuple('abc') 得到 ('a', 'b', 'c')。 如果参数就是一个 tuple, 则不做任何复制而返回相同的对象，所以当你不确定一个对象是否是tuple时调用tuple()也没有额外的开销。 <span id="line-790" class="anchor"/><span id="line-791" class="anchor"/></p><p class="line874">函数 list(seq) 将任何序列或任何可遍历的对象转换成一个list，并有着同样的元素和顺序。比如 list((1, 2, 3)) 得到 [1, 2, 3]，而 list('abc') 得到 ['a', 'b', 'c']。 如果参数就是一个列表，则执行一个复制操作，就像 seq[:] 一样。 <span id="line-792" class="anchor"/><span id="line-793" class="anchor"/></p><p class="line867">
</p><h3 id="head-2e83b6743ea5393cb46b2a611557a0b603900b5a">1.4.2. 什么是负索引?</h3>
<span id="line-794" class="anchor"/><span id="line-795" class="anchor"/><p class="line874">Python序列的索引可正可负。若使用正索引，0是第一个索引，1是第二个索引，以此类推。若使用负索引，-1 表示最后一个索引，-2表示倒数第二个，以此类推。比如seq[-n] 与 seq[len(seq)-n] 相同。 <span id="line-796" class="anchor"/><span id="line-797" class="anchor"/></p><p class="line862">使用负索引带来很大的方便。比如 S<a href="/moin/-1" class="nonexistent">-1</a> 是除最后一个字符外的所有字符串，这在移除字符串结尾处的换行符时非常有用。 <span id="line-798" class="anchor"/><span id="line-799" class="anchor"/></p><p class="line867">
</p><h3 id="head-233df4f4c34dcb8560102755c0a69e8b7f70186d">1.4.3. 如何反向遍历一个序列?</h3>
<span id="line-800" class="anchor"/><span id="line-801" class="anchor"/><p class="line874">如果是一个列表, 最快的解决方法是 <span id="line-802" class="anchor"/><span id="line-803" class="anchor"/><span id="line-804" class="anchor"/><span id="line-805" class="anchor"/><span id="line-806" class="anchor"/><span id="line-807" class="anchor"/><span id="line-808" class="anchor"/><span id="line-809" class="anchor"/><span id="line-810" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-91d7694d4a25aa000e00bf16e84aa41047f7cef5_044\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-91d7694d4a25aa000e00bf16e84aa41047f7cef5_044', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-91d7694d4a25aa000e00bf16e84aa41047f7cef5_044" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">list</span><span class="Operator">.</span><span class="ID">reverse</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">try</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">list</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>        <span class="String">"do something with x"</span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="ResWord">finally</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   7 </span>    <span class="ID">list</span><span class="Operator">.</span><span class="ID">reverse</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-811" class="anchor"/><span id="line-812" class="anchor"/><p class="line874">这样做有个缺点，就是当你在循环时，这个list被临时反转了。如果不喜欢这样，也可做一个复制。这样虽然看起来代价较大，但实际上比其它方法要快。 <span id="line-813" class="anchor"/><span id="line-814" class="anchor"/><span id="line-815" class="anchor"/><span id="line-816" class="anchor"/><span id="line-817" class="anchor"/><span id="line-818" class="anchor"/><span id="line-819" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-7cc62ed310fe7d511c8a04936c6f858632217528_045\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-7cc62ed310fe7d511c8a04936c6f858632217528_045', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-7cc62ed310fe7d511c8a04936c6f858632217528_045" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">rev</span> <span class="Operator">=</span> <span class="ID">list</span><span class="Operator">[</span><span class="Operator">:</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ID">rev</span><span class="Operator">.</span><span class="ID">reverse</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">rev</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>        <span class="Operator"><</span><span class="ID">do</span> <span class="ID">something</span> <span class="ResWord">with</span> <span class="ID">x</span><span class="Operator">></span><span class="Text"/></span>
</pre></div><span id="line-820" class="anchor"/><span id="line-821" class="anchor"/><p class="line874">如果它不是个列表，一个更普遍但也更慢的方法是： <span id="line-822" class="anchor"/><span id="line-823" class="anchor"/><span id="line-824" class="anchor"/><span id="line-825" class="anchor"/><span id="line-826" class="anchor"/><span id="line-827" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-d3ca9fdbc38cf23612ea20029cce18e774f25c23_046\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-d3ca9fdbc38cf23612ea20029cce18e774f25c23_046', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-d3ca9fdbc38cf23612ea20029cce18e774f25c23_046" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">for</span> <span class="ID">i</span> <span class="ResWord">in</span> <span class="ID">range</span><span class="Operator">(</span><span class="ID">len</span><span class="Operator">(</span><span class="ID">sequence</span><span class="Operator">)</span><span class="Operator">-</span><span class="Number">1</span><span class="Operator">,</span> <span class="Operator">-</span><span class="Number">1</span><span class="Operator">,</span> <span class="Operator">-</span><span class="Number">1</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>        <span class="ID">x</span> <span class="Operator">=</span> <span class="ID">sequence</span><span class="Operator">[</span><span class="ID">i</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="Operator"><</span><span class="ID">do</span> <span class="ID">something</span> <span class="ResWord">with</span> <span class="ID">x</span><span class="Operator">></span><span class="Text"/></span>
</pre></div><span id="line-828" class="anchor"/><span id="line-829" class="anchor"/><p class="line874">还有一个更优雅的方法，就是定义一个类，使它像一个序列一样运行，并反向遍历(根据 Steve Majewski 的方法): <span id="line-830" class="anchor"/><span id="line-831" class="anchor"/><span id="line-832" class="anchor"/><span id="line-833" class="anchor"/><span id="line-834" class="anchor"/><span id="line-835" class="anchor"/><span id="line-836" class="anchor"/><span id="line-837" class="anchor"/><span id="line-838" class="anchor"/><span id="line-839" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9162c523297eeef3001d227967bfe86d7facdd5e_047\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-9162c523297eeef3001d227967bfe86d7facdd5e_047', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-9162c523297eeef3001d227967bfe86d7facdd5e_047" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">Rev</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>        <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">seq</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>                <span class="ID">self</span><span class="Operator">.</span><span class="ID">forw</span> <span class="Operator">=</span> <span class="ID">seq</span></span>
<span class="line"><span class="LineNumber">   5 </span>        <span class="ResWord">def</span> <span class="ID">__len__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>                <span class="ResWord">return</span> <span class="ID">len</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">.</span><span class="ID">forw</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   7 </span>        <span class="ResWord">def</span> <span class="ID">__getitem__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">i</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   8 </span>                <span class="ResWord">return</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">forw</span><span class="Operator">[</span><span class="Operator">-</span><span class="Operator">(</span><span class="ID">i</span> <span class="Operator">+</span> <span class="Number">1</span><span class="Operator">)</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-840" class="anchor"/><span id="line-841" class="anchor"/><p class="line874">你可以简单地写成: <span id="line-842" class="anchor"/><span id="line-843" class="anchor"/><span id="line-844" class="anchor"/><span id="line-845" class="anchor"/><span id="line-846" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-94395f5f5d82aa0cd9f37fc24ac5c5cd9103c03b_048\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-94395f5f5d82aa0cd9f37fc24ac5c5cd9103c03b_048', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-94395f5f5d82aa0cd9f37fc24ac5c5cd9103c03b_048" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">Rev</span><span class="Operator">(</span><span class="ID">list</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>        <span class="Operator"><</span><span class="ID">do</span> <span class="ID">something</span> <span class="ResWord">with</span> <span class="ID">x</span><span class="Operator">></span><span class="Text"/></span>
</pre></div><span id="line-847" class="anchor"/><span id="line-848" class="anchor"/><p class="line874">然而，由于方法调用的开销，这是最慢的一种方法。 <span id="line-849" class="anchor"/><span id="line-850" class="anchor"/></p><p class="line874">当使用 Python 2.3时，你可以使用一种扩展的slice语法: <span id="line-851" class="anchor"/><span id="line-852" class="anchor"/><span id="line-853" class="anchor"/><span id="line-854" class="anchor"/><span id="line-855" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-5f3cfe67e45183554b90370d9f285eab4a03c775_049\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-5f3cfe67e45183554b90370d9f285eab4a03c775_049', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-5f3cfe67e45183554b90370d9f285eab4a03c775_049" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">sequence</span><span class="Operator">[</span><span class="Operator">:</span><span class="Operator">:</span><span class="Operator">-</span><span class="Number">1</span><span class="Operator">]</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>       <span class="Operator"><</span><span class="ID">do</span> <span class="ID">something</span> <span class="ResWord">with</span> <span class="ID">x</span><span class="Operator">></span><span class="Text"/></span>
</pre></div><span id="line-856" class="anchor"/><span id="line-857" class="anchor"/><p class="line867">
</p><h3 id="head-f25db86d5f3deeded4eae4ac9816c631ce5f02ca">1.4.4. 怎样才能删掉一个列表中的重复元素?</h3>
<span id="line-858" class="anchor"/><span id="line-859" class="anchor"/><p class="line874">Python Cookbook中有一个关于这个的较长的论述，提到了很多方法，参考： <span id="line-860" class="anchor"/><span id="line-861" class="anchor"/><span id="line-862" class="anchor"/></p><ul><li style="list-style-type: none;"><p class="line891"><a href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560" class="http">http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560</a> <span id="line-863" class="anchor"/><span id="line-864" class="anchor"/><span id="line-865" class="anchor"/></p></li></ul><p class="line874">如果你不介意重新排列这个列表，那么对它进行排序并从list的末尾开始扫描，将重复元素删掉： <span id="line-866" class="anchor"/><span id="line-867" class="anchor"/><span id="line-868" class="anchor"/><span id="line-869" class="anchor"/><span id="line-870" class="anchor"/><span id="line-871" class="anchor"/><span id="line-872" class="anchor"/><span id="line-873" class="anchor"/><span id="line-874" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-38014909ac525b18a54f2c27e2031bcd04a23634_050\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-38014909ac525b18a54f2c27e2031bcd04a23634_050', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-38014909ac525b18a54f2c27e2031bcd04a23634_050" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">if</span> <span class="ID">List</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>   <span class="ID">List</span><span class="Operator">.</span><span class="ID">sort</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span>   <span class="ID">last</span> <span class="Operator">=</span> <span class="ID">List</span><span class="Operator">[</span><span class="Operator">-</span><span class="Number">1</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   5 </span>   <span class="ResWord">for</span> <span class="ID">i</span> <span class="ResWord">in</span> <span class="ID">range</span><span class="Operator">(</span><span class="ID">len</span><span class="Operator">(</span><span class="ID">List</span><span class="Operator">)</span><span class="Operator">-</span><span class="Number">2</span><span class="Operator">,</span> <span class="Operator">-</span><span class="Number">1</span><span class="Operator">,</span> <span class="Operator">-</span><span class="Number">1</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>       <span class="ResWord">if</span> <span class="ID">lastList</span><span class="Operator">[</span><span class="ID">i</span><span class="Operator">]</span><span class="Operator">:</span> <span class="ResWord">del</span> <span class="ID">List</span><span class="Operator">[</span><span class="ID">i</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   7 </span>       <span class="ResWord">else</span><span class="Operator">:</span> <span class="ID">last</span><span class="Operator">=</span><span class="ID">List</span><span class="Operator">[</span><span class="ID">i</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-875" class="anchor"/><span id="line-876" class="anchor"/><p class="line874">如果列表中所有的元素都可用作字典的键值（即它们都是hashable），那么通常这样更快： <span id="line-877" class="anchor"/><span id="line-878" class="anchor"/><span id="line-879" class="anchor"/><span id="line-880" class="anchor"/><span id="line-881" class="anchor"/><span id="line-882" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-aca3e5a3feac88f33ae6840d90ee190904e900bb_051\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-aca3e5a3feac88f33ae6840d90ee190904e900bb_051', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-aca3e5a3feac88f33ae6840d90ee190904e900bb_051" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">d</span> <span class="Operator">=</span> <span class="Operator">{</span><span class="Operator">}</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">List</span><span class="Operator">:</span> <span class="ID">d</span><span class="Operator">[</span><span class="ID">x</span><span class="Operator">]</span><span class="Operator">=</span><span class="ID">x</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ID">List</span> <span class="Operator">=</span> <span class="ID">d</span><span class="Operator">.</span><span class="ID">values</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-883" class="anchor"/><span id="line-884" class="anchor"/><p class="line867">
</p><h3 id="head-4fc1fabad1c459edbbfc40f17fc7518d77e9e9cd">1.4.5. 如何在python中使用数组?</h3>
<span id="line-885" class="anchor"/><span id="line-886" class="anchor"/><p class="line874">使用列表: <span id="line-887" class="anchor"/><span id="line-888" class="anchor"/><span id="line-889" class="anchor"/><span id="line-890" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-6cce2d31e5d6a371ba0f548f717a18a9e9d61541_052\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-6cce2d31e5d6a371ba0f548f717a18a9e9d61541_052', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-6cce2d31e5d6a371ba0f548f717a18a9e9d61541_052" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">[</span><span class="String">"this"</span><span class="Operator">,</span> <span class="Number">1</span><span class="Operator">,</span> <span class="String">"is"</span><span class="Operator">,</span> <span class="String">"an"</span><span class="Operator">,</span> <span class="String">"array"</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-891" class="anchor"/><span id="line-892" class="anchor"/><p class="line874">列表对等于C或Pascal中的数组；最大的不同是python的列表可以包含很多不同的数据类型。 <span id="line-893" class="anchor"/><span id="line-894" class="anchor"/></p><p class="line874">array 模块也可以提供方法来创建紧凑表示的固定类型数组，但是它的索引会比 列表慢。也要注意可定义类似数组且拥有各种特性的Numeric扩展和其它方式。 <span id="line-895" class="anchor"/><span id="line-896" class="anchor"/></p><p class="line874">要获得Lisp风格链接的列表，你可以通过使用tuple来模拟cons cells。 <span id="line-897" class="anchor"/><span id="line-898" class="anchor"/><span id="line-899" class="anchor"/><span id="line-900" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-149c76dcfefb5c1404f7af06304f0b89d9b497ab_053\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-149c76dcfefb5c1404f7af06304f0b89d9b497ab_053', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-149c76dcfefb5c1404f7af06304f0b89d9b497ab_053" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">lisp_list</span> <span class="Operator">=</span> <span class="Operator">(</span><span class="String">"like"</span><span class="Operator">,</span>  <span class="Operator">(</span><span class="String">"this"</span><span class="Operator">,</span>  <span class="Operator">(</span><span class="String">"example"</span><span class="Operator">,</span> <span class="ID">None</span><span class="Operator">)</span> <span class="Operator">)</span> <span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-901" class="anchor"/><span id="line-902" class="anchor"/><p class="line874">如果需要在运行时可更改，可以使用列表代替tuple。这里类似lisp car 的是 lisp_list[0] ，而类似 cdr 的是 lisp_list[1]。 仅当你确定需要时使用它，因为这样比使用python列表慢很多。 <span id="line-903" class="anchor"/><span id="line-904" class="anchor"/></p><p class="line867">
</p><h3 id="head-3229e5087182f070a39b5c007c92a2c221babae9">1.4.6. 如何使用多维列表?</h3>
<span id="line-905" class="anchor"/><span id="line-906" class="anchor"/><p class="line874">你很有可能用这种方式来产生一个多维数组： <span id="line-907" class="anchor"/><span id="line-908" class="anchor"/><span id="line-909" class="anchor"/><span id="line-910" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-488268424998cafaa2e2557a2eb188bc5fef8b78_054\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-488268424998cafaa2e2557a2eb188bc5fef8b78_054', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-488268424998cafaa2e2557a2eb188bc5fef8b78_054" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">A</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="Operator">[</span><span class="ID">None</span><span class="Operator">]</span> <span class="Operator">*</span> <span class="Number">2</span><span class="Operator">]</span> <span class="Operator">*</span> <span class="Number">3</span><span class="Text"/></span>
</pre></div><span id="line-911" class="anchor"/><span id="line-912" class="anchor"/><p class="line874">如果你pirnt它的话似乎是正确的： <span id="line-913" class="anchor"/><span id="line-914" class="anchor"/><span id="line-915" class="anchor"/><span id="line-916" class="anchor"/><span id="line-917" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-1e97a681fa9a019c5798eee3e6e9eb92cb022cc2_055\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-1e97a681fa9a019c5798eee3e6e9eb92cb022cc2_055', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-1e97a681fa9a019c5798eee3e6e9eb92cb022cc2_055" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">A</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">[</span><span class="Operator">[</span><span class="ID">None</span><span class="Operator">,</span> <span class="ID">None</span><span class="Operator">]</span><span class="Operator">,</span> <span class="Operator">[</span><span class="ID">None</span><span class="Operator">,</span> <span class="ID">None</span><span class="Operator">]</span><span class="Operator">,</span> <span class="Operator">[</span><span class="ID">None</span><span class="Operator">,</span> <span class="ID">None</span><span class="Operator">]</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-918" class="anchor"/><span id="line-919" class="anchor"/><p class="line874">但是当你赋一个值时，它会出现在好几个地方： <span id="line-920" class="anchor"/><span id="line-921" class="anchor"/><span id="line-922" class="anchor"/></p><ul><li style="list-style-type: none;"><span id="line-923" class="anchor"/><span id="line-924" class="anchor"/><span id="line-925" class="anchor"/><span id="line-926" class="anchor"/><span id="line-927" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-7ebdf13f0638173af52ba1ba980492093657c286_056\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-7ebdf13f0638173af52ba1ba980492093657c286_056', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-7ebdf13f0638173af52ba1ba980492093657c286_056" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">A</span><span class="Operator">[</span><span class="Number">0</span><span class="Operator">]</span><span class="Operator">[</span><span class="Number">0</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="Number">5</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">A</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="Operator">[</span><span class="Operator">[</span><span class="Number">5</span><span class="Operator">,</span> <span class="ID">None</span><span class="Operator">]</span><span class="Operator">,</span> <span class="Operator">[</span><span class="Number">5</span><span class="Operator">,</span> <span class="ID">None</span><span class="Operator">]</span><span class="Operator">,</span> <span class="Operator">[</span><span class="Number">5</span><span class="Operator">,</span> <span class="ID">None</span><span class="Operator">]</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-928" class="anchor"/><span id="line-929" class="anchor"/><span id="line-930" class="anchor"/></li></ul><p class="line874">这是因为用 * 来复制时，只是创建了对这个对象的引用，而不是真正的创建了它。 *3 创建了一个包含三个引用的列表，这三个引用都指向同一个长度为2的列表。其中一个行的改变会显示在所有行中，这当然不是你想要的。 <span id="line-931" class="anchor"/><span id="line-932" class="anchor"/></p><p class="line874">建议创建一个特定长度的list，然后用新的list填充每个元素： <span id="line-933" class="anchor"/><span id="line-934" class="anchor"/><span id="line-935" class="anchor"/><span id="line-936" class="anchor"/><span id="line-937" class="anchor"/><span id="line-938" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-a47e6a169f8e9e2bbeb6ee66d8f79d67bcee849a_057\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-a47e6a169f8e9e2bbeb6ee66d8f79d67bcee849a_057', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-a47e6a169f8e9e2bbeb6ee66d8f79d67bcee849a_057" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">A</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="ID">None</span><span class="Operator">]</span><span class="Operator">*</span><span class="Number">3</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">for</span> <span class="ID">i</span> <span class="ResWord">in</span> <span class="ID">range</span><span class="Operator">(</span><span class="Number">3</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>     <span class="ID">A</span><span class="Operator">[</span><span class="ID">i</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="ID">None</span><span class="Operator">]</span> <span class="Operator">*</span> <span class="Number">2</span><span class="Text"/></span>
</pre></div><span id="line-939" class="anchor"/><span id="line-940" class="anchor"/><p class="line874">这样创建了一个包含三个不同的长度为2的列表。你也可以使用list comprehension： <span id="line-941" class="anchor"/><span id="line-942" class="anchor"/><span id="line-943" class="anchor"/><span id="line-944" class="anchor"/><span id="line-945" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-680f829fb2c1d189934363c9a9aac701a43102de_058\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-680f829fb2c1d189934363c9a9aac701a43102de_058', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-680f829fb2c1d189934363c9a9aac701a43102de_058" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">w</span><span class="Operator">,</span><span class="ID">h</span> <span class="Operator">=</span> <span class="Number">2</span><span class="Operator">,</span><span class="Number">3</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ID">A</span> <span class="Operator">=</span> <span class="Operator">[</span> <span class="Operator">[</span><span class="ID">None</span><span class="Operator">]</span><span class="Operator">*</span><span class="ID">w</span> <span class="ResWord">for</span> <span class="ID">i</span> <span class="ResWord">in</span> <span class="ID">range</span><span class="Operator">(</span><span class="ID">h</span><span class="Operator">)</span> <span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-946" class="anchor"/><span id="line-947" class="anchor"/><p class="line862">或者，你可以使用一个扩展来提供矩阵数据类型；<a href="http://www.pfdubois.com/numpy/" class="http">Numeric Python</a> 是最有名的。 <span id="line-948" class="anchor"/><span id="line-949" class="anchor"/></p><p class="line867">
</p><h3 id="head-7d68236de643cf5172ee16238966ca7fec33b0e6">1.4.7. 如何对一系列的对象应用方法?</h3>
<span id="line-950" class="anchor"/><span id="line-951" class="anchor"/><p class="line874">使用list comprehension: <span id="line-952" class="anchor"/><span id="line-953" class="anchor"/><span id="line-954" class="anchor"/><span id="line-955" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-6eb973ddf6254edfa5615222ecbb5f7758bd01d3_059\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-6eb973ddf6254edfa5615222ecbb5f7758bd01d3_059', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-6eb973ddf6254edfa5615222ecbb5f7758bd01d3_059" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">result</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="ID">obj</span><span class="Operator">.</span><span class="ID">method</span><span class="Operator">(</span><span class="Operator">)</span> <span class="ResWord">for</span> <span class="ID">obj</span> <span class="ResWord">in</span> <span class="ID">List</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-956" class="anchor"/><span id="line-957" class="anchor"/><p class="line874">更一般的，可以使用以下函数： <span id="line-958" class="anchor"/><span id="line-959" class="anchor"/><span id="line-960" class="anchor"/><span id="line-961" class="anchor"/><span id="line-962" class="anchor"/><span id="line-963" class="anchor"/><span id="line-964" class="anchor"/><span id="line-965" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-553e6bdab2fcef77cf8f211ce433ad5bd80f5860_060\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-553e6bdab2fcef77cf8f211ce433ad5bd80f5860_060', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-553e6bdab2fcef77cf8f211ce433ad5bd80f5860_060" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">method_map</span><span class="Operator">(</span><span class="ID">objects</span><span class="Operator">,</span> <span class="ID">method</span><span class="Operator">,</span> <span class="ID">arguments</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>     <span class="String">"""method_map([a,b], "meth", (1,2)) gives [a.meth(1,2), b.meth(1,2)]"""</span></span>
<span class="line"><span class="LineNumber">   4 </span>     <span class="ID">nobjects</span> <span class="Operator">=</span> <span class="ID">len</span><span class="Operator">(</span><span class="ID">objects</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   5 </span>     <span class="ID">methods</span> <span class="Operator">=</span> <span class="ID">map</span><span class="Operator">(</span><span class="ID">getattr</span><span class="Operator">,</span> <span class="ID">objects</span><span class="Operator">,</span> <span class="Operator">[</span><span class="ID">method</span><span class="Operator">]</span><span class="Operator">*</span><span class="ID">nobjects</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   6 </span>     <span class="ResWord">return</span> <span class="ID">map</span><span class="Operator">(</span><span class="ID">apply</span><span class="Operator">,</span> <span class="ID">methods</span><span class="Operator">,</span> <span class="Operator">[</span><span class="ID">arguments</span><span class="Operator">]</span><span class="Operator">*</span><span class="ID">nobjects</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-966" class="anchor"/><span id="line-967" class="anchor"/><p class="line867">
</p><h2 id="head-1448eae58490c05f29c01bb917357132b480a601">1.5. 字典</h2>
<span id="line-968" class="anchor"/><span id="line-969" class="anchor"/><p class="line867">
</p><h3 id="head-59b27b87cc745a84d064b14354d4dd4219c4e4bd">1.5.1. 如何按特定的顺序显示一个字典?</h3>
<span id="line-970" class="anchor"/><span id="line-971" class="anchor"/><p class="line874">不能这样。字典按不可预测的顺序存储数据，所以字典的显示顺序也是不可预测的。 <span id="line-972" class="anchor"/><span id="line-973" class="anchor"/></p><p class="line874">或许你正想保存一个可打印版本到一个文件，做某些更改后将其与其它显示的字典比较，这个回答会使你感到沮丧。在这种情况下，使用pprint模块来pretty-print字典，这样元素会按键值排序。 <span id="line-974" class="anchor"/><span id="line-975" class="anchor"/></p><p class="line862">另一个复杂的多的方法就是继承<a href="/moin/UserDict">UserDict</a>.<a href="/moin/UserDict">UserDict</a> 并创建类<a href="/moin/SortedDict" class="nonexistent">SortedDict</a> ，以一个可预知的顺序显示出来。这里有一个示例： <span id="line-976" class="anchor"/><span id="line-977" class="anchor"/><span id="line-978" class="anchor"/><span id="line-979" class="anchor"/><span id="line-980" class="anchor"/><span id="line-981" class="anchor"/><span id="line-982" class="anchor"/><span id="line-983" class="anchor"/><span id="line-984" class="anchor"/><span id="line-985" class="anchor"/><span id="line-986" class="anchor"/><span id="line-987" class="anchor"/><span id="line-988" class="anchor"/><span id="line-989" class="anchor"/><span id="line-990" class="anchor"/><span id="line-991" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-168ae34dd13ba93db1574008d58d78fade31eaf2_061\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-168ae34dd13ba93db1574008d58d78fade31eaf2_061', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-168ae34dd13ba93db1574008d58d78fade31eaf2_061" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">import</span> <span class="ID">UserDict</span><span class="Operator">,</span> <span class="ID">string</span></span>
<span class="line"><span class="LineNumber">   3 </span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ResWord">class</span> <span class="ID">SortedDict</span><span class="Operator">(</span><span class="ID">UserDict</span><span class="Operator">.</span><span class="ID">UserDict</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>  <span class="ResWord">def</span> <span class="ID">__repr__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>    <span class="ID">result</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   7 </span>    <span class="ID">append</span> <span class="Operator">=</span> <span class="ID">result</span><span class="Operator">.</span><span class="ID">append</span></span>
<span class="line"><span class="LineNumber">   8 </span>    <span class="ID">keys</span> <span class="Operator">=</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">data</span><span class="Operator">.</span><span class="ID">keys</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   9 </span>    <span class="ID">keys</span><span class="Operator">.</span><span class="ID">sort</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  10 </span>    <span class="ResWord">for</span> <span class="ID">k</span> <span class="ResWord">in</span> <span class="ID">keys</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">  11 </span>      <span class="ID">append</span><span class="Operator">(</span><span class="String">"%s: %s"</span> <span class="Operator">%</span> <span class="Operator">(</span><span class="Operator">`</span><span class="ID">k</span><span class="Operator">`</span><span class="Operator">,</span> <span class="Operator">`</span><span class="ID">self</span><span class="Operator">.</span><span class="ID">data</span><span class="Operator">[</span><span class="ID">k</span><span class="Operator">]</span><span class="Operator">`</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  12 </span>    <span class="ResWord">return</span> <span class="String">"{%s}"</span> <span class="Operator">%</span> <span class="ID">string</span><span class="Operator">.</span><span class="ID">join</span><span class="Operator">(</span><span class="ID">result</span><span class="Operator">,</span> <span class="String">", "</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">  13 </span></span>
<span class="line"><span class="LineNumber">  14 </span>  <span class="ID">___str__</span> <span class="Operator">=</span> <span class="ID">__repr__</span><span class="Text"/></span>
</pre></div><span id="line-992" class="anchor"/><span id="line-993" class="anchor"/><p class="line874">虽然这不是个完美的解决方案，但它可以在你遇到的很多情况下工作良好，最大的缺陷就是，如果字典中某个值也是字典，那么将不会以任何特定顺序显示值。 <span id="line-994" class="anchor"/><span id="line-995" class="anchor"/></p><p class="line867">
</p><h3 id="head-428b219aa5a7922c218bdcf6a242e393a568979d">1.5.2. 我想做一个复杂的排序，可以在python中完成一个Schwartzian 变换吗?</h3>
<span id="line-996" class="anchor"/><span id="line-997" class="anchor"/><p class="line874">可以，通过使用list comprehensions会非常简单。 <span id="line-998" class="anchor"/><span id="line-999" class="anchor"/></p><p class="line874">根据Perl社区的Randal Schwartz的方法，创建一个矩阵，这个矩阵将列表的每个元素都映射到相应的“排序值”上，通过这个矩阵对列表进行排序。有一个字符串列表，用字符串的大写字母值排序： <span id="line-1000" class="anchor"/><span id="line-1001" class="anchor"/><span id="line-1002" class="anchor"/><span id="line-1003" class="anchor"/><span id="line-1004" class="anchor"/><span id="line-1005" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-b521cdc8456e718b08a8aeedc9d634a7b761fdd2_062\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-b521cdc8456e718b08a8aeedc9d634a7b761fdd2_062', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-b521cdc8456e718b08a8aeedc9d634a7b761fdd2_062" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">tmp1</span> <span class="Operator">=</span> <span class="Operator">[</span> <span class="Operator">(</span><span class="ID">x</span><span class="Operator">.</span><span class="ID">upper</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">,</span> <span class="ID">x</span><span class="Operator">)</span> <span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">L</span> <span class="Operator">]</span> <span class="Comment"># Schwartzian transform</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ID">tmp1</span><span class="Operator">.</span><span class="ID">sort</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ID">Usorted</span> <span class="Operator">=</span> <span class="Operator">[</span> <span class="ID">x</span><span class="Operator">[</span><span class="Number">1</span><span class="Operator">]</span> <span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">tmp1</span> <span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-1006" class="anchor"/><span id="line-1007" class="anchor"/><p class="line874">对每个字符串的10-15位置的子域扩展的整数值进行排序： <span id="line-1008" class="anchor"/><span id="line-1009" class="anchor"/><span id="line-1010" class="anchor"/><span id="line-1011" class="anchor"/><span id="line-1012" class="anchor"/><span id="line-1013" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-e300ee5c67e762053fb40b65155f5de477a7e79f_063\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-e300ee5c67e762053fb40b65155f5de477a7e79f_063', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-e300ee5c67e762053fb40b65155f5de477a7e79f_063" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">tmp2</span> <span class="Operator">=</span> <span class="Operator">[</span> <span class="Operator">(</span><span class="ID">int</span><span class="Operator">(</span><span class="ID">s</span><span class="Operator">[</span><span class="Number">10</span><span class="Operator">:</span><span class="Number">15</span><span class="Operator">]</span><span class="Operator">)</span><span class="Operator">,</span> <span class="ID">s</span><span class="Operator">)</span> <span class="ResWord">for</span> <span class="ID">s</span> <span class="ResWord">in</span> <span class="ID">L</span> <span class="Operator">]</span> <span class="Comment"># Schwartzian transform</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ID">tmp2</span><span class="Operator">.</span><span class="ID">sort</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="ID">Isorted</span> <span class="Operator">=</span> <span class="Operator">[</span> <span class="ID">x</span><span class="Operator">[</span><span class="Number">1</span><span class="Operator">]</span> <span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">tmp2</span> <span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-1014" class="anchor"/><span id="line-1015" class="anchor"/><p class="line874">注意到 Isorted 也能被这样计算： <span id="line-1016" class="anchor"/><span id="line-1017" class="anchor"/><span id="line-1018" class="anchor"/><span id="line-1019" class="anchor"/><span id="line-1020" class="anchor"/><span id="line-1021" class="anchor"/><span id="line-1022" class="anchor"/><span id="line-1023" class="anchor"/><span id="line-1024" class="anchor"/><span id="line-1025" class="anchor"/><span id="line-1026" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-8fca1fc70adfa340685ba8e5a9779063a0e35dc2_064\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-8fca1fc70adfa340685ba8e5a9779063a0e35dc2_064', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-8fca1fc70adfa340685ba8e5a9779063a0e35dc2_064" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">intfield</span><span class="Operator">(</span><span class="ID">s</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">return</span> <span class="ID">int</span><span class="Operator">(</span><span class="ID">s</span><span class="Operator">[</span><span class="Number">10</span><span class="Operator">:</span><span class="Number">15</span><span class="Operator">]</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   4 </span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="ResWord">def</span> <span class="ID">Icmp</span><span class="Operator">(</span><span class="ID">s1</span><span class="Operator">,</span> <span class="ID">s2</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>    <span class="ResWord">return</span> <span class="ID">cmp</span><span class="Operator">(</span><span class="ID">intfield</span><span class="Operator">(</span><span class="ID">s1</span><span class="Operator">)</span><span class="Operator">,</span> <span class="ID">intfield</span><span class="Operator">(</span><span class="ID">s2</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   7 </span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="ID">Isorted</span> <span class="Operator">=</span> <span class="ID">L</span><span class="Operator">[</span><span class="Operator">:</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   9 </span><span class="ID">Isorted</span><span class="Operator">.</span><span class="ID">sort</span><span class="Operator">(</span><span class="ID">Icmp</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1027" class="anchor"/><span id="line-1028" class="anchor"/><p class="line874">但是因为这个方法对L的每个元素调用intfield()多次，所以要比Schwartzian变换慢。 <span id="line-1029" class="anchor"/><span id="line-1030" class="anchor"/></p><p class="line867">
</p><h3 id="head-865fdf629db6c58fd29260b026fd900612e74723">1.5.3. 如何根据一个list的值来对另一个list排序?</h3>
<span id="line-1031" class="anchor"/><span id="line-1032" class="anchor"/><p class="line874">将它们合并成一个包含若干tuple的列表，对列表排序，然后选取你想要的元素。 <span id="line-1033" class="anchor"/><span id="line-1034" class="anchor"/><span id="line-1035" class="anchor"/><span id="line-1036" class="anchor"/><span id="line-1037" class="anchor"/><span id="line-1038" class="anchor"/><span id="line-1039" class="anchor"/><span id="line-1040" class="anchor"/><span id="line-1041" class="anchor"/><span id="line-1042" class="anchor"/><span id="line-1043" class="anchor"/><span id="line-1044" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-138ea1098d3c248883f90a7d032477b5b3c40955_065\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-138ea1098d3c248883f90a7d032477b5b3c40955_065', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-138ea1098d3c248883f90a7d032477b5b3c40955_065" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">list1</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="String">"what"</span><span class="Operator">,</span> <span class="String">"I'm"</span><span class="Operator">,</span> <span class="String">"sorting"</span><span class="Operator">,</span> <span class="String">"by"</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">list2</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="String">"something"</span><span class="Operator">,</span> <span class="String">"else"</span><span class="Operator">,</span> <span class="String">"to"</span><span class="Operator">,</span> <span class="String">"sort"</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">pairs</span> <span class="Operator">=</span> <span class="ID">zip</span><span class="Operator">(</span><span class="ID">list1</span><span class="Operator">,</span> <span class="ID">list2</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">pairs</span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="Operator">[</span><span class="Operator">(</span><span class="String">'what'</span><span class="Operator">,</span> <span class="String">'something'</span><span class="Operator">)</span><span class="Operator">,</span> <span class="Operator">(</span><span class="String">"I'm"</span><span class="Operator">,</span> <span class="String">'else'</span><span class="Operator">)</span><span class="Operator">,</span> <span class="Operator">(</span><span class="String">'sorting'</span><span class="Operator">,</span> <span class="String">'to'</span><span class="Operator">)</span><span class="Operator">,</span> <span class="Operator">(</span><span class="String">'by'</span><span class="Operator">,</span> <span class="String">'sort'</span><span class="Operator">)</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">pairs</span><span class="Operator">.</span><span class="ID">sort</span><span class="Operator">(</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   8 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">result</span> <span class="Operator">=</span> <span class="Operator">[</span> <span class="ID">x</span><span class="Operator">[</span><span class="Number">1</span><span class="Operator">]</span> <span class="ResWord">for</span> <span class="ID">x</span> <span class="ResWord">in</span> <span class="ID">pairs</span> <span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   9 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">result</span></span>
<span class="line"><span class="LineNumber">  10 </span><span class="Operator">[</span><span class="String">'else'</span><span class="Operator">,</span> <span class="String">'sort'</span><span class="Operator">,</span> <span class="String">'to'</span><span class="Operator">,</span> <span class="String">'something'</span><span class="Operator">]</span><span class="Text"/></span>
</pre></div><span id="line-1045" class="anchor"/><span id="line-1046" class="anchor"/><p class="line874">对于最后一步，一个替代方法是： <span id="line-1047" class="anchor"/><span id="line-1048" class="anchor"/><span id="line-1049" class="anchor"/><span id="line-1050" class="anchor"/><span id="line-1051" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-499024d94e2b60a346fe7d0fa1e872f7e789985e_066\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-499024d94e2b60a346fe7d0fa1e872f7e789985e_066', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-499024d94e2b60a346fe7d0fa1e872f7e789985e_066" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">result</span> <span class="Operator">=</span> <span class="Operator">[</span><span class="Operator">]</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">for</span> <span class="ID">p</span> <span class="ResWord">in</span> <span class="ID">pairs</span><span class="Operator">:</span> <span class="ID">result</span><span class="Operator">.</span><span class="ID">append</span><span class="Operator">(</span><span class="ID">p</span><span class="Operator">[</span><span class="Number">1</span><span class="Operator">]</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1052" class="anchor"/><span id="line-1053" class="anchor"/><p class="line874">如果你发现这样做更清晰，你也许会使用这个替代方法。但是，对于长列表，它几乎会花去大约两倍的时间。为什么？首先，append() 操作需要重新分配内存，虽然它使用了一些技巧用来防止每次操作时都这样做，它的消耗依然很大。第二，表达式 "result.append" 需要一个额外的属性定位，第三，所有的函数调用也会减慢速度。 <span id="line-1054" class="anchor"/><span id="line-1055" class="anchor"/></p><p class="line867">
</p><h2 id="head-20d3e3fd3982f7cb2deab5d5a1cbf0e90df1d142">1.6. 对象</h2>
<span id="line-1056" class="anchor"/><span id="line-1057" class="anchor"/><p class="line867">
</p><h3 id="head-e3dc8c4818495191df75fae8a7915edeff204ad3">1.6.1. 什么是类？</h3>
<span id="line-1058" class="anchor"/><span id="line-1059" class="anchor"/><p class="line874">类是在执行类语句时创建的特殊对象。类对象被用来作为模板创建实例对象，它包含了针对某个数据类型的数据（属性）和代码（方法）。 <span id="line-1060" class="anchor"/><span id="line-1061" class="anchor"/></p><p class="line862">一个类可以继承一个或多个被称为基类的类。其继承了基类的属性和方法。这就允许通过继承来对类进行重定义。假设有一个通用的Mailbox类提供基本的邮箱存取操作，那么它的子类比如 <a href="/moin/MboxMailbox" class="nonexistent">MboxMailbox</a>, <a href="/moin/MaildirMailbox" class="nonexistent">MaildirMailbox</a>, <a href="/moin/OutlookMailbox" class="nonexistent">OutlookMailbox</a> 可以处理各种特定的邮箱格式。 <span id="line-1062" class="anchor"/><span id="line-1063" class="anchor"/></p><p class="line867">
</p><h3 id="head-c64a4460aa40ee8eb6eb0a92179489239fa49072">1.6.2. 什么是method（方法）?</h3>
<span id="line-1064" class="anchor"/><span id="line-1065" class="anchor"/><p class="line874">method就是某个在类x中的函数，一般调用格式为 x.name(arguments...)。 方法在类定义中被定义成函数: <span id="line-1066" class="anchor"/><span id="line-1067" class="anchor"/><span id="line-1068" class="anchor"/><span id="line-1069" class="anchor"/><span id="line-1070" class="anchor"/><span id="line-1071" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-47cd552e9c893ec69e4b96532655c44a940d4de5_067\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-47cd552e9c893ec69e4b96532655c44a940d4de5_067', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-47cd552e9c893ec69e4b96532655c44a940d4de5_067" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">C</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">def</span> <span class="ID">meth</span> <span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">arg</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="ResWord">return</span> <span class="ID">arg</span><span class="Operator">*</span><span class="Number">2</span> <span class="Operator">+</span> <span class="ID">self</span><span class="Operator">.</span><span class="ID">attribute</span><span class="Text"/></span>
</pre></div><span id="line-1072" class="anchor"/><span id="line-1073" class="anchor"/><p class="line867">
</p><h3 id="head-8d088240d01038e7659fc0f65a2e874b9692d662">1.6.3. 什么是self?</h3>
<span id="line-1074" class="anchor"/><span id="line-1075" class="anchor"/><p class="line874">Self仅仅是method的第一个常规参数。一个method定义为 meth(self, a, b, c)， <span id="line-1076" class="anchor"/><span id="line-1077" class="anchor"/></p><p class="line874">对于定义这个method的类的某个实例x，调用时为 x.meth(a, b, c) ，而实际上是 meth(x, a, b, c)。 <span id="line-1078" class="anchor"/><span id="line-1079" class="anchor"/></p><p class="line874">参考 [../draft/general.html#why-must-self-be-used-explicitly-in-method-definitions-and-calls Why must 'self' be used explicitly in method definitions and calls?] <span id="line-1080" class="anchor"/><span id="line-1081" class="anchor"/></p><p class="line867">
</p><h3 id="head-79f82a93979306c9840d8594be1bea5b7d8106f2">1.6.4. 如何确定某个对象是指定的类或子类的实例?</h3>
<span id="line-1082" class="anchor"/><span id="line-1083" class="anchor"/><p class="line874">使用内建函数 isinstance(obj, cls)。 你可以通过一个tuple来检查某个对象是否是一系列类的实例，例如 isinstance(obj, (class1, class2, ...)), 并检查某个对象是否是python的内建类型，例如 isinstance(obj, str) or isinstance(obj, (int, long, float, complex))。 <span id="line-1084" class="anchor"/><span id="line-1085" class="anchor"/></p><p class="line874">注意多数程序并不经常使用 isinstance() 来检查用户定义的类，如果你自己在编写某个类，一个更好的面向对象风格的方法就是定义一个封装特定功能的method，而不是检查对象所属的类然后根据这个来调用函数。例如，如果你有某个函数： <span id="line-1086" class="anchor"/><span id="line-1087" class="anchor"/><span id="line-1088" class="anchor"/><span id="line-1089" class="anchor"/><span id="line-1090" class="anchor"/><span id="line-1091" class="anchor"/><span id="line-1092" class="anchor"/><span id="line-1093" class="anchor"/><span id="line-1094" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-1a66badf6c5573acb1682d9417f5193deaf7e136_068\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-1a66badf6c5573acb1682d9417f5193deaf7e136_068', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-1a66badf6c5573acb1682d9417f5193deaf7e136_068" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">search</span> <span class="Operator">(</span><span class="ID">obj</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">if</span> <span class="ID">isinstance</span><span class="Operator">(</span><span class="ID">obj</span><span class="Operator">,</span> <span class="ID">Mailbox</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="Comment"># ... code to search a mailbox</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Comment"/>    <span class="ResWord">elif</span> <span class="ID">isinstance</span><span class="Operator">(</span><span class="ID">obj</span><span class="Operator">,</span> <span class="ID">Document</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>        <span class="Comment"># ... code to search a document</span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="Comment"/>    <span class="ResWord">elif</span> <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="Text"/></span>
</pre></div><span id="line-1095" class="anchor"/><span id="line-1096" class="anchor"/><p class="line874">一个更好的方法就是对所有的类都定义一个search() 方法： <span id="line-1097" class="anchor"/><span id="line-1098" class="anchor"/><span id="line-1099" class="anchor"/><span id="line-1100" class="anchor"/><span id="line-1101" class="anchor"/><span id="line-1102" class="anchor"/><span id="line-1103" class="anchor"/><span id="line-1104" class="anchor"/><span id="line-1105" class="anchor"/><span id="line-1106" class="anchor"/><span id="line-1107" class="anchor"/><span id="line-1108" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-ed932c4aba965495c8897eec9bfac84ec4c79e74_069\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-ed932c4aba965495c8897eec9bfac84ec4c79e74_069', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-ed932c4aba965495c8897eec9bfac84ec4c79e74_069" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">Mailbox</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">def</span> <span class="ID">search</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="Comment"># ... code to search a mailbox</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Comment"/></span>
<span class="line"><span class="LineNumber">   6 </span><span class="ResWord">class</span> <span class="ID">Document</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   7 </span>    <span class="ResWord">def</span> <span class="ID">search</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   8 </span>        <span class="Comment"># ... code to search a document</span></span>
<span class="line"><span class="LineNumber">   9 </span><span class="Comment"/></span>
<span class="line"><span class="LineNumber">  10 </span><span class="ID">obj</span><span class="Operator">.</span><span class="ID">search</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1109" class="anchor"/><span id="line-1110" class="anchor"/><p class="line867">
</p><h3 id="head-bcee4f2f47d97250fc5b601a0c791b3061b0262a">1.6.5. 什么是delegation?</h3>
<span id="line-1111" class="anchor"/><span id="line-1112" class="anchor"/><p class="line874">Delegation是一个面向对象技术（也被称为一种设计模式）。假设你有个类x并想改变它的某个方法method。 你可以创建一个新类，提供这个method的一个全新实现，然后将其它method都delegate到x中相应的method。 <span id="line-1113" class="anchor"/><span id="line-1114" class="anchor"/></p><p class="line874">Python程序员可以轻易地实现delegation。比如，下面这个类像一个文件一样使用，但它将所有的数据都转换成大写： <span id="line-1115" class="anchor"/><span id="line-1116" class="anchor"/><span id="line-1117" class="anchor"/><span id="line-1118" class="anchor"/><span id="line-1119" class="anchor"/><span id="line-1120" class="anchor"/><span id="line-1121" class="anchor"/><span id="line-1122" class="anchor"/><span id="line-1123" class="anchor"/><span id="line-1124" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-85944f63739891706922c727e0f1411f862cf255_070\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-85944f63739891706922c727e0f1411f862cf255_070', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-85944f63739891706922c727e0f1411f862cf255_070" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">UpperOut</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>      <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">outfile</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>            <span class="ID">self</span><span class="Operator">.</span><span class="ID">__outfile</span> <span class="Operator">=</span> <span class="ID">outfile</span></span>
<span class="line"><span class="LineNumber">   5 </span>      <span class="ResWord">def</span> <span class="ID">write</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">s</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>            <span class="ID">self</span><span class="Operator">.</span><span class="ID">__outfile</span><span class="Operator">.</span><span class="ID">write</span><span class="Operator">(</span><span class="ID">s</span><span class="Operator">.</span><span class="ID">upper</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   7 </span>      <span class="ResWord">def</span> <span class="ID">__getattr__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">name</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   8 </span>            <span class="ResWord">return</span> <span class="ID">getattr</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">.</span><span class="ID">__outfile</span><span class="Operator">,</span> <span class="ID">name</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1125" class="anchor"/><span id="line-1126" class="anchor"/><p class="line862">在这里类<a href="/moin/UpperOut" class="nonexistent">UpperOut</a> 重新定义了write() 方法，在调用self.<span class="u">outfile.write()方法之前，将字符串参数 都转换成大写。所有其它的method都delegate到self.</span>outfile 相应的method。这个delegation通过 <tt class="backtick">__getattr__</tt> 方法来完成；关于控制属性存取的更多信息，参考 [../../doc/ref/attribute-access.html the language reference] 。 <span id="line-1127" class="anchor"/><span id="line-1128" class="anchor"/></p><p class="line862">注意到更多的情况下，delegation使人产生疑惑。 若需要修改属性，还需要在类中定义<tt class="backtick">__settattr__</tt> 方法，并应小心操作。<tt class="backtick">__setattr__</tt> 的实现基本与以下一致： <span id="line-1129" class="anchor"/><span id="line-1130" class="anchor"/><span id="line-1131" class="anchor"/><span id="line-1132" class="anchor"/><span id="line-1133" class="anchor"/><span id="line-1134" class="anchor"/><span id="line-1135" class="anchor"/><span id="line-1136" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-adac8d9fd29182f62de79941371721857277a918_071\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-adac8d9fd29182f62de79941371721857277a918_071', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-adac8d9fd29182f62de79941371721857277a918_071" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">X</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>     <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   4 </span>     <span class="ResWord">def</span> <span class="ID">__setattr__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">name</span><span class="Operator">,</span> <span class="ID">value</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>          <span class="ID">self</span><span class="Operator">.</span><span class="ID">__dict__</span><span class="Operator">[</span><span class="ID">name</span><span class="Operator">]</span> <span class="Operator">=</span> <span class="ID">value</span></span>
<span class="line"><span class="LineNumber">   6 </span>     <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="Text"/></span>
</pre></div><span id="line-1137" class="anchor"/><span id="line-1138" class="anchor"/><p class="line862">大多数<tt class="backtick">__setattr__</tt>实现必须修改self.<tt class="backtick">__dict__</tt>，用来存储自身的本地状态信息以防止无限递归。 <span id="line-1139" class="anchor"/><span id="line-1140" class="anchor"/></p><p class="line867">
</p><h3 id="head-a46a4d2037a90e102e94e0ae4f8f5bf06f460b75">1.6.6. 如果继承类里的某个方法覆盖了基类中的定义，如何从继承类中调用基类的这个方法?</h3>
<span id="line-1141" class="anchor"/><span id="line-1142" class="anchor"/><p class="line874">如果你使用的是新风格的类，使用内建函数 super(): <span id="line-1143" class="anchor"/><span id="line-1144" class="anchor"/><span id="line-1145" class="anchor"/><span id="line-1146" class="anchor"/><span id="line-1147" class="anchor"/><span id="line-1148" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-76db8b2ba0145ca3dfc37e5055a11ce8c2ec14bb_072\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-76db8b2ba0145ca3dfc37e5055a11ce8c2ec14bb_072', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-76db8b2ba0145ca3dfc37e5055a11ce8c2ec14bb_072" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">Derived</span><span class="Operator">(</span><span class="ID">Base</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">def</span> <span class="ID">meth</span> <span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="ID">super</span><span class="Operator">(</span><span class="ID">Derived</span><span class="Operator">,</span> <span class="ID">self</span><span class="Operator">)</span><span class="Operator">.</span><span class="ID">meth</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1149" class="anchor"/><span id="line-1150" class="anchor"/><p class="line874">如果你使用的是经典风格的类：对于一个定义为 class Derived(Base): ... 的类 ，你可以调用Base（或Base某个基类）的方法 meth()，例如 Base.meth(self, arguments...). 这里，Base.meth 是个未绑定的方法，你可以使用 self 参数。 <span id="line-1151" class="anchor"/><span id="line-1152" class="anchor"/></p><p class="line867">
</p><h3 id="head-ee18b212252e46dc4f1a9f830b45f4b5213ca4b2">1.6.7. 如何组织我的代码以使改变基类更容易?</h3>
<span id="line-1153" class="anchor"/><span id="line-1154" class="anchor"/><p class="line874">你可以为基类定义一个别名，在你的类定义之前将真正的基类赋给它，并在你的整个类里使用别名。那么所有需要改变的就是赋给别名的值。另外，当你想动态决定使用哪个基类的情况（例如，根据资源的有效性），这个技巧也很方便。例如： <span id="line-1155" class="anchor"/><span id="line-1156" class="anchor"/><span id="line-1157" class="anchor"/><span id="line-1158" class="anchor"/><span id="line-1159" class="anchor"/><span id="line-1160" class="anchor"/><span id="line-1161" class="anchor"/><span id="line-1162" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-aee9d6f026b84f81d7ccb599b7028e750df1b629_073\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-aee9d6f026b84f81d7ccb599b7028e750df1b629_073', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-aee9d6f026b84f81d7ccb599b7028e750df1b629_073" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">BaseAlias</span> <span class="Operator">=</span> <span class="Operator"><</span><span class="ID">real</span> <span class="ID">base</span> <span class="ResWord">class</span><span class="Operator">></span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">class</span> <span class="ID">Derived</span><span class="Operator">(</span><span class="ID">BaseAlias</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="ResWord">def</span> <span class="ID">meth</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>                <span class="ID">BaseAlias</span><span class="Operator">.</span><span class="ID">meth</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   6 </span>                <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="Text"/></span>
</pre></div><span id="line-1163" class="anchor"/><span id="line-1164" class="anchor"/><p class="line867">
</p><h3 id="head-f8dd3753ee51817ab51bb12cc7279d9859d48be3">1.6.8. 怎样创建静态类数据和静态类方法?</h3>
<span id="line-1165" class="anchor"/><span id="line-1166" class="anchor"/><p class="line874">创建静态数据(C++ 或 Java中的说法)很简单；但不直接支持静态方法(同样是 C++ 或 Java中的说法)的创建。 <span id="line-1167" class="anchor"/><span id="line-1168" class="anchor"/></p><p class="line874">对于静态数据，简单地定义一个类属性。当给这个属性赋予新值时，需要明确地使用类名称。 <span id="line-1169" class="anchor"/><span id="line-1170" class="anchor"/><span id="line-1171" class="anchor"/><span id="line-1172" class="anchor"/><span id="line-1173" class="anchor"/><span id="line-1174" class="anchor"/><span id="line-1175" class="anchor"/><span id="line-1176" class="anchor"/><span id="line-1177" class="anchor"/><span id="line-1178" class="anchor"/><span id="line-1179" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-f6c32f38a4bb3b976d2d3252b67648c510e356b9_074\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-f6c32f38a4bb3b976d2d3252b67648c510e356b9_074', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-f6c32f38a4bb3b976d2d3252b67648c510e356b9_074" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">C</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">count</span> <span class="Operator">=</span> <span class="Number">0</span>   <span class="Comment"># number of times C.__init__ called</span></span>
<span class="line"><span class="LineNumber">   4 </span></span>
<span class="line"><span class="LineNumber">   5 </span>    <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   6 </span>        <span class="ID">C</span><span class="Operator">.</span><span class="ID">count</span> <span class="Operator">=</span> <span class="ID">C</span><span class="Operator">.</span><span class="ID">count</span> <span class="Operator">+</span> <span class="Number">1</span></span>
<span class="line"><span class="LineNumber">   7 </span></span>
<span class="line"><span class="LineNumber">   8 </span>    <span class="ResWord">def</span> <span class="ID">getcount</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   9 </span>        <span class="ResWord">return</span> <span class="ID">C</span><span class="Operator">.</span><span class="ID">count</span>  <span class="Comment"># or return self.count</span><span class="Text"/></span>
</pre></div><span id="line-1180" class="anchor"/><span id="line-1181" class="anchor"/><p class="line862">对于isinstance(c, C)，c.count 同样引用 C.count， 除非被c本身重载，或是被基类搜索路径中从c.<tt class="backtick">__class__</tt>到C上的某个类重载。 <span id="line-1182" class="anchor"/><span id="line-1183" class="anchor"/></p><p class="line874">注意：在C的method中，类似 self.count = 42 的操作创建一个新的不相关实例，它在self本身的dict中被命名为 "count"。 重新邦定一个类静态数据必须指定类，无论是在method里面还是外面： <span id="line-1184" class="anchor"/><span id="line-1185" class="anchor"/><span id="line-1186" class="anchor"/><span id="line-1187" class="anchor"/><span id="line-1188" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-2be972d3c1cab97ae7e6afca1143b98b42746aa9_075\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-2be972d3c1cab97ae7e6afca1143b98b42746aa9_075', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-2be972d3c1cab97ae7e6afca1143b98b42746aa9_075" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">C</span><span class="Operator">.</span><span class="ID">count</span> <span class="Operator">=</span> <span class="Number">314</span><span class="Text"/></span>
</pre></div><span id="line-1189" class="anchor"/><span id="line-1190" class="anchor"/><p class="line874">当你使用新类型的类时，便有可能创建静态方法: <span id="line-1191" class="anchor"/><span id="line-1192" class="anchor"/><span id="line-1193" class="anchor"/><span id="line-1194" class="anchor"/><span id="line-1195" class="anchor"/><span id="line-1196" class="anchor"/><span id="line-1197" class="anchor"/><span id="line-1198" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-8baf3c59750d72bf72cc190b85ec31e013ba342a_076\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-8baf3c59750d72bf72cc190b85ec31e013ba342a_076', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-8baf3c59750d72bf72cc190b85ec31e013ba342a_076" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">C</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">def</span> <span class="ID">static</span><span class="Operator">(</span><span class="ID">arg1</span><span class="Operator">,</span> <span class="ID">arg2</span><span class="Operator">,</span> <span class="ID">arg3</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="Comment"># No 'self' parameter!</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Comment"/>        <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   6 </span>    <span class="ID">static</span> <span class="Operator">=</span> <span class="ID">staticmethod</span><span class="Operator">(</span><span class="ID">static</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1199" class="anchor"/><span id="line-1200" class="anchor"/><p class="line874">但是，创建静态方法的另一个更直接的方式是使用一个简单的模块级别的函数： <span id="line-1201" class="anchor"/><span id="line-1202" class="anchor"/><span id="line-1203" class="anchor"/><span id="line-1204" class="anchor"/><span id="line-1205" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-bbe774358ad42264dab0e12a8a9ee199c5adf60a_077\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-bbe774358ad42264dab0e12a8a9ee199c5adf60a_077', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-bbe774358ad42264dab0e12a8a9ee199c5adf60a_077" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">getcount</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">return</span> <span class="ID">C</span><span class="Operator">.</span><span class="ID">count</span><span class="Text"/></span>
</pre></div><span id="line-1206" class="anchor"/><span id="line-1207" class="anchor"/><p class="line874">如果每个模块可以定义一个类（或紧密相关的类结构），就可提供相应的封装。 <span id="line-1208" class="anchor"/><span id="line-1209" class="anchor"/></p><p class="line867">
</p><h3 id="head-f0170097beb1bd183ef817f0705b153410f77b9b">1.6.9. 在python中如何重载构造函数?</h3>
<span id="line-1210" class="anchor"/><span id="line-1211" class="anchor"/><p class="line874">这个答案对于所有的method都适用，但是问题一般都先出现在构造函数上。 <span id="line-1212" class="anchor"/><span id="line-1213" class="anchor"/></p><p class="line874">在C++中你编写 <span id="line-1214" class="anchor"/><span id="line-1215" class="anchor"/><span id="line-1216" class="anchor"/><span id="line-1217" class="anchor"/><span id="line-1218" class="anchor"/><span id="line-1219" class="anchor"/><span id="line-1220" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-e9957e8a819cacaac931811918c693177972015a_078\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-e9957e8a819cacaac931811918c693177972015a_078', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-e9957e8a819cacaac931811918c693177972015a_078" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">C</span> <span class="Operator">{</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ID">C</span><span class="Operator">(</span><span class="Operator">)</span> <span class="Operator">{</span> <span class="ID">cout</span> <span class="Operator"><<</span> <span class="String">"No arguments\n"</span><span class="Operator">;</span> <span class="Operator">}</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ID">C</span><span class="Operator">(</span><span class="ID">int</span> <span class="ID">i</span><span class="Operator">)</span> <span class="Operator">{</span> <span class="ID">cout</span> <span class="Operator"><<</span> <span class="String">"Argument is "</span> <span class="Operator"><<</span> <span class="ID">i</span> <span class="Operator"><<</span> <span class="String">"\n"</span><span class="Operator">;</span> <span class="Operator">}</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Operator">}</span><span class="Text"/></span>
</pre></div><span id="line-1221" class="anchor"/><span id="line-1222" class="anchor"/><p class="line874">在python中，你只能编写一个构造函数，通过使用默认参数来处理所有的情况。例如： <span id="line-1223" class="anchor"/><span id="line-1224" class="anchor"/><span id="line-1225" class="anchor"/><span id="line-1226" class="anchor"/><span id="line-1227" class="anchor"/><span id="line-1228" class="anchor"/><span id="line-1229" class="anchor"/><span id="line-1230" class="anchor"/><span id="line-1231" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-0ea2270e334816e772300bea19e1eda9805be6d9_079\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-0ea2270e334816e772300bea19e1eda9805be6d9_079', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-0ea2270e334816e772300bea19e1eda9805be6d9_079" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">class</span> <span class="ID">C</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="ID">i</span><span class="Operator">=</span><span class="ID">None</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>        <span class="ResWord">if</span> <span class="ID">i</span> <span class="ResWord">is</span> <span class="ID">None</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   5 </span>            <span class="ResWord">print</span> <span class="String">"No arguments"</span></span>
<span class="line"><span class="LineNumber">   6 </span>        <span class="ResWord">else</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   7 </span>            <span class="ResWord">print</span> <span class="String">"Argument is"</span><span class="Operator">,</span> <span class="ID">i</span><span class="Text"/></span>
</pre></div><span id="line-1232" class="anchor"/><span id="line-1233" class="anchor"/><p class="line874">这与C++并不相同，但在实际应用中已相当接近。 <span id="line-1234" class="anchor"/><span id="line-1235" class="anchor"/></p><p class="line874">你也可以使用变长参数列表，例如 <span id="line-1236" class="anchor"/><span id="line-1237" class="anchor"/><span id="line-1238" class="anchor"/><span id="line-1239" class="anchor"/><span id="line-1240" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-c9aa1b61a7940a4d21a65251a19f4ed939edaffe_080\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-c9aa1b61a7940a4d21a65251a19f4ed939edaffe_080', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-c9aa1b61a7940a4d21a65251a19f4ed939edaffe_080" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">__init__</span><span class="Operator">(</span><span class="ID">self</span><span class="Operator">,</span> <span class="Operator">*</span><span class="ID">args</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span><span class="Text"/></span>
</pre></div><span id="line-1241" class="anchor"/><span id="line-1242" class="anchor"/><p class="line874">同样的方法适用于所有的method定义。 <span id="line-1243" class="anchor"/><span id="line-1244" class="anchor"/></p><p class="line867">
</p><h3 id="head-cb631ca6cc49db3f7ba882db3225249c2b35bee6">1.6.10. 我想使用 __spam 却得到一个错误_SomeClassName__spam.</h3>
<span id="line-1245" class="anchor"/><span id="line-1246" class="anchor"/><p class="line862">有两个前置下划线的变量提供了一个简单却有效的定义类私有变量的方法。任何<span class="u">spam (至少两个前置下划线，最多一个后置下划线)格式的标志符都会被替换为_classname</span>spam, 其中classname 是目前的类名称，并去掉了所有的前置下划线。 <span id="line-1247" class="anchor"/><span id="line-1248" class="anchor"/></p><p class="line862">这并不能保证私有性：一个外部的用户可以直接连接到"_classname<span class="u">spam" 属性，且所有的私有变量在对象的 <tt class="backtick">__dict__</tt>中都是可见的。很多Python程序员从来不为私有变量名称烦恼。 <span id="line-1249" class="anchor"/><span id="line-1250" class="anchor"/><p class="line867">
</p><h3 id="head-6ac0e6763881eb4dcfc10231b7f33f1c9a4b4f59">1.6.11. 我的类定义了`__del__` 但在删除对象时并没有被调用.</h3>
<span id="line-1251" class="anchor"/><span id="line-1252" class="anchor"/><p class="line874">有几个可能的原因。 <span id="line-1253" class="anchor"/><span id="line-1254" class="anchor"/></p><p class="line862">del 语句并不一定要调用 <tt class="backtick">__del__</tt> -- 它只是简单地减少对象的引用计数，如果已为零便调用 <tt class="backtick">__del__</tt> 。 <span id="line-1255" class="anchor"/><span id="line-1256" class="anchor"/></p><p class="line862">如果你的数据结构包含 循环链接（例如，在一个树种，每个child都有一个parent引用而每个parent都有一系列的child），那么引用计数永远不会返回至零。一旦python运行一个算法来检测这种循环，但可能在你的数据结构的最后一个引用结束后过一段时间才会运行垃圾收集，所以你的 <tt class="backtick">__del__</tt> 方法会在一个随机的时间被调用。当你想reproduce错误时，这是很不方便的。更糟的是，对象的 <tt class="backtick">__del__</tt> 方法以任意顺序执行。你可以运行 gc.collect() 来强制进行收集，但是也可能会有对象永远不会被收集的情况。 <span id="line-1257" class="anchor"/><span id="line-1258" class="anchor"/></p><p class="line862">尽管有循环收集，为对象明确地定义一个 close() 用来在完成任务后被调用，依然是一个好主意。那么close() 方法会删除引用subobject的属性。不要直接调用 <tt class="backtick">__del__</tt> -- <tt class="backtick">__del__</tt> 应该调用 close() 而 close() 应该确定对于相同的对象它可以不止一次地被调用。 <span id="line-1259" class="anchor"/><span id="line-1260" class="anchor"/></p><p class="line874">另一个防止循环引用的方法就是使用 "weakref" 模块，它允许你指向对象而不会增加引用计数。距离来说，对于树数据结构，应该对它们的parent和sibling（如果需要！）使用weak引用。 <span id="line-1261" class="anchor"/><span id="line-1262" class="anchor"/></p><p class="line874">如果一个对象曾作为一个函数的local变量，而这个函数在一个except语句中捕获一个表达式，那么情况有所变化，对这个对象的引用在那个函数的stack frame中且被stack trace包含，即，这个对象引用仍然存在。一般的，调用 sys.exc_clear() 会清除最后一次记录的异常，以解决这个问题。 <span id="line-1263" class="anchor"/><span id="line-1264" class="anchor"/></p><p class="line862">最后，如果你的 <tt class="backtick">__del__</tt> 方法抛出一个异常，一个警告信息被输出到 sys.stderr。 <span id="line-1265" class="anchor"/><span id="line-1266" class="anchor"/></p><p class="line867">
</p><h3 id="head-04ccb43c20768cefbafe8648506dcad8bbf1e3ab">1.6.12. 我如何得到一个给定类的所有实例 的列表?</h3>
<span id="line-1267" class="anchor"/><span id="line-1268" class="anchor"/><p class="line874">Python并不跟踪某个类（或内建数据类型）的所有实例。你可以通过在类的构造函数中维护一个列表来跟踪所有的实例。 <span id="line-1269" class="anchor"/><span id="line-1270" class="anchor"/></p><p class="line867">
</p><h2 id="head-6fa0baf6a054a5c60279208494be546d48a1c709">1.7. 模块</h2>
<span id="line-1271" class="anchor"/><span id="line-1272" class="anchor"/><p class="line867">
</p><h3 id="head-d685e6c972ed29ee66b716ffa79b7744414757f6">1.7.1. 如何创建一个 .pyc 文件?</h3>
<span id="line-1273" class="anchor"/><span id="line-1274" class="anchor"/><p class="line874">当一个模块被首次import（或者是源代码文件比目前已编译好的文件更新）时，一个包含了编译好的代码的 .pyc 文件在这个 .py 文件所在的目录中被创建。 <span id="line-1275" class="anchor"/><span id="line-1276" class="anchor"/></p><p class="line874">.pyc文件创建失败的一个可能原因是目录的许可权限。举例来说，你正在测试一个web服务器，编程时为某用户，但运行时又为另一用户，就会发生这种情况。如果你import一个模块，且python有这个能力（权限，剩余空间等）将编译好的模块写回目录，那么一个.pyc文件就会被自动创建。 <span id="line-1277" class="anchor"/><span id="line-1278" class="anchor"/></p><p class="line874">在脚本的顶层运行python时，则不会认为引入了模块，.pyc文件也不会被创建。例如，如果你有一个顶层的模块 abc.py ，而它import了另一个模块 xyz.py, 当你运行abc时, xyz.pyc 会在xyz被import时被创建，但是abc.pyc不会被创建，因为它没有被import。 <span id="line-1279" class="anchor"/><span id="line-1280" class="anchor"/></p><p class="line874">如果你需要创建 abc.pyc -- 即，为一个并没import的模块创建 .pyc 文件 -- 你可以使用 py_compile 和 compileall 模块。 <span id="line-1281" class="anchor"/><span id="line-1282" class="anchor"/></p><p class="line874">py_compile 模块可以手动地编译任何模块。一种方式是使用这个模块的compile() 函数。 <span id="line-1283" class="anchor"/><span id="line-1284" class="anchor"/><span id="line-1285" class="anchor"/><span id="line-1286" class="anchor"/><span id="line-1287" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-dca3054019e141c3cd21c26986212335014ab669_081\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-dca3054019e141c3cd21c26986212335014ab669_081', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-dca3054019e141c3cd21c26986212335014ab669_081" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ResWord">import</span> <span class="ID">py_compile</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">py_compile</span><span class="Operator">.</span><span class="ID">compile</span><span class="Operator">(</span><span class="String">'abc.py'</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1288" class="anchor"/><span id="line-1289" class="anchor"/><p class="line874">这会将.pyc 文件写入abc.py 所在的目录(或者可以通过可选参数cfile 改变它）。 <span id="line-1290" class="anchor"/><span id="line-1291" class="anchor"/></p><p class="line874">你也可以使用compileall 模块自动编译一个或若干目录中的所有文件。你可以在命令行里运行 compileall.py 并指定要编译的python文件的目录。 <span id="line-1292" class="anchor"/><span id="line-1293" class="anchor"/><span id="line-1294" class="anchor"/><span id="line-1295" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-6c1e61180b0635d7e7cc58549bac52290b5063f1_082\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-6c1e61180b0635d7e7cc58549bac52290b5063f1_082', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-6c1e61180b0635d7e7cc58549bac52290b5063f1_082" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">python</span> <span class="ID">compileall</span><span class="Operator">.</span><span class="ID">py</span> <span class="Operator">.</span><span class="Text"/></span>
</pre></div><span id="line-1296" class="anchor"/><span id="line-1297" class="anchor"/><p class="line867">
</p><h3 id="head-74ae917fe520f3cdd0d6df9dce65a4f388be7e3c">1.7.2. 如何查到目前这个模块的名称?</h3>
<span id="line-1298" class="anchor"/><span id="line-1299" class="anchor"/><p class="line862">通过global变量<tt class="backtick">__name__</tt> 某个模块可以得知它的名称。如果它的值为 '<tt class="backtick">__main__</tt>'，这个程序正作为一个脚本在运行。 有很多模块常通过import来使用，这些模块也提供了一个命令行界面或自测试功能，这些代码只在检查了 <tt class="backtick">__name__</tt> 后运行: <span id="line-1300" class="anchor"/><span id="line-1301" class="anchor"/><span id="line-1302" class="anchor"/><span id="line-1303" class="anchor"/><span id="line-1304" class="anchor"/><span id="line-1305" class="anchor"/><span id="line-1306" class="anchor"/><span id="line-1307" class="anchor"/><span id="line-1308" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9f08421048af96a9c05f1828dcffc13d5adba17e_083\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-9f08421048af96a9c05f1828dcffc13d5adba17e_083', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-9f08421048af96a9c05f1828dcffc13d5adba17e_083" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">def</span> <span class="ID">main</span><span class="Operator">(</span><span class="Operator">)</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   3 </span>    <span class="ResWord">print</span> <span class="String">'Running test...'</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="Operator">.</span><span class="Operator">.</span><span class="Operator">.</span></span>
<span class="line"><span class="LineNumber">   5 </span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="ResWord">if</span> <span class="ID">__name__</span>  <span class="String">'__main__'</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   7 </span>    <span class="ID">main</span><span class="Operator">(</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1309" class="anchor"/><span id="line-1310" class="anchor"/><p class="line867">
</p><h3 id="head-82f267934f65508a5f94848cdccf03930cff383d">1.7.3. 如何让模块互相import?</h3>
<span id="line-1311" class="anchor"/><span id="line-1312" class="anchor"/><p class="line874">假设你有以下模块: <span id="line-1313" class="anchor"/><span id="line-1314" class="anchor"/></p><p class="line874">foo.py: <span id="line-1315" class="anchor"/><span id="line-1316" class="anchor"/><span id="line-1317" class="anchor"/><span id="line-1318" class="anchor"/><span id="line-1319" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-2623cfda33e4b23e5c7c5114d0894c32819c303f_084\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-2623cfda33e4b23e5c7c5114d0894c32819c303f_084', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-2623cfda33e4b23e5c7c5114d0894c32819c303f_084" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">from</span> <span class="ID">bar</span> <span class="ResWord">import</span> <span class="ID">bar_var</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ID">foo_var</span><span class="Operator">=</span><span class="Number">1</span><span class="Text"/></span>
</pre></div><span id="line-1320" class="anchor"/><span id="line-1321" class="anchor"/><p class="line874">bar.py: <span id="line-1322" class="anchor"/><span id="line-1323" class="anchor"/><span id="line-1324" class="anchor"/><span id="line-1325" class="anchor"/><span id="line-1326" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-2bf021eb6da662df5e749e0572cb638a19b05889_085\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-2bf021eb6da662df5e749e0572cb638a19b05889_085', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-2bf021eb6da662df5e749e0572cb638a19b05889_085" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">from</span> <span class="ID">foo</span> <span class="ResWord">import</span> <span class="ID">foo_var</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ID">bar_var</span><span class="Operator">=</span><span class="Number">2</span><span class="Text"/></span>
</pre></div><span id="line-1327" class="anchor"/><span id="line-1328" class="anchor"/><p class="line874">解释器按以下步骤执行： <span id="line-1329" class="anchor"/><span id="line-1330" class="anchor"/><span id="line-1331" class="anchor"/></p><ul><li>main imports foo <span id="line-1332" class="anchor"/><span id="line-1333" class="anchor"/></li><li class="gap">Empty globals for foo are created <span id="line-1334" class="anchor"/><span id="line-1335" class="anchor"/></li><li class="gap">foo is compiled and starts executing <span id="line-1336" class="anchor"/><span id="line-1337" class="anchor"/></li><li class="gap">foo imports bar <span id="line-1338" class="anchor"/><span id="line-1339" class="anchor"/></li><li class="gap">Empty globals for bar are created <span id="line-1340" class="anchor"/><span id="line-1341" class="anchor"/></li><li class="gap">bar is compiled and starts executing <span id="line-1342" class="anchor"/><span id="line-1343" class="anchor"/></li><li class="gap">bar imports foo (which is a no-op since there already is a module named foo) <span id="line-1344" class="anchor"/><span id="line-1345" class="anchor"/></li><li class="gap">bar.foo_var = foo.foo_var <span id="line-1346" class="anchor"/><span id="line-1347" class="anchor"/><span id="line-1348" class="anchor"/></li></ul><p class="line874">最后一步会失败，因为python还没有解释完 foo，而且foo的global symbol dictionary也是空的。 <span id="line-1349" class="anchor"/><span id="line-1350" class="anchor"/></p><p class="line874">当你import foo, 然后在global代码中试图连接 foo.foo_var 时也会发生同样的事情。 <span id="line-1351" class="anchor"/><span id="line-1352" class="anchor"/></p><p class="line874">至少有三个方法可解决这个问题。 <span id="line-1353" class="anchor"/><span id="line-1354" class="anchor"/></p><p class="line862">Guido van Rossum 建议避免所有的from <module> import ...的用法，并将所有的代码都移到函数中。global变量和类的初始化应该只使用常量或内建函数。这意味着对所有import的模块的引用都使用 <module>.<name> 的方式。 <span id="line-1355" class="anchor"/><span id="line-1356" class="anchor"/></p><p class="line874">Jim Roskind 建议在每个模块中采用以下步骤： <span id="line-1357" class="anchor"/><span id="line-1358" class="anchor"/><span id="line-1359" class="anchor"/></p><ul><li>exports (globals, functions, and classes that don't need imported base classes) <span id="line-1360" class="anchor"/><span id="line-1361" class="anchor"/></li><li class="gap">import statements <span id="line-1362" class="anchor"/><span id="line-1363" class="anchor"/></li><li class="gap">active code (including globals that are initialized from imported values). <span id="line-1364" class="anchor"/><span id="line-1365" class="anchor"/><span id="line-1366" class="anchor"/></li></ul><p class="line874">van Rossum 并不是很喜欢这种方法，因为import出现在一个奇怪的地方，但这样确实可以工作。 <span id="line-1367" class="anchor"/><span id="line-1368" class="anchor"/></p><p class="line874">Matthias Urlichs 建议i重写你的代码，使你不必在开头就递归地import。 <span id="line-1369" class="anchor"/><span id="line-1370" class="anchor"/></p><p class="line874">这些方法互相之间并不排斥。 <span id="line-1371" class="anchor"/><span id="line-1372" class="anchor"/></p><p class="line867">
</p><h3 id="head-7286df0378ba21496938b38f76a26ac9e3d947ac">1.7.4. `__import__`('x.y.z') 返回 <module 'x'>; 如何得到 z?</h3>
<span id="line-1373" class="anchor"/><span id="line-1374" class="anchor"/><p class="line874">用: <span id="line-1375" class="anchor"/><span id="line-1376" class="anchor"/><span id="line-1377" class="anchor"/><span id="line-1378" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-2181c67e1670c8297f436bffe701fdcffa1ab053_086\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-2181c67e1670c8297f436bffe701fdcffa1ab053_086', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-2181c67e1670c8297f436bffe701fdcffa1ab053_086" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">__import__</span><span class="Operator">(</span><span class="String">'x.y.z'</span><span class="Operator">)</span><span class="Operator">.</span><span class="ID">y</span><span class="Operator">.</span><span class="ID">z</span><span class="Text"/></span>
</pre></div><span id="line-1379" class="anchor"/><span id="line-1380" class="anchor"/><p class="line874">对于更现实的情况，你可能需要这样做： <span id="line-1381" class="anchor"/><span id="line-1382" class="anchor"/><span id="line-1383" class="anchor"/><span id="line-1384" class="anchor"/><span id="line-1385" class="anchor"/><span id="line-1386" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-c0827717aee9d07a726e82c72e4d7438b3423a9a_087\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-c0827717aee9d07a726e82c72e4d7438b3423a9a_087', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-c0827717aee9d07a726e82c72e4d7438b3423a9a_087" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ID">m</span> <span class="Operator">=</span> <span class="ID">__import__</span><span class="Operator">(</span><span class="ID">s</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ResWord">for</span> <span class="ID">i</span> <span class="ResWord">in</span> <span class="ID">s</span><span class="Operator">.</span><span class="ID">split</span><span class="Operator">(</span><span class="String">"."</span><span class="Operator">)</span><span class="Operator">[</span><span class="Number">1</span><span class="Operator">:</span><span class="Operator">]</span><span class="Operator">:</span></span>
<span class="line"><span class="LineNumber">   4 </span>    <span class="ID">m</span> <span class="Operator">=</span> <span class="ID">getattr</span><span class="Operator">(</span><span class="ID">m</span><span class="Operator">,</span> <span class="ID">i</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1387" class="anchor"/><span id="line-1388" class="anchor"/><p class="line867">
</p><h3 id="head-c59832775712c04acf1a8f4b6c8af5e49ee15bd5">1.7.5. 当我对import的模块修改并重新import后却没有出现应有的改变，为什么?</h3>
<span id="line-1389" class="anchor"/><span id="line-1390" class="anchor"/><p class="line874">处于效率和连续性的原因，python只在模块第一次被import时读取模块文件。如果不这样，在一个包含很多模块的程序中，若每个模块都import另一个相同的模块，会导致这个模块被多次读取。若要强行重读某个模块，这样做： <span id="line-1391" class="anchor"/><span id="line-1392" class="anchor"/><span id="line-1393" class="anchor"/><span id="line-1394" class="anchor"/><span id="line-1395" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9373dd7c5b0f8d1cb10f0c0c2c73ba3d8e2d86d8_088\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-9373dd7c5b0f8d1cb10f0c0c2c73ba3d8e2d86d8_088', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-9373dd7c5b0f8d1cb10f0c0c2c73ba3d8e2d86d8_088" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">import</span> <span class="ID">modname</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="ID">reload</span><span class="Operator">(</span><span class="ID">modname</span><span class="Operator">)</span><span class="Text"/></span>
</pre></div><span id="line-1396" class="anchor"/><span id="line-1397" class="anchor"/><p class="line874">警告：这种方法并不是100%有效。特别地，模块包含以下语句 <span id="line-1398" class="anchor"/><span id="line-1399" class="anchor"/><span id="line-1400" class="anchor"/><span id="line-1401" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-b4beb8ff9b0a55f2a7703c8c6083ac458cceb76f_089\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-b4beb8ff9b0a55f2a7703c8c6083ac458cceb76f_089', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-b4beb8ff9b0a55f2a7703c8c6083ac458cceb76f_089" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="ResWord">from</span> <span class="ID">modname</span> <span class="ResWord">import</span> <span class="ID">some_objects</span><span class="Text"/></span>
</pre></div><span id="line-1402" class="anchor"/><span id="line-1403" class="anchor"/><p class="line874">仍会使用旧版本的对象。如果模块包含类定义，已存在的类实例也不会更新成新的定义。这会导致以下荒谬的结果： <span id="line-1404" class="anchor"/><span id="line-1405" class="anchor"/><span id="line-1406" class="anchor"/><span id="line-1407" class="anchor"/><span id="line-1408" class="anchor"/><span id="line-1409" class="anchor"/><span id="line-1410" class="anchor"/><span id="line-1411" class="anchor"/><span id="line-1412" class="anchor"/></p><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-be829f78612ab2eb6ebf72c0587fb2cd6097540f_090\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-be829f78612ab2eb6ebf72c0587fb2cd6097540f_090', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-be829f78612ab2eb6ebf72c0587fb2cd6097540f_090" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ResWord">import</span> <span class="ID">cls</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">c</span> <span class="Operator">=</span> <span class="ID">cls</span><span class="Operator">.</span><span class="ID">C</span><span class="Operator">(</span><span class="Operator">)</span>                <span class="Comment"># Create an instance of C</span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">reload</span><span class="Operator">(</span><span class="ID">cls</span><span class="Operator">)</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Operator"><</span><span class="ID">module</span> <span class="String">'cls'</span> <span class="ResWord">from</span> <span class="String">'cls.pyc'</span><span class="Operator">></span></span>
<span class="line"><span class="LineNumber">   6 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">isinstance</span><span class="Operator">(</span><span class="ID">c</span><span class="Operator">,</span> <span class="ID">cls</span><span class="Operator">.</span><span class="ID">C</span><span class="Operator">)</span>       <span class="Comment"># isinstance is false?!?</span></span>
<span class="line"><span class="LineNumber">   7 </span><span class="ID">False</span><span class="Text"/></span>
</pre></div><span id="line-1413" class="anchor"/><span id="line-1414" class="anchor"/><p class="line874">如果你print这个类对象的话，就会搞清楚这个问题的实质了： <span id="line-1415" class="anchor"/><span id="line-1416" class="anchor"/><span id="line-1417" class="anchor"/></p><ul><li style="list-style-type: none;"><span id="line-1418" class="anchor"/><span id="line-1419" class="anchor"/><span id="line-1420" class="anchor"/><span id="line-1421" class="anchor"/><span id="line-1422" class="anchor"/><span id="line-1423" class="anchor"/><div lang="en" dir="ltr" class="codearea">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-59afce7a4725de206751012ef811d809f3e8e75a_091\', 1, 1);" \
class="codenumbers">切换行号显示<\/a>');
</script><a class="codenumbers" onclick="return togglenumber('CA-59afce7a4725de206751012ef811d809f3e8e75a_091', 1, 1);" href="#">切换行号显示</a>
<pre lang="en" id="CA-59afce7a4725de206751012ef811d809f3e8e75a_091" dir="ltr"><span class="line"><span class="LineNumber">   1 </span></span>
<span class="line"><span class="LineNumber">   2 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">c</span><span class="Operator">.</span><span class="ID">__class__</span></span>
<span class="line"><span class="LineNumber">   3 </span><span class="Operator"><</span><span class="ResWord">class</span> <span class="ID">cls</span><span class="Operator">.</span><span class="ID">C</span> <span class="ID">at</span> <span class="Number">0x7352a0</span><span class="Operator">></span></span>
<span class="line"><span class="LineNumber">   4 </span><span class="Operator">>></span><span class="Operator">></span> <span class="ID">cls</span><span class="Operator">.</span><span class="ID">C</span></span>
<span class="line"><span class="LineNumber">   5 </span><span class="Operator"><</span><span class="ResWord">class</span> <span class="ID">cls</span><span class="Operator">.</span><span class="ID">C</span> <span class="ID">at</span> <span class="Number">0x4198d0</span><span class="Operator">></span><span class="Text"/></span>
</pre></div><span id="line-1424" class="anchor"/><span id="line-1425" class="anchor"/></li></ul><p class="line867"/><hr/><p class="line874"> <span id="line-1426" class="anchor"/><span id="line-1427" class="anchor"/></p><p class="line867">Email:liqust <strong>at<em> gmail dot com ©2005 </em></strong><em>2pole<strong> <span id="line-1428" class="anchor"/><span id="bottom" class="anchor"/></strong></em></p></span></p></div>
